{"version":3,"file":"breeze-client.js","sources":["ng://breeze-client/src/enum.ts","ng://breeze-client/src/core.ts","ng://breeze-client/src/assert-param.ts","ng://breeze-client/src/event.ts","ng://breeze-client/src/config.ts","ng://breeze-client/src/data-service.ts","ng://breeze-client/src/validate.ts","ng://breeze-client/src/data-type.ts","ng://breeze-client/src/entity-state.ts","ng://breeze-client/src/entity-action.ts","ng://breeze-client/src/entity-key.ts","ng://breeze-client/src/query-options.ts","ng://breeze-client/src/predicate.ts","ng://breeze-client/src/entity-query.ts","ng://breeze-client/src/entity-aspect.ts","ng://breeze-client/src/naming-convention.ts","ng://breeze-client/src/csdl-metadata-parser.ts","ng://breeze-client/src/local-query-comparison-options.ts","ng://breeze-client/src/default-property-interceptor.ts","ng://breeze-client/src/entity-metadata.ts","ng://breeze-client/src/abstract-data-service-adapter.ts","ng://breeze-client/src/validation-options.ts","ng://breeze-client/src/save-options.ts","ng://breeze-client/src/key-generator.ts","ng://breeze-client/src/entity-group.ts","ng://breeze-client/src/mapping-context.ts","ng://breeze-client/src/unattached-children-map.ts","ng://breeze-client/src/entity-manager.ts","ng://breeze-client/src/interface-registry.ts","ng://breeze-client/src/observable-array.ts","ng://breeze-client/src/relation-array.ts","ng://breeze-client/src/complex-array.ts","ng://breeze-client/src/primitive-array.ts","ng://breeze-client/src/breeze.ts","ng://breeze-client/breeze-client.ts"],"sourcesContent":["/*\r\n * Copyright 2012-2019 IdeaBlade, Inc.  All Rights Reserved.  \r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and \r\n * conditions of the IdeaBlade Breeze license, available at http://www.breezejs.com/license\r\n *\r\n * Author: Jay Traband\r\n */\r\n\r\n/**\r\nBase class for all Breeze enumerations, such as EntityState, DataType, FetchStrategy, MergeStrategy etc.\r\nA Breeze Enum is a namespaced set of constant values.  Each Enum consists of a group of related constants, called 'symbols'.\r\nUnlike enums in some other environments, each 'symbol' can have both methods and properties.\r\n>     class DayOfWeek extends BreezeEnum {\r\n>       dayIndex: number;\r\n>       isWeekend?: boolean;\r\n>       nextDay() {\r\n>         let nextIndex = (this.dayIndex + 1) % 7;\r\n>         return DayOfWeek.getSymbols()[nextIndex];\r\n>       }\r\n>\r\n>       static Monday = new DayOfWeek( { dayIndex: 0});\r\n>       static Tuesday = new DayOfWeek( { dayIndex: 1 });\r\n>       static Wednesday = new DayOfWeek( { dayIndex: 2 });\r\n>       static Thursday = new DayOfWeek( { dayIndex: 3 });\r\n>       static Friday = new DayOfWeek( { dayIndex: 4 });\r\n>       static Saturday = new DayOfWeek( { dayIndex: 5, isWeekend: true });\r\n>       static Sunday = new DayOfWeek( { dayIndex: 6, isWeekend: true });\r\n>     }\r\n>\r\n>     describe(\"DayOfWeek\", () => {\r\n>       test(\"should support full enum capabilities\", function() {\r\n>         // // custom methods\r\n>         let dowSymbols = DayOfWeek.getSymbols();\r\n>         expect(dowSymbols.length).toBe(7);\r\n>         expect(DayOfWeek.Monday.nextDay()).toBe(DayOfWeek.Tuesday);\r\n>         expect(DayOfWeek.Sunday.nextDay()).toBe(DayOfWeek.Monday);\r\n>       // // custom properties\r\n>         expect(DayOfWeek.Tuesday.isWeekend).toBe(undefined);\r\n>         expect(DayOfWeek.Saturday.isWeekend).toBe(true);\r\n>       // // Standard enum capabilities\r\n>         expect(DayOfWeek.Thursday instanceof DayOfWeek).toBe(true);\r\n>         expect(BreezeEnum.isSymbol(DayOfWeek.Wednesday)).toBe(true);\r\n>         expect(DayOfWeek.contains(DayOfWeek.Thursday)).toBe(true);\r\n>         expect(DayOfWeek.Friday.toString()).toBe(\"Friday\");\r\n>       });\r\n>   });\r\nNote that we have Error['x'] = ... in some places in the code to prevent Terser from optimizing out some important calls.\r\n@dynamic\r\n*/\r\nexport class BreezeEnum {\r\n  // // TODO: think about CompositeEnum (flags impl).\r\n  /** The name of this symbol */\r\n  name: string;\r\n  /** Type of the enum; set in prototype of each enum */\r\n  _$typeName: string;\r\n  /** @hidden @internal */\r\n  static _resolvedNamesAndSymbols: { name: string, symbol: BreezeEnum }[];\r\n\r\n  /**  */\r\n  constructor(propertiesObj?: Object) {\r\n    if (propertiesObj) {\r\n      Object.keys(propertiesObj).forEach((key) => this[key] = propertiesObj[key]);\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns all of the symbols contained within this Enum.\r\n  >     let symbols = DayOfWeek.getSymbols();\r\n  @return All of the symbols contained within this Enum.\r\n  **/\r\n  static getSymbols() {\r\n    return this.resolveSymbols().map(ks => ks.symbol);\r\n  }\r\n\r\n  /**\r\n  Returns the names of all of the symbols contained within this Enum.\r\n  >     let symbols = DayOfWeek.getNames();\r\n  @return  All of the names of the symbols contained within this Enum.\r\n  **/\r\n  static getNames() {\r\n    return this.resolveSymbols().map(ks => ks.name);\r\n  }\r\n\r\n  /**\r\n  Returns an Enum symbol given its name.\r\n  >     let dayOfWeek = DayOfWeek.from(\"Thursday\");\r\n  >     // nowdayOfWeek === DayOfWeek.Thursday\r\n  @param name - Name for which an enum symbol should be returned.\r\n  @return The symbol that matches the name or 'undefined' if not found.\r\n  **/\r\n  static fromName(name: string) {\r\n    return this[name];\r\n  }\r\n\r\n  /**\r\n  Seals this enum so that no more symbols may be added to it. This should only be called after all symbols\r\n  have already been added to the Enum. This method also sets the 'name' property on each of the symbols.\r\n  >     DayOfWeek.resolveSymbols();\r\n  **/\r\n  static resolveSymbols() {\r\n    if (this._resolvedNamesAndSymbols) return this._resolvedNamesAndSymbols;\r\n    let result: {name: string, symbol: BreezeEnum }[] = [];\r\n\r\n    for (let key in this) {\r\n      if (this.hasOwnProperty(key)) {\r\n        let symb = this[key];\r\n        if (symb instanceof BreezeEnum) {\r\n          result.push( { name: key, symbol: symb });\r\n          this[key] = symb;\r\n          symb.name = key;\r\n        }\r\n      }\r\n    }\r\n    this._resolvedNamesAndSymbols = result;\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Returns whether an Enum contains a specified symbol.\r\n  >     let symbol = DayOfWeek.Friday;\r\n  >     if (DayOfWeek.contains(symbol)) {\r\n  >         // do something\r\n  >     }\r\n  @param sym - Object or symbol to test.\r\n  @return Whether this Enum contains the specified symbol.\r\n  **/\r\n  static contains(sym: BreezeEnum) {\r\n    if (!(sym instanceof BreezeEnum)) {\r\n      return false;\r\n    }\r\n\r\n    return this[sym.name] != null;\r\n  }\r\n\r\n\r\n  // /**\r\n  // Checks if an object is an Enum 'symbol'. Use the 'contains' method instead of this one \r\n  // if you want to test for a specific Enum. \r\n  // >     if (Enum.isSymbol(DayOfWeek.Wednesday)) {\r\n  // >       // do something ...\r\n  // >     };\r\n  // **/\r\n  // static isSymbol(obj: any) {\r\n  //   return obj instanceof BreezeEnum;\r\n  // };\r\n\r\n  /** Returns the string name of this Enum */\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  /** Return enum name and symbol name */\r\n  toJSON() {\r\n    return {\r\n      _$typeName: this['_$typeName'] || (this.constructor as any).name,\r\n      name: this.name\r\n    };\r\n  }\r\n\r\n}\r\n\r\n\r\n","/** See if this comment will make it into .d.ts */\r\nimport { BreezeEnum } from './enum';\r\ndeclare var global: any;\r\ndeclare var window: any;\r\n\r\nexport interface ErrorCallback {\r\n    (error: Error): void;\r\n}\r\n\r\nexport interface Callback {\r\n    (data: any): void;\r\n}\r\n\r\n// type Predicate = (i: any) => boolean;\r\ntype Predicate<T> = (i: T) => boolean;\r\n\r\nlet hasOwnProperty: (obj: Object, key: string) => boolean = uncurry(Object.prototype.hasOwnProperty);\r\nlet arraySlice: (ar: any[], start?: number, end?: number) => any[] = uncurry(Array.prototype.slice);\r\nlet isES5Supported: boolean = function () {\r\n    try {\r\n        return !!(Object.getPrototypeOf && Object.defineProperty({}, 'x', {}));\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n} ();\r\n\r\n// iterate over object\r\nfunction objectForEach(obj: Object, kvFn: (key: string, val: any) => any) {\r\n    for (let key in obj) {\r\n        if (hasOwnProperty(obj, key)) {\r\n            kvFn(key, obj[key]);\r\n        }\r\n    }\r\n}\r\n\r\nfunction objectMap(obj: Object, kvFn?: (key: string, val: any) => any): any[] {\r\n    let results: any[] = [];\r\n    for (let key in obj) {\r\n        if (hasOwnProperty(obj, key)) {\r\n            let result = kvFn ? kvFn(key, obj[key]) : obj[key];\r\n            if (result !== undefined) {\r\n                results.push(result);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}\r\n\r\nfunction objectFirst(obj: Object, kvPredicate: (key: string, val: any) => boolean): { key: string, value: any } | null {\r\n    for (let key in obj) {\r\n        if (hasOwnProperty(obj, key)) {\r\n            let value = obj[key];\r\n            if (kvPredicate(key, value)) {\r\n                return { key: key, value: value };\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction arrayFlatMap<T, U>(arr: T[], mapFn: (arg: T) => U[]) {\r\n    return Array.prototype.concat.apply([], arr.map(mapFn)) as U[];\r\n}\r\n\r\nfunction isSettable(obj: Object, propertyName: string): boolean {\r\n    let pd = getPropDescriptor(obj, propertyName);\r\n    if (pd == null) return true;\r\n    return !!(pd.writable || pd.set);\r\n}\r\n\r\nfunction getPropDescriptor(obj: Object, propertyName: string): PropertyDescriptor | undefined {\r\n    if (!isES5Supported) return undefined;\r\n\r\n    if (obj.hasOwnProperty(propertyName)) {\r\n        return Object.getOwnPropertyDescriptor(obj, propertyName);\r\n    } else {\r\n        let nextObj = Object.getPrototypeOf(obj);\r\n        if (nextObj == null) return undefined;\r\n        return getPropDescriptor(nextObj, propertyName);\r\n    }\r\n}\r\n\r\n// Functional extensions\r\n\r\n/** can be used like: persons.filter(propEq(\"firstName\", \"John\")) */\r\nfunction propEq(propertyName: string, value: any): (obj: Object) => boolean {\r\n    return function (obj: any) {\r\n        return obj[propertyName] === value;\r\n    };\r\n}\r\n\r\n/** can be used like: persons.filter(propEq(\"firstName\", \"FirstName\", \"John\")) */\r\nfunction propsEq(property1Name: string, property2Name: string, value: any): (obj: Object) => boolean {\r\n    return function (obj: any) {\r\n        return obj[property1Name] === value || obj[property2Name] === value;\r\n    };\r\n}\r\n\r\n/** can be used like persons.map(pluck(\"firstName\")) */\r\nfunction pluck(propertyName: any): (obj: Object) => any {\r\n    return function (obj: any) {\r\n        return obj[propertyName];\r\n    };\r\n}\r\n\r\n// end functional extensions\r\n\r\n/** Return an array of property values from source */\r\nfunction getOwnPropertyValues(source: Object): any[] {\r\n    let result: any[] = [];\r\n    for (let name in source) {\r\n        if (hasOwnProperty(source, name)) {\r\n            result.push(source[name]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/** Copy properties from source to target. Returns target. */\r\nfunction extend(target: Object, source: Object, propNames?: string[]): Object {\r\n    if (!source) return target;\r\n    if (propNames) {\r\n        propNames.forEach(function (propName) {\r\n            target[propName] = source[propName];\r\n        });\r\n    } else {\r\n        for (let propName in source) {\r\n            if (hasOwnProperty(source, propName)) {\r\n                target[propName] = source[propName];\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\n/** Copy properties from defaults iff undefined on target.  Returns target. */\r\nfunction updateWithDefaults(target: Object, defaults: Object): any {\r\n    for (let name in defaults) {\r\n        if (target[name] === undefined) {\r\n            target[name] = defaults[name];\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\n/** Set ctor.defaultInstance to an instance of ctor with properties from target.\r\n    We want to insure that the object returned by ctor.defaultInstance is always immutable\r\n    Use 'target' as the primary template for the ctor.defaultInstance;\r\n    Use current 'ctor.defaultInstance' as the template for any missing properties\r\n    creates a new instance for ctor.defaultInstance\r\n    returns target unchanged */\r\nfunction setAsDefault(target: Object, ctor: { new (...args: any[]): any, defaultInstance?: any }): any {\r\n    ctor.defaultInstance = updateWithDefaults(new ctor(target), ctor.defaultInstance);\r\n    return target;\r\n}\r\n\r\n/**\r\n    'source' is an object that will be transformed into another\r\n    'template' is a map where the\r\n       keys: are the keys to return\r\n         if a key contains ','s then the key is treated as a delimited string with first of the\r\n         keys being the key to return and the others all valid aliases for this key\r\n       'values' are either\r\n           1) the 'default' value of the key\r\n           2) a function that takes in the source value and should return the value to set\r\n         The value from the source is then set on the target,\r\n         after first passing thru the fn, if provided, UNLESS:\r\n           1) it is the default value\r\n           2) it is undefined ( nulls WILL be set)\r\n    'target' is optional\r\n       - if it exists then properties of the target will be set ( overwritten if the exist)\r\n       - if it does not exist then a new object will be created as filled.\r\n    'target is returned.\r\n*/\r\nfunction toJson(source: Object, template: Object, target: Object = {}): Object {\r\n\r\n    for (let key in template) {\r\n        let aliases = key.split(\",\");\r\n        let defaultValue = template[key];\r\n        // using some as a forEach with a 'break'\r\n        aliases.some(function (propName) {\r\n            if (!(propName in source)) return false;\r\n            let value = source[propName];\r\n            // there is a functional property defined with this alias ( not what we want to replace).\r\n            if (typeof value === 'function') return false;\r\n            // '==' is deliberate here - idea is that null or undefined values will never get serialized\r\n            // if default value is set to null.\r\n            // tslint:disable-next-line\r\n            if (value == defaultValue) return true;\r\n            if (Array.isArray(value) && value.length === 0) return true;\r\n            if (typeof (defaultValue) === \"function\") {\r\n                value = defaultValue(value);\r\n            } else if (typeof (value) === \"object\") {\r\n                if (value && value instanceof BreezeEnum) {\r\n                    value = value.name;\r\n                }\r\n            }\r\n            if (value === undefined) return true;\r\n            target[aliases[0]] = value;\r\n            return true;\r\n        });\r\n    }\r\n    return target;\r\n}\r\n\r\n/** Replacer function for toJSONSafe, when serializing entities.  Excludes entityAspect and other internal properties. */\r\nfunction toJSONSafeReplacer(prop: string, val: any) {\r\n    if (prop === \"entityAspect\" || prop === \"complexAspect\" || prop === \"entityType\" || prop === \"complexType\"\r\n        || prop === \"getProperty\" || prop === \"setProperty\"\r\n        || prop === \"constructor\" || prop.charAt(0) === '_' || prop.charAt(0) === '$') return;\r\n    return val;\r\n}\r\n\r\n/** Safely perform toJSON logic on objects with cycles. */\r\nfunction toJSONSafe(obj: any, replacer?: (prop: string, value: any) => any): any {\r\n    if (obj !== Object(obj)) return obj; // primitive value\r\n    if (obj._$visited) return undefined;\r\n    if (obj.toJSON) {\r\n        let newObj = obj.toJSON();\r\n        if (newObj !== Object(newObj)) return newObj; // primitive value\r\n        if (newObj !== obj) return toJSONSafe(newObj, replacer);\r\n        // toJSON returned the object unchanged.\r\n        obj = newObj;\r\n    }\r\n    obj._$visited = true;\r\n    let result: any;\r\n    if (obj instanceof Array) {\r\n        result = obj.map(function (o: any) {\r\n            return toJSONSafe(o, replacer);\r\n        });\r\n    } else if (typeof (obj) === \"function\") {\r\n        result = undefined;\r\n    } else {\r\n        result = {};\r\n        for (let prop in obj) {\r\n            if (prop === \"_$visited\") continue;\r\n            let val = obj[prop];\r\n            if (replacer) {\r\n                val = replacer(prop, val);\r\n                if (val === undefined) continue;\r\n            }\r\n            val = toJSONSafe(val, replacer);\r\n            if (val === undefined) continue;\r\n            result[prop] = val;\r\n        }\r\n    }\r\n    delete obj._$visited;\r\n    return result;\r\n}\r\n\r\n/** Resolves the values of a list of properties by checking each property in multiple sources until a value is found. */\r\nfunction resolveProperties(sources: Object[], propertyNames: string[]): any {\r\n    let r = {};\r\n    let length = sources.length;\r\n    propertyNames.forEach(function (pn) {\r\n        for (let i = 0; i < length; i++) {\r\n            let src = sources[i];\r\n            if (src) {\r\n                let val = src[pn];\r\n                if (val !== undefined) {\r\n                    r[pn] = val;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return r;\r\n}\r\n\r\n\r\n// array functions\r\n\r\nfunction toArray(item: any): any[] {\r\n    if (item == null) {\r\n        return [];\r\n    } else if (Array.isArray(item)) {\r\n        return item;\r\n    } else {\r\n        return [item];\r\n    }\r\n}\r\n\r\n/** a version of Array.map that doesn't require an array, i.e. works on arrays and scalars. */\r\n// function map<T, U>(items: T | T[], fn: (v: T, ix?: number) => U, includeNull?: boolean): U | U[] {\r\n function map<T>(items: T | T[], fn: (v: T, ix?: number) => any, includeNull?: boolean): any | any[] {\r\n    // whether to return nulls in array of results; default = true;\r\n    includeNull = includeNull == null ? true : includeNull;\r\n    if (items == null) return items;\r\n    // let result: U[];\r\n    if (Array.isArray(items)) {\r\n        let result: any[] = [];\r\n        items.forEach(function (v: any, ix: number) {\r\n            let r = fn(v, ix);\r\n            if (r != null || includeNull) {\r\n                result[ix] = r;\r\n            }\r\n        });\r\n        return result;\r\n    } else {\r\n        let result = fn(items);\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n/** Return first element matching predicate */\r\nfunction arrayFirst<T>(array: T[], predicate: Predicate<any>): T;\r\nfunction arrayFirst<T>(array: T[], predicate: Predicate<T>) {\r\n    for (let i = 0, j = array.length; i < j; i++) {\r\n        if (predicate(array[i])) {\r\n            return array[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/** Return index of first element matching predicate */\r\nfunction arrayIndexOf<T>(array: T[], predicate: Predicate<any>): number;\r\nfunction arrayIndexOf<T>(array: T[], predicate: Predicate<T>): number {\r\n    for (let i = 0, j = array.length; i < j; i++) {\r\n        if (predicate(array[i])) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n/** Add item if not already in array */\r\nfunction arrayAddItemUnique<T>(array: T[], item: T) {\r\n    let ix = array.indexOf(item);\r\n    if (ix === -1) array.push(item);\r\n}\r\n\r\n/** Remove items from the array\r\n * @param array\r\n * @param predicateOrItem - item to remove, or function to determine matching item\r\n * @param shouldRemoveMultiple - true to keep removing after first match, false otherwise\r\n */\r\nfunction arrayRemoveItem<T>(array: T[], predicateOrItem: T | Predicate<T> , shouldRemoveMultiple?: boolean) {\r\n    let predicate = (isFunction(predicateOrItem) ? predicateOrItem : undefined) as Predicate<T>;\r\n    let lastIx = array.length - 1;\r\n    let removed = false;\r\n    for (let i = lastIx; i >= 0; i--) {\r\n        if (predicate ? predicate(array[i]) : (array[i] === predicateOrItem)) {\r\n            array.splice(i, 1);\r\n            removed = true;\r\n            if (!shouldRemoveMultiple) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return removed;\r\n}\r\n\r\n/** Combine array elements using the callback.  Returns array with length == min(a1.length, a2.length) */\r\nfunction arrayZip(a1: any[], a2: any[], callback: (x1: any, x2: any) => any): any[] {\r\n    let result: any[] = [];\r\n    let n = Math.min(a1.length, a2.length);\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(callback(a1[i], a2[i]));\r\n    }\r\n    return result;\r\n}\r\n\r\n//function arrayDistinct(array) {\r\n//    array = array || [];\r\n//    let result = [];\r\n//    for (let i = 0, j = array.length; i < j; i++) {\r\n//        if (result.indexOf(array[i]) < 0)\r\n//            result.push(array[i]);\r\n//    }\r\n//    return result;\r\n//}\r\n\r\n// Not yet needed\r\n//// much faster but only works on array items with a toString method that\r\n//// returns distinct string for distinct objects.  So this is safe for arrays with primitive\r\n//// types but not for arrays with object types, unless toString() has been implemented.\r\n//function arrayDistinctUnsafe(array) {\r\n//    let o = {}, i, l = array.length, r = [];\r\n//    for (i = 0; i < l; i += 1) {\r\n//        let v = array[i];\r\n//        o[v] = v;\r\n//    }\r\n//    for (i in o) r.push(o[i]);\r\n//    return r;\r\n//}\r\n\r\nfunction arrayEquals(a1: any[], a2: any[], equalsFn?: (x1: any, x2: any) => boolean): boolean {\r\n    //Check if the arrays are undefined/null\r\n    if (!a1 || !a2) return false;\r\n\r\n    if (a1.length !== a2.length) return false;\r\n\r\n    //go thru all the vars\r\n    for (let i = 0; i < a1.length; i++) {\r\n        //if the let is an array, we need to make a recursive check\r\n        //otherwise we'll just compare the values\r\n        if (Array.isArray(a1[i])) {\r\n            if (!arrayEquals(a1[i], a2[i])) return false;\r\n        } else {\r\n            if (equalsFn) {\r\n                if (!equalsFn(a1[i], a2[i])) return false;\r\n            } else {\r\n                if (a1[i] !== a2[i]) return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// end of array functions\r\n\r\n/** Returns an array for a source and a prop, and creates the prop if needed. */\r\nfunction getArray(source: Object, propName: string): any[] {\r\n    let arr = source[propName];\r\n    if (!arr) {\r\n        arr = [];\r\n        source[propName] = arr;\r\n    }\r\n    return arr;\r\n}\r\n\r\n/** Calls requireLibCore on semicolon-separated libNames */\r\nfunction requireLib(libNames: string, errMessage?: string) {\r\n    let arrNames = libNames.split(\";\");\r\n    for (let i = 0, j = arrNames.length; i < j; i++) {\r\n        let lib = requireLibCore(arrNames[i]);\r\n        if (lib) return lib;\r\n    }\r\n    if (errMessage) {\r\n        throw new Error(\"Unable to initialize \" + libNames + \".  \" + errMessage);\r\n    }\r\n}\r\n\r\n\r\n\r\n/** Returns the 'libName' module if loaded or else returns undefined */\r\nfunction requireLibCore(libName: string) {\r\n    let win = window || (global ? global.window : undefined);\r\n    if (!win) return; // Must run in a browser. Todo: add commonjs support\r\n\r\n    // get library from browser globals if we can\r\n    let lib = win[libName];\r\n    if (lib) return lib;\r\n\r\n    // if require exists, maybe require can get it.\r\n    // This method is synchronous so it can't load modules with AMD.\r\n    // It can only obtain modules from require that have already been loaded.\r\n    // Developer should bootstrap such that the breeze module\r\n    // loads after all other libraries that breeze should find with this method\r\n    // See documentation\r\n    let r = win.require;\r\n    if (r) { // if require exists\r\n        if (r.defined) { // require.defined is not standard and may not exist\r\n            // require.defined returns true if module has been loaded\r\n            return r.defined(libName) ? r(libName) : undefined;\r\n        } else {\r\n            // require.defined does not exist so we have to call require('libName') directly.\r\n            // The require('libName') overload is synchronous and does not load modules.\r\n            // It throws an exception if the module isn't already loaded.\r\n            try {\r\n                return r(libName);\r\n            } catch (e) {\r\n                // require('libName') threw because module not loaded\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Execute fn while obj has tempValue for property */\r\nfunction using(obj: Object, property: string, tempValue: any, fn: () => any) {\r\n    let originalValue = obj[property];\r\n    if (tempValue === originalValue) {\r\n        return fn();\r\n    }\r\n    obj[property] = tempValue;\r\n    try {\r\n        return fn();\r\n    } finally {\r\n        if (originalValue === undefined) {\r\n            delete obj[property];\r\n        } else {\r\n            obj[property] = originalValue;\r\n        }\r\n    }\r\n}\r\n\r\n/** Call state = startFn(), call fn(), call endFn(state) */\r\nfunction wrapExecution(startFn: () => any, endFn: (state: any) => any, fn: () => any) {\r\n    let state: any;\r\n    try {\r\n        state = startFn();\r\n        return fn();\r\n    } catch (e) {\r\n        if (typeof (state) === 'object') {\r\n            state.error = e;\r\n        }\r\n        throw e;\r\n    } finally {\r\n        endFn(state);\r\n    }\r\n}\r\n\r\n/** Remember & return the value of fn() when it was called with its current args */\r\nfunction memoize(fn: any): any {\r\n    return function () {\r\n        let args = arraySlice(<any>arguments),\r\n            hash = \"\",\r\n            i = args.length,\r\n            currentArg: any = null;\r\n        while (i--) {\r\n            currentArg = args[i];\r\n            hash += (currentArg === Object(currentArg)) ? JSON.stringify(currentArg) : currentArg;\r\n            fn.memoize || (fn.memoize = {});\r\n        }\r\n        return (hash in fn.memoize) ?\r\n            fn.memoize[hash] :\r\n            fn.memoize[hash] = fn.apply(this, args);\r\n    };\r\n}\r\n\r\nfunction getUuid(): string {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        // tslint:disable-next-line\r\n        let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n        return v.toString(16);\r\n    });\r\n}\r\n\r\nfunction durationToSeconds(duration: string) {\r\n    // basic algorithm from https://github.com/nezasa/iso8601-js-period\r\n    if (typeof duration !== \"string\") throw new Error(\"Invalid ISO8601 duration '\" + duration + \"'\");\r\n\r\n    // regex splits as follows - grp0, grp1, y, m, d, grp2, h, m, s\r\n    //                           0     1     2  3  4  5     6  7  8\r\n    let struct = /^P((\\d+Y)?(\\d+M)?(\\d+D)?)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$/.exec(duration);\r\n    if (!struct) throw new Error(\"Invalid ISO8601 duration '\" + duration + \"'\");\r\n\r\n    let ymdhmsIndexes = [2, 3, 4, 6, 7, 8]; // -> grp1,y,m,d,grp2,h,m,s\r\n    let factors = [31104000, // year (360*24*60*60)\r\n        2592000,             // month (30*24*60*60)\r\n        86400,               // day (24*60*60)\r\n        3600,                // hour (60*60)\r\n        60,                  // minute (60)\r\n        1];                  // second (1)\r\n\r\n    let seconds = 0;\r\n    for (let i = 0; i < 6; i++) {\r\n        let digit = struct[ymdhmsIndexes[i]];\r\n        // remove letters, replace by 0 if not defined\r\n        digit = <any>(digit ? +digit.replace(/[A-Za-z]+/g, '') : 0);\r\n        seconds += <any>digit * factors[i];\r\n    }\r\n    return seconds;\r\n\r\n}\r\n\r\n// is functions\r\n\r\nfunction noop() {\r\n    // does nothing\r\n}\r\n\r\nfunction identity(x: any): any {\r\n    return x;\r\n}\r\n\r\nfunction classof(o: any) {\r\n    if (o === null) {\r\n        return \"null\";\r\n    }\r\n    if (o === undefined) {\r\n        return \"undefined\";\r\n    }\r\n    return Object.prototype.toString.call(o).slice(8, -1).toLowerCase();\r\n}\r\n\r\nfunction isDate(o: any) {\r\n    return classof(o) === \"date\" && !isNaN(o.getTime());\r\n}\r\n\r\nfunction isDateString(s: string) {\r\n    // let rx = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\r\n    let rx = /^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/;\r\n    return (typeof s === \"string\") && rx.test(s);\r\n}\r\n\r\nfunction isFunction(o: any) {\r\n    return classof(o) === \"function\";\r\n}\r\n\r\n// function isString(o: any) {\r\n//     return (typeof o === \"string\");\r\n// }\r\n\r\n// function isObject(o: any) {\r\n//     return (typeof o === \"object\");\r\n// }\r\n\r\nfunction isGuid(value: any) {\r\n    return (typeof value === \"string\") && /[a-fA-F\\d]{8}-(?:[a-fA-F\\d]{4}-){3}[a-fA-F\\d]{12}/.test(value);\r\n}\r\n\r\nfunction isDuration(value: any) {\r\n    return (typeof value === \"string\") && /^(-|)?P[T]?[\\d\\.,\\-]+[YMDTHS]/.test(value);\r\n}\r\n\r\nfunction isEmpty(obj: any) {\r\n    if (obj === null || obj === undefined) {\r\n        return true;\r\n    }\r\n    for (let key in obj) {\r\n        if (hasOwnProperty(obj, key)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isNumeric(n: any) {\r\n    return !isNaN(parseFloat(n)) && isFinite(n);\r\n}\r\n\r\n\r\n\r\n// end of is Functions\r\n\r\n// string functions\r\n\r\nfunction stringStartsWith(str: string, prefix: string) {\r\n    // returns true for empty string or null prefix\r\n    if ((!str)) return false;\r\n    if (prefix === \"\" || prefix == null) return true;\r\n    return str.indexOf(prefix, 0) === 0;\r\n}\r\n\r\nfunction stringEndsWith(str: string, suffix: string) {\r\n    // returns true for empty string or null suffix\r\n    if ((!str)) return false;\r\n    if (suffix === \"\" || suffix == null) return true;\r\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n}\r\n\r\n// Based on fragment from Dean Edwards' Base 2 library\r\n/** format(\"a %1 and a %2\", \"cat\", \"dog\") -> \"a cat and a dog\" */\r\nfunction formatString(str: string, ...params: any[]) {\r\n    let args = arguments;\r\n    let pattern = RegExp(\"%([1-\" + (arguments.length - 1) + \"])\", \"g\");\r\n    return str.replace(pattern, function (match, index) {\r\n        return args[index];\r\n    });\r\n}\r\n\r\n// See http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\r\n/** Change text to title case with spaces, e.g. 'myPropertyName12' to 'My Property Name 12' */\r\nlet camelEdges = /([A-Z](?=[A-Z][a-z])|[^A-Z](?=[A-Z])|[a-zA-Z](?=[^a-zA-Z]))/g;\r\nfunction titleCaseSpace(text: string) {\r\n    text = text.replace(camelEdges, '$1 ');\r\n    text = text.charAt(0).toUpperCase() + text.slice(1);\r\n    return text;\r\n}\r\n\r\n// end of string functions\r\n\r\n// See Mark Miller’s explanation of what this does.\r\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\r\nfunction uncurry(f: any) {\r\n    let call = Function.call;\r\n    return function () {\r\n        return call.apply(f, arguments);\r\n    };\r\n}\r\n\r\n// shims\r\n\r\nif (!Object.create) {\r\n    Object.create = function (parent: any) {\r\n        let F = <any>function () {\r\n        };\r\n        F.prototype = parent;\r\n        return new F();\r\n    };\r\n}\r\n\r\n// // not all methods above are exported\r\nexport const core = {\r\n    isES5Supported: isES5Supported,\r\n    hasOwnProperty: hasOwnProperty,\r\n    getOwnPropertyValues: getOwnPropertyValues,\r\n    getPropertyDescriptor: getPropDescriptor,\r\n    objectForEach: objectForEach,\r\n    objectFirst: objectFirst,\r\n    objectMap: objectMap, // TODO: replace this with something strongly typed.\r\n    extend: extend,\r\n    propEq: propEq,\r\n    propsEq: propsEq,\r\n    pluck: pluck,\r\n    map: map,\r\n    resolveProperties: resolveProperties,\r\n    setAsDefault: setAsDefault,\r\n    updateWithDefaults: updateWithDefaults,\r\n    getArray: getArray,\r\n    toArray: toArray,\r\n    arrayEquals: arrayEquals,\r\n    arraySlice: arraySlice,\r\n    arrayFirst: arrayFirst,\r\n    arrayIndexOf: arrayIndexOf,\r\n    arrayRemoveItem: arrayRemoveItem,\r\n    arrayZip: arrayZip,\r\n    arrayAddItemUnique: arrayAddItemUnique,\r\n    arrayFlatMap: arrayFlatMap,\r\n\r\n    requireLib: requireLib,\r\n    using: using,\r\n    wrapExecution: wrapExecution,\r\n\r\n    memoize: memoize,\r\n    getUuid: getUuid,\r\n    durationToSeconds: durationToSeconds,\r\n\r\n    isSettable: isSettable,\r\n\r\n    isDate: isDate,\r\n    isDateString: isDateString,\r\n    isGuid: isGuid,\r\n    isDuration: isDuration,\r\n    isFunction: isFunction,\r\n    isEmpty: isEmpty,\r\n    isNumeric: isNumeric,\r\n\r\n    identity: identity,\r\n    noop: noop,\r\n\r\n    stringStartsWith: stringStartsWith,\r\n    stringEndsWith: stringEndsWith,\r\n    formatString: formatString,\r\n    titleCase: titleCaseSpace,\r\n\r\n    toJson: toJson,\r\n    toJSONSafe: toJSONSafe,\r\n    toJSONSafeReplacer: toJSONSafeReplacer,\r\n};\r\n\r\nexport interface ErrorCallback {\r\n    (error: any): void;\r\n}\r\n\r\n\r\n// Unused\r\n/*\r\n// returns true for booleans, numbers, strings and dates\r\n// false for null, and non-date objects, functions, and arrays\r\nfunction isPrimitive(obj: any) {\r\n    if (obj == null) return false;\r\n    // true for numbers, strings, booleans and null, false for objects\r\n    if (obj != Object(obj)) return true;\r\n    return isDate(obj);\r\n}\r\n\r\n*/","import { BreezeEnum } from './enum';\r\nimport { core  } from './core';\r\n\r\n/** @hidden @internal */\r\nexport interface IParamContext {\r\n    typeName?: string;\r\n    type?: Function;\r\n    prevContext?: IParamContext;\r\n    msg?: string | ((context: IParamContext, v: any) => string);\r\n    mustNotBeEmpty?: boolean;\r\n    enumType?: BreezeEnum;\r\n    propertyName?: string;\r\n    allowNull?: boolean;\r\n    fn?(context: IParamContext, v: any): boolean;\r\n}\r\n\r\n/** @hidden @internal */\r\nexport interface IConfigParam {\r\n    config: any;\r\n    params: Param[];\r\n    whereParam: (propName: string) => Param;\r\n}\r\n\r\n/** @hidden @internal */\r\nexport class Param {\r\n    // The %1 parameter\r\n    // is required\r\n    // must be a %2\r\n    // must be an instance of %2\r\n    // must be an instance of the %2 enumeration\r\n    // must have a %2 property\r\n    // must be an array where each element\r\n    // is optional or\r\n\r\n    v: any;\r\n    name: string;\r\n    defaultValue: any;\r\n    parent: IConfigParam;\r\n    /** @hidden @internal */\r\n    _context: IParamContext;\r\n    /** @hidden @internal */\r\n    _contexts: IParamContext[];\r\n\r\n    constructor(v: any, name: string) {\r\n        this.v = v;\r\n        this.name = name;\r\n        this._contexts = [<any>null];\r\n    }\r\n\r\n    isObject(): Param {\r\n        return this.isTypeOf('object');\r\n    }\r\n\r\n    isBoolean(): Param {\r\n        return this.isTypeOf('boolean');\r\n    }\r\n\r\n    isString(): Param {\r\n        return this.isTypeOf('string');\r\n    }\r\n\r\n    isNumber(): Param {\r\n        return this.isTypeOf('number');\r\n    }\r\n\r\n    isFunction(): Param {\r\n        return this.isTypeOf('function');\r\n    }\r\n\r\n    isNonEmptyString(): Param {\r\n        return addContext(this, {\r\n            fn: isNonEmptyString,\r\n            msg: \"must be a nonEmpty string\"\r\n        });\r\n    }\r\n\r\n\r\n    isTypeOf(typeName: string): Param {\r\n        return addContext(this, {\r\n            fn: isTypeOf,\r\n            typeName: typeName,\r\n            msg: \"must be a '\" + typeName + \"'\"\r\n        });\r\n    }\r\n\r\n\r\n    isInstanceOf(type: Function, typeName?: string): Param {\r\n        typeName = typeName || type.prototype._$typeName;\r\n        return addContext(this, {\r\n            fn: isInstanceOf,\r\n            type: type,\r\n            typeName: typeName,\r\n            msg: \"must be an instance of '\" + typeName + \"'\"\r\n        });\r\n    }\r\n\r\n\r\n    hasProperty(propertyName: string): Param {\r\n        return addContext(this, {\r\n            fn: hasProperty,\r\n            propertyName: propertyName,\r\n            msg: \"must have a '\" + propertyName + \"' property\"\r\n        });\r\n    }\r\n\r\n\r\n    isEnumOf(enumType: any): Param {\r\n        return addContext(this, {\r\n            fn: isEnumOf,\r\n            enumType: enumType,\r\n            msg: \"must be an instance of the '\" + (enumType.name || 'unknown') + \"' enumeration\"\r\n        });\r\n    }\r\n\r\n    isRequired(allowNull: boolean = false): Param {\r\n        return addContext(this, {\r\n            fn: isRequired,\r\n            allowNull: allowNull,\r\n            msg: \"is required\"\r\n        });\r\n    }\r\n\r\n    isOptional(): Param {\r\n        let context = {\r\n            fn: isOptional,\r\n            prevContext: <any>null,\r\n            msg: isOptionalMessage\r\n        };\r\n        return addContext(this, context);\r\n    }\r\n\r\n    isNonEmptyArray(): Param {\r\n        return this.isArray(true);\r\n    }\r\n\r\n    isArray(mustNotBeEmpty?: boolean): Param {\r\n        let context = {\r\n            fn: isArray,\r\n            mustNotBeEmpty: mustNotBeEmpty,\r\n            prevContext: <any>null,\r\n            msg: isArrayMessage\r\n        };\r\n        return addContext(this, context);\r\n    }\r\n\r\n    or() {\r\n        this._contexts.push(<any>null);\r\n        this._context = <any>null;\r\n        return this;\r\n    }\r\n\r\n    check(defaultValue?: any) {\r\n        let ok = exec(this);\r\n        if (ok === undefined) return;\r\n        if (!ok) {\r\n            throw new Error(this.getMessage());\r\n        }\r\n\r\n        if (this.v !== undefined) {\r\n            return this.v;\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /** @hidden @internal */\r\n    // called from outside this file.\r\n    _addContext(context: IParamContext) {\r\n        return addContext(this, context);\r\n    }\r\n\r\n    getMessage() {\r\n        let that = this;\r\n        let message = this._contexts.map(function (context) {\r\n            return getMessage(context, that.v);\r\n        }).join(\", or it \");\r\n        return core.formatString(this.MESSAGE_PREFIX, this.name) + \" \" + message;\r\n    }\r\n\r\n    withDefault(defaultValue: any) {\r\n        this.defaultValue = defaultValue;\r\n        return this;\r\n    }\r\n\r\n    whereParam(propName: string) {\r\n        return this.parent.whereParam(propName);\r\n    }\r\n\r\n    applyAll(instance: any, checkOnly: boolean = false) {\r\n        let parentTypeName = instance._$typeName;\r\n        let allowUnknownProperty = (parentTypeName && this.parent.config._$typeName === parentTypeName);\r\n\r\n        let clone = core.extend({}, this.parent.config);\r\n        this.parent.params.forEach(function (p) {\r\n            if (!allowUnknownProperty) delete clone[p.name];\r\n            try {\r\n                p.check();\r\n            } catch (e) {\r\n                throwConfigError(instance, e.message);\r\n            }\r\n            (!checkOnly) && p._applyOne(instance);\r\n        });\r\n        // should be no properties left in the clone\r\n        if (!allowUnknownProperty) {\r\n            for (let key in clone) {\r\n                // allow props with an undefined value\r\n                if (clone[key] !== undefined) {\r\n                    throwConfigError(instance, core.formatString(\"Unknown property: '%1'.\", key));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** @hidden @internal */\r\n    _applyOne = function (this: Param, instance: any) {\r\n        if (this.v !== undefined) {\r\n            instance[this.name] = this.v;\r\n        } else {\r\n            if (this.defaultValue !== undefined) {\r\n                instance[this.name] = this.defaultValue;\r\n            }\r\n        }\r\n    };\r\n\r\n    MESSAGE_PREFIX = \"The '%1' parameter \";\r\n\r\n}\r\n\r\n/** @hidden @internal */\r\nexport let assertParam = function (v: any, name: string) {\r\n    return new Param(v, name);\r\n};\r\n\r\nfunction isTypeOf(context: IParamContext, v: any) {\r\n    if (v == null) return false;\r\n    if (typeof (v) === context.typeName) return true;\r\n    return false;\r\n}\r\n\r\nfunction isNonEmptyString(context: IParamContext, v: any) {\r\n    if (v == null) return false;\r\n    return (typeof (v) === 'string') && v.length > 0;\r\n}\r\n\r\nfunction isInstanceOf(context: IParamContext, v: any) {\r\n    if (v == null || context.type == null) return false;\r\n    return (v instanceof context.type);\r\n}\r\n\r\nfunction isEnumOf(context: IParamContext, v: any) {\r\n    if (v == null || context.enumType == null ) return false;\r\n    return (context.enumType as any).contains(v);\r\n}\r\n\r\nfunction hasProperty(context: IParamContext, v: any) {\r\n    if (v == null || context.propertyName == null) return false;\r\n    return (v[context.propertyName] !== undefined);\r\n}\r\n\r\nfunction isRequired(context: IParamContext, v: any) {\r\n    if (context.allowNull) {\r\n        return v !== undefined;\r\n    } else {\r\n        return v != null;\r\n    }\r\n}\r\n\r\nfunction isOptional(context: IParamContext, v: any) {\r\n    if (v == null) return true;\r\n    let prevContext = context.prevContext;\r\n    if (prevContext && prevContext.fn) {\r\n        return prevContext.fn(prevContext, v);\r\n    } else {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction isOptionalMessage(context: IParamContext, v: any) {\r\n    let prevContext = context.prevContext;\r\n    let element = prevContext ? \" or it \" + getMessage(prevContext, v) : \"\";\r\n    return \"is optional\" + element;\r\n}\r\n\r\nfunction isArray(context: IParamContext, v: any) {\r\n    if (!Array.isArray(v)) {\r\n        return false;\r\n    }\r\n    if (context.mustNotBeEmpty) {\r\n        if (v.length === 0) return false;\r\n    }\r\n    // allow standalone is array call.\r\n    let prevContext = context.prevContext;\r\n    if (!prevContext) return true;\r\n\r\n    let pc = <any>prevContext;\r\n    return v.every(function (v1: any) {\r\n        return pc.fn && pc.fn(pc, v1);\r\n    });\r\n}\r\n\r\nfunction isArrayMessage(context: IParamContext, v: any) {\r\n    let arrayDescr = context.mustNotBeEmpty ? \"a nonEmpty array\" : \"an array\";\r\n    let prevContext = context.prevContext;\r\n    let element = prevContext ? \" where each element \" + getMessage(prevContext, v) : \"\";\r\n    return \" must be \" + arrayDescr + element;\r\n}\r\n\r\nfunction getMessage(context: IParamContext, v: any) {\r\n    let msg = context.msg;\r\n    if (typeof (msg) === \"function\") {\r\n        msg = (<any>msg)(context, v);\r\n    }\r\n    return msg;\r\n}\r\n\r\nfunction addContext(that: Param, context: IParamContext) {\r\n    if (that._context) {\r\n        let curContext = that._context;\r\n\r\n        while (curContext.prevContext != null) {\r\n            curContext = curContext.prevContext;\r\n        }\r\n\r\n        if (curContext.prevContext === null) {\r\n            curContext.prevContext = context;\r\n            // just update the prevContext but don't change the curContext.\r\n            return that;\r\n        } else if (context.prevContext == null) {\r\n            context.prevContext = that._context;\r\n        } else {\r\n            throw new Error(\"Illegal construction - use 'or' to combine checks\");\r\n        }\r\n    }\r\n    return setContext(that, context);\r\n}\r\n\r\nfunction setContext(that: Param, context: IParamContext) {\r\n    that._contexts[that._contexts.length - 1] = context;\r\n    that._context = context;\r\n    return that;\r\n}\r\n\r\n\r\nfunction exec(self: Param) {\r\n    // clear off last one if null\r\n    let contexts = self._contexts;\r\n    if (contexts[contexts.length - 1] == null) {\r\n        contexts.pop();\r\n    }\r\n    if (contexts.length === 0) {\r\n        return undefined;\r\n    }\r\n    return contexts.some(function (context: IParamContext) {\r\n        return context.fn ? context.fn(context, self.v) : false;\r\n    });\r\n}\r\n\r\nfunction throwConfigError(instance: any, message: string) {\r\n    throw new Error(core.formatString(\"Error configuring an instance of '%1'. %2\", (instance && instance._$typeName) || \"object\", message));\r\n}\r\n\r\nclass ConfigParam {\r\n    config: any;\r\n    params: Param[];\r\n    constructor(config: Object) {\r\n        if (typeof (config) !== \"object\") {\r\n            throw new Error(\"Configuration parameter should be an object, instead it is a: \" + typeof (config));\r\n        }\r\n        this.config = config;\r\n        this.params = [];\r\n    }\r\n\r\n    whereParam(propName: string) {\r\n        let param = new Param(this.config[propName], propName);\r\n        param.parent = this;\r\n        this.params.push(param);\r\n        return param;\r\n    }\r\n}\r\n\r\n/** @hidden @internal */\r\nexport let assertConfig = function (config: Object) {\r\n    return new ConfigParam(config) as IConfigParam;\r\n};\r\n\r\n\r\n// Param is exposed so that additional 'is' methods can be added to the prototype.\r\n(core as any).Param = Param;\r\n(core as any).assertParam = assertParam;\r\n(core as any).assertConfig = assertConfig;\r\n","import { core } from './core';\r\nimport { assertParam } from './assert-param';\r\n\r\nfunction publishCore<T>(that: BreezeEvent<T>, data: T, errorCallback?: (e: Error) => any) {\r\n  let subscribers = that._subscribers;\r\n  if (!subscribers) return true;\r\n  // subscribers from outer scope.\r\n  subscribers.forEach(function (s) {\r\n    try {\r\n      s.callback(data);\r\n    } catch (e) {\r\n      e.context = \"unable to publish on topic: \" + that.name;\r\n      if (errorCallback) {\r\n        errorCallback(e);\r\n      } else if (that._defaultErrorCallback) {\r\n        that._defaultErrorCallback(e);\r\n      } else {\r\n        fallbackErrorHandler(e);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction fallbackErrorHandler(e: Error) {\r\n  // TODO: maybe log this\r\n  // for now do nothing;\r\n}\r\n\r\n\r\n/** @hidden @internal */\r\nexport interface Subscription {\r\n  unsubKey: number;\r\n  callback: (data: any) => any;\r\n}\r\n\r\n/**\r\nClass to support basic event publication and subscription semantics.\r\n@dynamic\r\n**/\r\nexport class BreezeEvent<T> {\r\n  /** @hidden @internal */\r\n  static __eventNameMap = {};\r\n  /** @hidden @internal */\r\n  static __nextUnsubKey = 1;\r\n  /** The name of this Event */\r\n  name: string;\r\n  /** The object doing the publication. i.e. the object to which this event is attached. */\r\n  publisher: Object;\r\n\r\n  /** @hidden @internal */\r\n  _subscribers: Subscription[];\r\n  /** @hidden @internal */\r\n  _defaultErrorCallback: (e: Error) => any;\r\n\r\n\r\n  /**\r\n  Constructor for an Event\r\n  >     salaryEvent = new BreezeEvent(\"salaryEvent\", person);\r\n  @param name - The name of the event.\r\n  @param publisher - The object that will be doing the publication. i.e. the object to which this event is attached.\r\n  @param defaultErrorCallback - Function to call when an error occurs during subscription execution. \r\n  If omitted then subscriber notification failures will be ignored.\r\n  **/\r\n  constructor(name: string, publisher: Object, defaultErrorCallback?: (e: Error) => any) {\r\n    assertParam(name, \"eventName\").isNonEmptyString().check();\r\n    assertParam(publisher, \"publisher\").isObject().check();\r\n\r\n    this.name = name;\r\n    // register the name\r\n    BreezeEvent.__eventNameMap[name] = true;\r\n    this.publisher = publisher;\r\n    if (defaultErrorCallback) {\r\n      this._defaultErrorCallback = defaultErrorCallback;\r\n    }\r\n  }\r\n\r\n  /**\r\n  Publish data for this event.\r\n  >      // Assume 'salaryEvent' is previously constructed Event\r\n  >      salaryEvent.publish( { eventType: \"payRaise\", amount: 100 });\r\n\r\n  This event can also be published asychronously\r\n  >      salaryEvent.publish( { eventType: \"payRaise\", amount: 100 }, true);\r\n\r\n  And we can add a handler in case the subscriber 'mishandles' the event.\r\n  >      salaryEvent.publish( { eventType: \"payRaise\", amount: 100 }, true, function(error) {\r\n  >          // do something with the 'error' object\r\n  >      });\r\n  @param data - Data to publish\r\n  @param publishAsync - (default=false) Whether to publish asynchonously or not.\r\n  @param errorCallback - Function to be called for any errors that occur during publication. If omitted,\r\n  errors will be eaten.\r\n  @return false if event is disabled; true otherwise.\r\n  **/\r\n  publish(data: T, publishAsync: boolean = false, errorCallback?: (e: Error) => any) {\r\n\r\n    if (!BreezeEvent._isEnabled(this.name, this.publisher)) return false;\r\n\r\n    if (publishAsync === true) {\r\n      setTimeout(publishCore, 0, this, data, errorCallback);\r\n    } else {\r\n      publishCore(this, data, errorCallback);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  Publish data for this event asynchronously.\r\n  >      // Assume 'salaryEvent' is previously constructed Event\r\n  >      salaryEvent.publishAsync( { eventType: \"payRaise\", amount: 100 });\r\n\r\n  And we can add a handler in case the subscriber 'mishandles' the event.\r\n  >      salaryEvent.publishAsync( { eventType: \"payRaise\", amount: 100 }, function(error) {\r\n  >          // do something with the 'error' object\r\n  >      });\r\n  @param data - Data to publish\r\n  @param errorCallback - Function to be called for any errors that occur during publication. If omitted,\r\n  errors will be eaten.\r\n  **/\r\n  publishAsync(data: T, errorCallback: (e: Error) => any) {\r\n    this.publish(data, true, errorCallback);\r\n  }\r\n\r\n  /**\r\n  Subscribe to this event.\r\n  >      // Assume 'salaryEvent' is previously constructed Event\r\n  >      salaryEvent.subscribe(function (eventArgs) {\r\n  >          if (eventArgs.eventType === \"payRaise\") {\r\n  >              // do something\r\n  >          }\r\n  >      });\r\n\r\n  There are several built in Breeze events, such as [[EntityAspect.propertyChanged]], [[EntityAspect.validationErrorsChanged]] as well.\r\n  >      // Assume order is a preexisting 'order' entity\r\n  >      order.entityAspect.propertyChanged.subscribe(function (pcEvent) {\r\n  >          if ( pcEvent.propertyName === \"OrderDate\") {\r\n  >              // do something\r\n  >          }\r\n  >      });\r\n  @param callback- Function to be called whenever 'data' is published for this event.\r\n  @param callback.data - {Object} Whatever 'data' was published.  This should be documented on the specific event.\r\n  @return This is a key for 'unsubscription'.  It can be passed to the 'unsubscribe' method.\r\n  **/\r\n  subscribe(callback: (data: T) => any) {\r\n    if (!this._subscribers) {\r\n      this._subscribers = [];\r\n    }\r\n\r\n    let unsubKey = BreezeEvent.__nextUnsubKey;\r\n    this._subscribers.push({ unsubKey: unsubKey, callback: callback });\r\n    ++BreezeEvent.__nextUnsubKey;\r\n    return unsubKey;\r\n  }\r\n\r\n  /**\r\n  Unsubscribe from this event.\r\n  >      // Assume order is a preexisting 'order' entity\r\n  >      let token = order.entityAspect.propertyChanged.subscribe(function (pcEvent) {\r\n  >              // do something\r\n  >      });\r\n  >      // sometime later\r\n  >      order.entityAspect.propertyChanged.unsubscribe(token);\r\n  @param unsubKey - The value returned from the 'subscribe' method may be used to unsubscribe here.\r\n  @return Whether unsubscription occured. This will return false if already unsubscribed or if the key simply\r\n  cannot be found.\r\n  **/\r\n  unsubscribe = function (unsubKey: number) {\r\n    if (!this._subscribers) return false;\r\n    let subs = this._subscribers;\r\n    let ix = core.arrayIndexOf(subs, function (s) {\r\n      return s.unsubKey === unsubKey;\r\n    });\r\n    if (ix !== -1) {\r\n      subs.splice(ix, 1);\r\n      if (subs.length === 0) {\r\n        this._subscribers = null;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /** remove all subscribers */\r\n  clear() {\r\n    this._subscribers = <any>null;\r\n  }\r\n\r\n  /** event bubbling - document later. */\r\n\r\n  // null or undefined 'getParentFn' means Event does not need to bubble i.e. that it is always enabled - .\r\n  static bubbleEvent(target: any, getParentFn?: (() => any)) {\r\n    target._getEventParent = getParentFn || null;\r\n  }\r\n\r\n  /**\r\n  Enables or disables the named event for an object and all of its children.\r\n  >      BreezeEvent.enable(“propertyChanged”, myEntityManager, false)\r\n\r\n  will disable all EntityAspect.propertyChanged events within a EntityManager.\r\n  >      BreezeEvent.enable(“propertyChanged”, myEntityManager, true)\r\n\r\n  will enable all EntityAspect.propertyChanged events within a EntityManager.\r\n  >      BreezeEvent.enable(“propertyChanged”, myEntity.entityAspect, false)\r\n\r\n  will disable EntityAspect.propertyChanged events for a specific entity.\r\n  >      BreezeEvent.enable(“propertyChanged”, myEntity.entityAspect, null)\r\n\r\n  will removes any enabling / disabling at the entity aspect level so now any 'Event.enable' calls at the EntityManager level,\r\n  made either previously or in the future, will control notification.\r\n  >      BreezeEvent.enable(“validationErrorsChanged”, myEntityManager, function(em) {\r\n  >          return em.customTag === “blue”;\r\n  >      })\r\n\r\n\r\n  will either enable or disable myEntityManager based on the current value of a ‘customTag’ property on myEntityManager.\r\n  Note that this is dynamic, changing the customTag value will cause events to be enabled or disabled immediately.\r\n  @param eventName - The name of the event.\r\n  @param target - The object at which enabling or disabling will occur.  All event notifications that occur to this object or\r\n  children of this object will be enabled or disabled.\r\n  @param isEnabled - A boolean, a null or a function that returns either a boolean or a null.\r\n  **/\r\n static enable(eventName: string, obj: Object, isEnabled: boolean | ((x: any) => boolean)) {\r\n    assertParam(eventName, \"eventName\").isNonEmptyString().check();\r\n    assertParam(obj, \"obj\").isObject().check();\r\n    assertParam(isEnabled, \"isEnabled\").isBoolean().isOptional().or().isFunction().check();\r\n    let ob = <any>obj;\r\n    if (!ob._$eventMap) {\r\n      ob._$eventMap = {};\r\n    }\r\n    ob._$eventMap[eventName] = isEnabled;\r\n  }\r\n\r\n  /**\r\n  Returns whether for a specific event and a specific object and its children, notification is enabled or disabled or not set.\r\n  >      BreezeEvent.isEnabled(“propertyChanged”, myEntityManager)\r\n  > \r\n  @param eventName - The name of the event.\r\n  @param target - The object for which we want to know if notifications are enabled.\r\n  @return A null is returned if this value has not been set.\r\n  **/\r\n  static isEnabled(eventName: string, obj: Object) {\r\n    assertParam(eventName, \"eventName\").isNonEmptyString().check();\r\n    assertParam(obj, \"obj\").isObject().check();\r\n    // null is ok - it just means that the object is at the top level.\r\n    if ((<any>obj)._getEventParent === undefined) {\r\n      throw new Error(\"This object does not support event enabling/disabling\");\r\n    }\r\n    // return ctor._isEnabled(getFullEventName(eventName), obj);\r\n    return BreezeEvent._isEnabled(eventName, 3);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  static _isEnabled = function (eventName: string, obj: Object) {\r\n    let isEnabled: any = null;\r\n    let ob = <any>obj;\r\n    let eventMap = ob._$eventMap;\r\n    if (eventMap) {\r\n      isEnabled = eventMap[eventName];\r\n    }\r\n    if (isEnabled != null) {\r\n      if (typeof isEnabled === 'function') {\r\n        return !!isEnabled(obj);\r\n      } else {\r\n        return !!isEnabled;\r\n      }\r\n    } else {\r\n      let parent = ob._getEventParent && ob._getEventParent();\r\n      if (parent) {\r\n        return !!this._isEnabled(eventName, parent);\r\n      } else {\r\n        // default if not explicitly disabled.\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n}\r\n\r\n// legacy support - deliberately not typed\r\n(core as any).Event = BreezeEvent;","import { core } from './core';\r\nimport { assertParam  } from './assert-param';\r\nimport { BreezeEvent } from './event';\r\n\r\n/** @hidden */\r\nexport interface AdapterCtor<T extends BaseAdapter> { new (...args: any[]): T; }\r\n/** @hidden */\r\nexport interface IDef<T extends BaseAdapter> { ctor: AdapterCtor<T>; defaultInstance?: T; }\r\n\r\nexport type AdapterType = 'dataService'|'modelLibrary'|'ajax'|'uriBuilder';\r\n\r\nexport class InterfaceDef<T extends BaseAdapter> {\r\n\r\n    name: string;\r\n    defaultInstance?: T;\r\n    /** @hidden @internal */\r\n    _implMap: { [name: string]: IDef<T> };\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.defaultInstance = undefined;\r\n        this._implMap = {};\r\n    }\r\n\r\n    /** Define an implementation of the given adaptername */\r\n    registerCtor(adapterName: string, ctor: AdapterCtor<T>): void {\r\n        this._implMap[adapterName.toLowerCase()] = { ctor: ctor, defaultInstance: undefined };\r\n    }\r\n\r\n    /** Return the definition for the given adapterName */\r\n    getImpl(adapterName: string): IDef<T> {\r\n        return this._implMap[adapterName.toLowerCase()];\r\n    }\r\n\r\n    /** Return the first implementation for this InterfaceDef */\r\n    getFirstImpl(): IDef<T> {\r\n        let kv = core.objectFirst(this._implMap, function () {\r\n            return true;\r\n        });\r\n        return kv ? kv.value : null;\r\n    }\r\n\r\n    getDefaultInstance() {\r\n        return this.defaultInstance as T;\r\n    }\r\n}\r\n\r\nexport interface BaseAdapter {\r\n    /** @hidden @internal */\r\n    _$impl?: any;\r\n    name: string;\r\n    initialize(): void;\r\n    checkForRecomposition?: (context: any) => void;\r\n}\r\n\r\nexport class BreezeConfig {\r\n    functionRegistry = {};\r\n    typeRegistry = {};\r\n    objectRegistry = {};\r\n    interfaceInitialized: BreezeEvent<{ interfaceName: string, instance: BaseAdapter, isDefault: boolean }>;\r\n\r\n    stringifyPad = '';\r\n    /** whether to prohibit eval() and Function() in breeze code */\r\n    noEval: boolean;\r\n    /** @hidden @internal */\r\n    _interfaceRegistry: any;  // will be set in adapter-interfaces. untyped here to avoid circularity issues.\r\n\r\n    constructor() {\r\n        this.interfaceInitialized = new BreezeEvent(\"interfaceInitialized\", this);\r\n        if (this.noEval === undefined) {\r\n            try {\r\n                Error['x'] = Function('');\r\n                this.noEval = false; // eval succeeded\r\n            } catch {\r\n                this.noEval = true; // eval failed, probably due to CSP\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n    Method use to register implementations of standard breeze interfaces.  Calls to this method are usually\r\n    made as the last step within an adapter implementation.\r\n    @method registerAdapter\r\n    @param interfaceName {String} - one of the following interface names: \"ajax\", \"dataService\", \"modelLibrary\", \"uriBuilder\"\r\n    @param adapterCtor {Function} - an ctor function that returns an instance of the specified interface.\r\n    **/\r\n    registerAdapter<T extends BaseAdapter>(interfaceName: AdapterType, adapterCtor: AdapterCtor<T>) {\r\n        assertParam(interfaceName, \"interfaceName\").isNonEmptyString().check();\r\n        assertParam(adapterCtor, \"adapterCtor\").isFunction().check();\r\n        // this impl will be thrown away after the name is retrieved.\r\n        let impl = new adapterCtor();\r\n        let implName = impl.name;\r\n        if (!implName) {\r\n            throw new Error(\"Unable to locate a 'name' property on the constructor passed into the 'registerAdapter' call.\");\r\n        }\r\n        let idef = this.getInterfaceDef(interfaceName);\r\n        idef.registerCtor(implName, adapterCtor);\r\n    }\r\n\r\n    /**\r\n    Returns the ctor function used to implement a specific interface with a specific adapter name.\r\n    @method getAdapter\r\n    @param interfaceName {String} One of the following interface names: \"ajax\", \"dataService\", \"modelLibrary\", \"uriBuilder\"\r\n    @param [adapterName] {String} The name of any previously registered adapter. If this parameter is omitted then\r\n    this method returns the \"default\" adapter for this interface. If there is no default adapter, then a null is returned.\r\n    @return {Function|null} Returns either a ctor function or null.\r\n    **/\r\n    getAdapter(interfaceName: AdapterType, adapterName: string) {\r\n        let idef = this.getInterfaceDef(interfaceName);\r\n        if (adapterName) {\r\n            let impl = idef.getImpl(adapterName);\r\n            return impl ? impl.ctor : null;\r\n        } else {\r\n            return idef.defaultInstance ? idef.defaultInstance._$impl.ctor : null;\r\n        }\r\n    }\r\n\r\n    /**\r\n    Initializes a single adapter implementation. Initialization means either newing a instance of the\r\n    specified interface and then calling \"initialize\" on it or simply calling \"initialize\" on the instance\r\n    if it already exists.\r\n    @method initializeAdapterInstance\r\n    @param interfaceName {String} The name of the interface to which the adapter to initialize belongs.\r\n    @param adapterName {String} - The name of a previously registered adapter to initialize.\r\n    @param [isDefault=true] {Boolean} - Whether to make this the default \"adapter\" for this interface.\r\n    @return {an instance of the specified adapter}\r\n    **/\r\n    initializeAdapterInstance(interfaceName: AdapterType, adapterName: string, isDefault: boolean = true) {\r\n        isDefault = isDefault === undefined ? true : isDefault;\r\n        assertParam(interfaceName, \"interfaceName\").isNonEmptyString().check();\r\n        assertParam(adapterName, \"adapterName\").isNonEmptyString().check();\r\n        assertParam(isDefault, \"isDefault\").isBoolean().check();\r\n\r\n        let idef = this.getInterfaceDef(interfaceName);\r\n        let impl = idef.getImpl(adapterName);\r\n        if (!impl) {\r\n            throw new Error(\"Unregistered adapter.  Interface: \" + interfaceName + \" AdapterName: \" + adapterName);\r\n        }\r\n\r\n        return this._initializeAdapterInstanceCore(idef, impl, isDefault);\r\n    }\r\n\r\n    /**\r\n    Returns the adapter instance corresponding to the specified interface and adapter names.\r\n    @method getAdapterInstance\r\n    @param interfaceName {String} The name of the interface.\r\n    @param [adapterName] {String} - The name of a previously registered adapter.  If this parameter is\r\n    omitted then the default implementation of the specified interface is returned. If there is\r\n    no defaultInstance of this interface, then the first registered instance of this interface is returned.\r\n    @return {an instance of the specified adapter}\r\n    @internal\r\n    **/\r\n    getAdapterInstance<T extends BaseAdapter>(interfaceName: AdapterType, adapterName?: string) {\r\n        let idef = this.getInterfaceDef<T>(interfaceName);\r\n        let impl: IDef<T>;\r\n\r\n        let isDefault = adapterName == null || adapterName === \"\";\r\n        if (isDefault) {\r\n            if (idef.defaultInstance) return idef.defaultInstance;\r\n            impl = idef.getFirstImpl();\r\n        } else {\r\n            impl = idef.getImpl(adapterName!);\r\n        }\r\n        if (!impl) return undefined;\r\n        if (impl.defaultInstance) {\r\n            return impl.defaultInstance;\r\n        } else {\r\n            return this._initializeAdapterInstanceCore(idef, impl, isDefault);\r\n        }\r\n    }\r\n\r\n    /** this is needed for reflection purposes when deserializing an object that needs a fn or ctor.\r\n        Used to register validators. */\r\n    registerFunction(fn: Function, fnName: string) {\r\n        assertParam(fn, \"fn\").isFunction().check();\r\n        assertParam(fnName, \"fnName\").isString().check();\r\n        if (fn.prototype) {\r\n            fn.prototype._$fnName = fnName;\r\n        }\r\n        this.functionRegistry[fnName] = fn;\r\n    }\r\n\r\n    registerType(ctor: Function, typeName: string) {\r\n        assertParam(ctor, \"ctor\").isFunction().check();\r\n        assertParam(typeName, \"typeName\").isString().check();\r\n        if (ctor.prototype) {\r\n            ctor.prototype._$typeName = typeName;\r\n        }\r\n        this.typeRegistry[typeName] = ctor;\r\n    }\r\n\r\n    getRegisteredFunction(fnName: string) {\r\n        return this.functionRegistry[fnName];\r\n    }\r\n\r\n    getInterfaceDef<T extends BaseAdapter>(interfaceName: string) {\r\n        let lcName = interfaceName.toLowerCase();\r\n        // source may be null\r\n        let kv = core.objectFirst(this._interfaceRegistry || {}, function (k, v) {\r\n            return k.toLowerCase() === lcName;\r\n        });\r\n        if (!kv) {\r\n            throw new Error(\"Unknown interface name: \" + interfaceName);\r\n        }\r\n        return <InterfaceDef<T>>kv.value;\r\n    }\r\n\r\n    /** @deprecated @internal no-op kept for backward compatibility */\r\n    setQ(q: any) {\r\n        console && console.warn(\"setQ does nothing; ES6 Promise support is required - use a shim if necessary.\");\r\n    }\r\n\r\n    /** @hidden @internal */\r\n    _storeObject(obj: Object, type: string | Function, name: string) {\r\n        // uncomment this if we make this public.\r\n        //assertParam(obj, \"obj\").isObject().check();\r\n        //assertParam(name, \"objName\").isString().check();\r\n        let key = (typeof (type) === \"string\" ? type : type.prototype._$typeName) + \".\" + name;\r\n        this.objectRegistry[key] = obj;\r\n    }\r\n\r\n    /** @hidden @internal */\r\n    _fetchObject(type: string | Function, name: string) {\r\n        if (!name) return undefined;\r\n        let key = (typeof (type) === \"string\" ? type : type.prototype._$typeName) + \".\" + name;\r\n        let result = this.objectRegistry[key];\r\n        if (!result) {\r\n            throw new Error(\"Unable to locate a registered object by the name: \" + key);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /** @hidden @internal */\r\n    _initializeAdapterInstanceCore<T extends BaseAdapter>(interfaceDef: InterfaceDef<T>, impl: IDef<T>, isDefault: boolean) {\r\n        let instance: T;\r\n        let inst = impl.defaultInstance;\r\n        if (!inst) {\r\n            instance = new (impl.ctor)();\r\n            impl.defaultInstance = instance;\r\n            instance._$impl = impl;\r\n        } else {\r\n            instance = inst;\r\n        }\r\n\r\n        instance.initialize();\r\n\r\n        if (isDefault) {\r\n            // next line needs to occur before any recomposition\r\n            interfaceDef.defaultInstance = instance;\r\n        }\r\n\r\n        // recomposition of other impls will occur here.\r\n        this.interfaceInitialized.publish({ interfaceName: interfaceDef.name, instance: instance, isDefault: true });\r\n\r\n        if (instance.checkForRecomposition != null) {\r\n            // now register for own dependencies.\r\n            this.interfaceInitialized.subscribe((interfaceInitializedArgs) => {\r\n                // TODO: why '!'s needed here for typescript to compile correctly???\r\n                instance.checkForRecomposition!(interfaceInitializedArgs);\r\n            });\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n}\r\n\r\nexport const config = new BreezeConfig();\r\n\r\n// legacy\r\n(core as any).config = config;\r\n\r\n\r\n\r\n","import { EntityType, NavigationProperty } from './entity-metadata';\r\nimport { DataServiceAdapter, UriBuilderAdapter } from './interface-registry';\r\nimport { KeyMapping } from './entity-manager';\r\nimport { MappingContext } from './mapping-context';\r\nimport { assertConfig } from './assert-param';\r\nimport { config } from './config';\r\nimport { core } from './core';\r\n\r\n/** Configuration info to be passed to the [[DataService]] constructor */\r\nexport interface DataServiceConfig {\r\n  /** The serviceName for this DataService.  **/\r\n  serviceName?: string;\r\n  /** The adapter name for the [[IDataServiceAdapter]] to be used with this service.  **/\r\n  adapterName?: string;\r\n  /** The adapter name for the [[IUriBuilderAdapter]] to be used with this service.  **/\r\n  uriBuilderName?: string;\r\n  /** Whether the server can provide metadata for this service.  **/\r\n  hasServerMetadata?: boolean;\r\n  /** The [[JsonResultsAdapter]] used to process the results of any query against this DataService.  **/\r\n  jsonResultsAdapter?: JsonResultsAdapter;\r\n  /** Whether to use JSONP when performing a 'GET' request against this service.  **/\r\n  useJsonp?: boolean;\r\n}\r\n/**\r\nA DataService instance is used to encapsulate the details of a single 'service'; this includes a serviceName, a dataService adapterInstance,\r\nand whether the service has server side metadata.\r\n\r\nYou can construct an EntityManager with either a serviceName or a DataService instance, if you use a serviceName then a DataService\r\nis constructed for you.  (It can also be set via the EntityManager.setProperties method).\r\n\r\nThe same applies to the MetadataStore.fetchMetadata method, i.e. it takes either a serviceName or a DataService instance.\r\n\r\nEach metadataStore contains a list of DataServices, each accessible via its ‘serviceName’.\r\n( see MetadataStore.getDataService and MetadataStore.addDataService).  The ‘addDataService’ method is called internally\r\nanytime a MetadataStore.fetchMetadata call occurs with a new dataService ( or service name).\r\n\r\n**/\r\nexport class DataService {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // actually put on prototype.\r\n  /** The serviceName for this DataService. __Read Only__ **/\r\n  serviceName: string;\r\n  /** The adapter name for the [[IDataServiceAdapter]] to be used with this service. __Read Only__  **/\r\n  adapterName: string;\r\n  /**  The [[IDataServiceAdapter]] implementation instance associated with this EntityManager. __Read Only__  **/\r\n  adapterInstance?: DataServiceAdapter;\r\n  /** The adapter name for the [[IUriBuilderAdapter]] to be used with this service. __Read Only__  **/\r\n  uriBuilderName: string;\r\n  /**  The [[IUriBuilderAdapter]] implementation instance associated with this EntityManager. __Read Only__  **/\r\n  uriBuilder?: UriBuilderAdapter;\r\n  /** Whether the server can provide metadata for this service. __Read Only__   **/\r\n  hasServerMetadata: boolean;\r\n  /** The [[JsonResultsAdapter]] used to process the results of any query against this DataService. __Read Only__ **/\r\n  jsonResultsAdapter: JsonResultsAdapter;\r\n  /** Whether to use JSONP when performing a 'GET' request against this service. __Read Only__  **/\r\n  useJsonp: boolean;\r\n\r\n  /**   DataService constructor\r\n  >     var dataService = new DataService({\r\n  >         serviceName: altServiceName,\r\n  >         hasServerMetadata: false\r\n  >     });\r\n\r\n  >     var metadataStore = new MetadataStore({\r\n  >         namingConvention: NamingConvention.camelCase\r\n  >     });\r\n\r\n  >     return new EntityManager({\r\n  >         dataService: dataService,\r\n  >         metadataStore: metadataStore\r\n  >     });\r\n  @param config - A configuration object.\r\n  **/\r\n  constructor(config?: DataServiceConfig) {\r\n    updateWithConfig(this, config);\r\n  }\r\n\r\n\r\n  /**\r\n  Returns a copy of this DataService with the specified properties applied.\r\n  @param config - The configuration object to apply to create a new DataService.\r\n  **/\r\n  using(config: DataServiceConfig) {\r\n    if (!config) return this;\r\n    let result = new DataService(this);\r\n    return updateWithConfig(result, config);\r\n  }\r\n\r\n  static resolve(dataServices: DataService[]) {\r\n    // final defaults\r\n    // Deliberate use of 'as any' below.\r\n    (dataServices as any).push({\r\n      hasServerMetadata: true,\r\n      useJsonp: false\r\n    });\r\n    let ds = new DataService(core.resolveProperties(dataServices,\r\n        [\"serviceName\", \"adapterName\", \"uriBuilderName\", \"hasServerMetadata\", \"jsonResultsAdapter\", \"useJsonp\"]));\r\n\r\n    if (!ds.serviceName) {\r\n      throw new Error(\"Unable to resolve a 'serviceName' for this dataService\");\r\n    }\r\n    ds.adapterInstance = ds.adapterInstance || config.getAdapterInstance<DataServiceAdapter>(\"dataService\", ds.adapterName);\r\n    ds.jsonResultsAdapter = ds.jsonResultsAdapter || ds.adapterInstance!.jsonResultsAdapter;\r\n    ds.uriBuilder = ds.uriBuilder || config.getAdapterInstance<UriBuilderAdapter>(\"uriBuilder\", ds.uriBuilderName);\r\n    return ds;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  static _normalizeServiceName(serviceName: string) {\r\n    serviceName = serviceName.trim();\r\n    if (serviceName.substr(-1) !== \"/\") {\r\n      return serviceName + '/';\r\n    } else {\r\n      return serviceName;\r\n    }\r\n  }\r\n\r\n  /**  */\r\n  toJSON() {\r\n    // don't use default value here - because we want to be able to distinguish undefined props for inheritence purposes.\r\n    return core.toJson(this, {\r\n      serviceName: null,\r\n      adapterName: null,\r\n      uriBuilderName: null,\r\n      hasServerMetadata: null,\r\n      jsonResultsAdapter: function (v: any) {\r\n        return v && v.name;\r\n      },\r\n      useJsonp: null\r\n    });\r\n  }\r\n\r\n  static fromJSON(json: any) {\r\n    json.jsonResultsAdapter = config._fetchObject(JsonResultsAdapter, json.jsonResultsAdapter);\r\n    return new DataService(json);\r\n  }\r\n\r\n  /**\r\n   Returns a url for this dataService with the specified suffix. This method handles dataService names either\r\n   with or without trailing '/'s.  If the suffix starts with \"http\" then it will be returned as-is.\r\n   @method qualifyUrl\r\n   @param suffix {String} The resulting url.\r\n   @return {a Url string}\r\n   **/\r\n  qualifyUrl(suffix: string) {\r\n    if (suffix && suffix.startsWith(\"http\")) {\r\n      return suffix;\r\n    }\r\n    let url = this.serviceName;\r\n    // remove any trailing \"/\"\r\n    if (core.stringEndsWith(url, \"/\")) {\r\n      url = url.substr(0, url.length - 1);\r\n    }\r\n    // ensure that it ends with \"/\" + suffix\r\n    suffix = \"/\" + suffix;\r\n    if (!core.stringEndsWith(url, suffix)) {\r\n      url = url + suffix;\r\n    }\r\n    return url;\r\n  }\r\n\r\n}\r\nDataService.prototype._$typeName = \"DataService\";\r\n\r\nfunction updateWithConfig(obj: DataService, dsConfig?: DataServiceConfig) {\r\n  if (dsConfig) {\r\n    assertConfig(dsConfig)\r\n        .whereParam(\"serviceName\").isOptional()\r\n        .whereParam(\"adapterName\").isString().isOptional()\r\n        .whereParam(\"uriBuilderName\").isString().isOptional()\r\n        .whereParam(\"hasServerMetadata\").isBoolean().isOptional()\r\n        .whereParam(\"jsonResultsAdapter\").isInstanceOf(JsonResultsAdapter).isOptional()\r\n        .whereParam(\"useJsonp\").isBoolean().isOptional()\r\n        .applyAll(obj);\r\n    obj.serviceName = obj.serviceName && DataService._normalizeServiceName(obj.serviceName);\r\n    obj.adapterInstance = obj.adapterName ?  config.getAdapterInstance<DataServiceAdapter>(\"dataService\", obj.adapterName) : undefined;\r\n    obj.uriBuilder = obj.uriBuilderName ? config.getAdapterInstance<UriBuilderAdapter>(\"uriBuilder\", obj.uriBuilderName) : undefined;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport interface NodeMeta {\r\n  entityType?: EntityType;\r\n  nodeId?: string;\r\n  nodeRefId?: string;\r\n  ignore?: boolean;\r\n  passThru?: boolean;\r\n  extraMetadata?: any;\r\n}\r\n\r\nexport interface NodeContext {\r\n  nodeType: string;\r\n  propertyName?: string;\r\n  navigationProperty?: NavigationProperty;\r\n}\r\n\r\n/** Configuration info to be passed to the [[JsonResultsAdapter]] constructor */\r\nexport interface JsonResultsAdapterConfig {\r\n  /** The name of this adapter.  This name is used to uniquely identify and locate this instance when an 'exported' JsonResultsAdapter is later imported. */\r\n  name: string;\r\n  /** A Function that is called once per query operation to extract the 'payload' from any json received over the wire. \r\n  This method has a default implementation which to simply return the \"results\" property from any json returned as a result of executing the query. \r\n  */\r\n  extractResults?: Function;\r\n  /** A function that is called once per save operation to extract the entities from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which simply returns the \"entities\" property from any json returned as a result of executing the save. */\r\n  extractSaveResults?: Function;\r\n  /** A function that is called once per save operation to extract the key mappings from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which simply returns the \"keyMappings\" property from any json returned as a result of executing the save. */\r\n  extractKeyMappings?: (data: {}) => KeyMapping[];\r\n  /** A function that is called once per save operation to extract any deleted keys from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which simply returns an empty array. */\r\n  extractDeletedKeys?: (data: {}) => any[]; // TODO: refine\r\n  /** A visitor method that will be called on each node of the returned payload. */\r\n  visitNode?: (v: any, mc?: MappingContext, nodeContext?: NodeContext) => NodeMeta;\r\n\r\n}\r\n\r\n/**\r\nA JsonResultsAdapter instance is used to provide custom extraction and parsing logic on the json results returned by any web service.\r\nThis facility makes it possible for breeze to talk to virtually any web service and return objects that will be first class 'breeze' citizens.\r\n**/\r\nexport class JsonResultsAdapter {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // actually put on prototype.\r\n  /** The name of this adapter.  This name is used to uniquely identify and locate this instance when an 'exported' JsonResultsAdapter is later imported. */\r\n  name: string;\r\n  /** A Function that is called once per query operation to extract the 'payload' from any json received over the wire. \r\n  This method has a default implementation which simply returns the \"results\" property from any json returned as a result of executing the query. */\r\n  extractResults: Function; // TODO - refine\r\n  /** A function that is called once per save operation to extract the entities from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which simply returns the \"entities\" property from any json returned as a result of executing the save. */\r\n  extractSaveResults: Function;\r\n    /** A function that is called once per save operation to extract the key mappings from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which simply returns the \"keyMappings\" property from any json returned as a result of executing the save. */\r\n  extractKeyMappings:  (data: {}) => KeyMapping[];\r\n  /** A function that is called once per save operation to extract any deleted keys from any json received over the wire.  Must return an array.\r\n  This method has a default implementation which is to simply returns the \"deletedKeys\" property from any json returned as a result of executing the save. */\r\n  extractDeletedKeys?: (data: {}) => any[]; // TODO: refine\r\n  /** A visitor method that will be called on each node of the returned payload. */\r\n  visitNode: Function;\r\n\r\n  /**\r\n  JsonResultsAdapter constructor\r\n\r\n  @example\r\n      //\r\n      var jsonResultsAdapter = new JsonResultsAdapter({\r\n          name: \"test1e\",\r\n          extractResults: function(json) {\r\n              return json.results;\r\n          },\r\n          visitNode: function(node, mappingContext, nodeContext) {\r\n              var entityType = normalizeTypeName(node.$type);\r\n              var propertyName = nodeContext.propertyName;\r\n              var ignore = propertyName && propertyName.substr(0, 1) === \"$\";\r\n\r\n              return {\r\n                  entityType: entityType,\r\n                  nodeId: node.$id,\r\n                  nodeRefId: node.$ref,\r\n                  ignore: ignore,\r\n                  passThru: false // default\r\n              };\r\n          }\r\n      });\r\n\r\n      var dataService = new DataService( {\r\n              serviceName: \"breeze/foo\",\r\n              jsonResultsAdapter: jsonResultsAdapter\r\n      });\r\n\r\n      var entityManager = new EntityManager( {\r\n          dataService: dataService\r\n      });\r\n\r\n  @param config - A configuration object.\r\n\r\n  **/\r\n  constructor(jsConfig: JsonResultsAdapterConfig) {\r\n    if (arguments.length !== 1) {\r\n      throw new Error(\"The JsonResultsAdapter ctor should be called with a single argument that is a configuration object.\");\r\n    }\r\n\r\n    assertConfig(jsConfig)\r\n        .whereParam(\"name\").isNonEmptyString()\r\n        .whereParam(\"extractResults\").isFunction().isOptional().withDefault(extractResultsDefault)\r\n        .whereParam(\"extractSaveResults\").isFunction().isOptional().withDefault(extractSaveResultsDefault)\r\n        .whereParam(\"extractKeyMappings\").isFunction().isOptional().withDefault(extractKeyMappingsDefault)\r\n        .whereParam(\"extractDeletedKeys\").isFunction().isOptional().withDefault(extractDeletedKeysDefault)\r\n        .whereParam(\"visitNode\").isFunction()\r\n        .applyAll(this);\r\n    config._storeObject(this, \"JsonResultsAdapter\", this.name);\r\n  }\r\n\r\n}\r\nJsonResultsAdapter.prototype._$typeName = \"JsonResultsAdapter\";\r\n\r\nfunction extractResultsDefault(data: any) {\r\n  return data.results;\r\n}\r\n\r\nfunction extractSaveResultsDefault(data: any) {\r\n  return data.entities || data.Entities || [];\r\n}\r\n\r\nfunction extractKeyMappingsDefault(data: any) {\r\n  return data.keyMappings || data.KeyMappings || [];\r\n}\r\n\r\nfunction extractDeletedKeysDefault(data: any) {\r\n  return data.deletedKeys || data.DeletedKeys || [];\r\n}\r\n\r\n","import { core } from './core';\r\nimport { assertParam } from './assert-param';\r\nimport { config } from './config';\r\n\r\nexport const INT16_MIN = -32768;\r\nexport const INT16_MAX = 32767;\r\n\r\nexport const INT32_MIN = -2147483648;\r\nexport const INT32_MAX = 2147483647;\r\n\r\nexport const BYTE_MIN = 0;\r\nexport const BYTE_MAX = 255;\r\n\r\nexport interface ValidationContext {\r\n  property?: any;\r\n  propertyName?: string;\r\n  value?: any;\r\n}\r\n\r\nexport interface ValidationFn {\r\n    (value: any, context?: any): boolean;\r\n}\r\n\r\n// add common props and methods for every validator 'context' here.\r\nlet rootContext = {\r\n  displayName: function (context: ValidationContext) {\r\n    if (context.property) {\r\n      return context.property.resolveProperty(\"displayName\") || context.propertyName || context.property.name;\r\n    } else {\r\n      return \"Value\";\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\nInstances of the Validator class provide the logic to validate another object and provide a description of any errors\r\nencountered during the validation process.  They are typically associated with a 'validators' property on the following types: [[EntityType]],\r\n[[DataProperty]] or [[NavigationProperty]].\r\n\r\nA number of property level validators are registered automatically, i.e added to each DataProperty.validators property\r\nbased on [[DataProperty]] metadata.  For example,\r\n\r\n- DataProperty.dataType -> one of the 'dataType' validator methods such as Validator.int64, Validator.date, Validator.bool etc.\r\n- DataProperty.maxLength -> Validator.maxLength\r\n- DataProperty.isNullable -> Validator.required (if not nullable)\r\n\r\n@class Validator\r\n**/\r\n\r\n/**\r\nValidator constructor - This method is used to create create custom validations.  Several\r\nbasic \"Validator\" construction methods are also provided as static methods to this class. These methods\r\nprovide a simpler syntax for creating basic validations.\r\n\r\nMany of these stock validators are inspired by and implemented to conform to the validators defined at\r\nhttp://msdn.microsoft.com/en-us/library/system.componentmodel.dataannotations.aspx\r\n\r\nSometimes a custom validator will be required.\r\n@example\r\nMost validators will be 'property' level validators, like this.\r\n@example\r\n    // v is this function is the value to be validated, in this case a \"country\" string.\r\n    var valFn = function (v) {\r\n        if (v == null) return true;\r\n        return (core.stringStartsWith(v, \"US\"));\r\n    };\r\n    var countryValidator = new Validator(\"countryIsUS\", valFn, {\r\n        displayName: \"Country\", \r\n        messageTemplate: \"'%displayName%' must start with 'US'\" \r\n    });\r\n\r\n    // Now plug it into Breeze.\r\n    // Assume em1 is a preexisting EntityManager.\r\n    var custType = metadataStore.getEntityType(\"Customer\");\r\n    var countryProp = custType.getProperty(\"Country\");\r\n    // Note that validator is added to a 'DataProperty' validators collection.\r\n    prop.validators.push(countryValidator);\r\nEntity level validators are also possible\r\n@example\r\n    function isValidZipCode(value) {\r\n        var re = /^\\d{5}([\\-]\\d{4})?$/;\r\n        return (re.test(value));\r\n    }\r\n\r\n    // v in this case will be a Customer entity\r\n    var valFn = function (v) {\r\n        // This validator only validates US Zip Codes.\r\n        if ( v.getProperty(\"Country\") === \"USA\") {\r\n            var postalCode = v.getProperty(\"PostalCode\");\r\n            return isValidZipCode(postalCode);\r\n        }\r\n        return true;\r\n    };\r\n    var zipCodeValidator = new Validator(\"zipCodeValidator\", valFn,\r\n        { messageTemplate: \"For the US, this is not a valid PostalCode\" });\r\n\r\n    // Now plug it into Breeze.\r\n    // Assume em1 is a preexisting EntityManager.\r\n    var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n    // Note that validator is added to an 'EntityType' validators collection.\r\n    custType.validators.push(zipCodeValidator);\r\nWhat is commonly needed is a way of creating a parameterized function that will itself\r\nreturn a new Validator.  This requires the use of a 'context' object.\r\n@example\r\n    // create a function that will take in a config object\r\n    // and will return a validator\r\n    var numericRangeValidator = function(context) {\r\n        var valFn = function(v, ctx) {\r\n            if (v == null) return true;\r\n            if (typeof(v) !== \"number\") return false;\r\n            if (ctx.min != null && v < ctx.min) return false;\r\n            if (ctx.max != null && v > ctx.max) return false;\r\n            return true;\r\n        };\r\n        // The last parameter below is the 'context' object that will be passed into the 'ctx' parameter above\r\n        // when this validator executes. Several other properties, such as displayName will get added to this object as well.\r\n        return new Validator(\"numericRange\", valFn, {\r\n            messageTemplate: \"'%displayName%' must be a number between the values of %min% and %max%\",\r\n            min: context.min,\r\n            max: context.max\r\n        });\r\n    };\r\n    // Assume that freightProperty is a DataEntityProperty that describes numeric values.\r\n    // register the validator\r\n    freightProperty.validators.push(numericRangeValidator({ min: 100, max: 500 }));\r\n\r\nBreeze substitutes context values and functions for the tokens in the messageTemplate when preparing the runtime error message;\r\n'displayName' is a pre-defined context function that is always available.\r\n\r\nPlease note that Breeze substitutes the empty string for falsey parameters. That usually works in your favor.\r\nSometimes it doesn't as when the 'min' value is zero in which case the message text would have a hole\r\nwhere the 'min' value goes, saying: \"... an integer between the values of and ...\". That is not what you want.\r\n\r\nTo avoid this effect, you may can bake certain of the context values into the 'messageTemplate' itself\r\nas shown in this revision to the pertinent part of the previous example:\r\n@example\r\n    // ... as before\r\n    // ... but bake the min/max values into the message template.\r\n    var template = breeze.core.formatString(\r\n        \"'%displayName%' must be a number between the values of %1 and %2\",\r\n        context.min, context.max);\r\n    return new Validator(\"numericRange\", valFn, {\r\n        messageTemplate: template,\r\n        min: context.min,\r\n        max: context.max\r\n    });\r\n\r\n@method <ctor> Validator\r\n@param name {String} The name of this validator.\r\n@param validatorFn {Function} A function to perform validation.\r\n\r\nvalidatorFn(value, context)\r\n@param validatorFn.value {Object} Value to be validated\r\n@param validatorFn.context {Object} The same context object passed into the constructor with the following additional properties if not\r\notherwise specified.\r\n@param validatorFn.context.value {Object} The value being validated.\r\n@param validatorFn.context.name {String} The name of the validator being executed.\r\n@param validatorFn.context.displayName {String} This will be either the value of the property's 'displayName' property or\r\nthe value of its 'name' property or the string 'Value'\r\n@param validatorFn.context.messageTemplate {String} This will either be the value of Validator.messageTemplates[ {this validators name}] or null. Validator.messageTemplates\r\nis an object that is keyed by validator name and that can be added to in order to 'register' your own message for a given validator.\r\nThe following property can also be specified for any validator to force a specific errorMessage string\r\n@param [validatorFn.context.message] {String} If this property is set it will be used instead of the 'messageTemplate' property when an\r\nerror message is generated.\r\n\r\n@param [context] {Object} A free form object whose properties will made available during the validation and error message creation process.\r\nThis object will be passed into the Validator's validation function whenever 'validate' is called. See above for a description\r\nof additional properties that will be automatically added to this object if not otherwise specified.\r\n@dynamic\r\n**/\r\nexport class Validator {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n\r\n  name: string;\r\n  valFn: ValidationFn;\r\n  context: ValidationContext;\r\n  currentContext: any;\r\n  private _baseContext: any;\r\n\r\n  constructor(name: string, valFn: ValidationFn, context?: any) {\r\n    // _baseContext is what will get serialized\r\n    this._baseContext = context || {};\r\n    this._baseContext.name = name;\r\n    context = core.extend(Object.create(rootContext), this._baseContext);\r\n    context.messageTemplate = context.messageTemplate || Validator.messageTemplates[name];\r\n    this.name = name;\r\n    this.valFn = valFn;\r\n    this.context = context;\r\n  }\r\n\r\n  /**\r\n  The name of this validator.\r\n\r\n  __readOnly__\r\n  @property name {String}\r\n  **/\r\n\r\n  /**\r\n  The context for this validator.\r\n\r\n  This object will typically contain at a minimum the following properties. \"name\", \"displayName\", and \"message\" or \"messageTemplate\".\r\n  __readOnly__\r\n  @property context {Object}\r\n  **/\r\n\r\n\r\n  /**\r\n  Run this validator against the specified value.  This method will usually be called internally either\r\n  automatically by an property change, entity attach, query or save operation, or manually as a result of\r\n  a validateEntity call on the EntityAspect. The resulting ValidationResults are available via the\r\n  EntityAspect.getValidationErrors method.\r\n\r\n  However, you can also call a validator directly either for testing purposes or some other reason if needed.\r\n  @example\r\n      // using one of the predefined validators\r\n      var validator = Validator.maxLength({ maxLength: 5, displayName: \"City\" });\r\n      // should be ok because \"asdf\".length < 5\r\n      var result = validator.validate(\"asdf\");\r\n      ok(result === null);\r\n      result = validator.validate(\"adasdfasdf\");\r\n      // extract all of the properties of the 'result'\r\n      var errMsg = result.errorMessage;\r\n      var context = result.context;\r\n      var sameValidator = result.validator;\r\n  @method validate\r\n  @param value {Object} Value to validate\r\n  @param additionalContext {Object} Any additional contextual information that the Validator\r\n  can make use of.\r\n  @return {ValidationError|null} A ValidationError if validation fails, null otherwise\r\n  **/\r\n  validate(value: any, additionalContext?: any) {\r\n    let currentContext: ValidationContext; // { value?: Object };\r\n    if (additionalContext) {\r\n      currentContext = core.extend(Object.create(this.context), additionalContext);\r\n    } else {\r\n      currentContext = this.context;\r\n    }\r\n    this.currentContext = currentContext;\r\n\r\n    try {\r\n      if (this.valFn(value, currentContext)) {\r\n        return null;\r\n      } else {\r\n        currentContext.value = value;\r\n        return new ValidationError(this, currentContext, this.getMessage());\r\n      }\r\n    } catch (e) {\r\n      return new ValidationError(this, currentContext, \"Exception occured while executing this validator: \" + this.name);\r\n    }\r\n  }\r\n\r\n\r\n  // context.value is not avail unless validate was called first.\r\n\r\n  /**\r\n  Returns the message generated by the most recent execution of this Validator.\r\n  @example\r\n      var v0 = Validator.maxLength({ maxLength: 5, displayName: \"City\" });\r\n      v0.validate(\"adasdfasdf\");\r\n      var errMessage = v0.getMessage());\r\n  @method getMessage\r\n  @return {String}\r\n  **/\r\n  getMessage() {\r\n    try {\r\n      let context = this.currentContext;\r\n      let message = context.message;\r\n      if (message) {\r\n        if (typeof (message) === \"function\") {\r\n          return message(context);\r\n        } else {\r\n          return message;\r\n        }\r\n      } else if (context.messageTemplate) {\r\n        return formatTemplate(context.messageTemplate, context);\r\n      } else {\r\n        return \"invalid value: \" + (this.name || \"{unnamed validator}\");\r\n      }\r\n    } catch (e) {\r\n      return \"Unable to format error message\" + e.toString();\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    return this._baseContext;\r\n  }\r\n\r\n  /**\r\n  Creates a validator instance from a JSON object or an array of instances from an array of JSON objects.\r\n  @method fromJSON\r\n  @static\r\n  @param json {Object} JSON object that represents the serialized version of a validator.\r\n  **/\r\n  public static fromJSON(json: any): any {\r\n    if (Array.isArray(json)) {\r\n      return json.map(function (js) {\r\n        return Validator.fromJSON(js);\r\n      });\r\n    }\r\n    if (json instanceof Validator) {\r\n      return json;\r\n    }\r\n    let validatorName = \"Validator.\" + json.name;\r\n    let fn = config.getRegisteredFunction(validatorName);\r\n    if (!fn) {\r\n      throw new Error(\"Unable to locate a validator named:\" + json.name);\r\n    }\r\n    return fn(json);\r\n  }\r\n\r\n  /**\r\n  Register a validator instance so that any deserialized metadata can reference it.\r\n  @method register\r\n  @static\r\n  @param validator {Validator} Validator to register.\r\n  **/\r\n  public static register(validator: Validator) {\r\n    config.registerFunction(function () {\r\n      return validator;\r\n    }, \"Validator.\" + validator.name);\r\n  }\r\n\r\n  /**\r\n  Register a validator factory so that any deserialized metadata can reference it.\r\n  @method registerFactory\r\n  @static\r\n  @param validatorFactory {Function} A function that optionally takes a context property and returns a Validator instance.\r\n  @param name {String} The name of the validator.\r\n  **/\r\n  public static registerFactory(validatorFactory: (options?: any) => Validator, name: string) {\r\n    config.registerFunction(validatorFactory, \"Validator.\" + name);\r\n  }\r\n\r\n  /**\r\n  Map of standard error message templates keyed by validator name.\r\n  You can add to or modify this object to customize the template used for any validation error message.\r\n  @example\r\n      // v is this function is the value to be validated, in this case a \"country\" string.\r\n      var valFn = function (v) {\r\n          if (v == null) return true;\r\n          return (core.stringStartsWith(v, \"US\"));\r\n      };\r\n      var countryValidator = new Validator(\"countryIsUS\", valFn, { displayName: \"Country\" });\r\n      Validator.messageTemplates.countryIsUS = \"'%displayName%' must start with 'US'\";\r\n      // This will have a similar effect to this\r\n      var countryValidator = new Validator(\"countryIsUS\", valFn, {\r\n          displayName: \"Country\", \r\n          messageTemplate: \"'%displayName%' must start with 'US'\" \r\n      });\r\n  @property messageTemplates {Object}\r\n  @static\r\n  **/\r\n  public static messageTemplates = {\r\n    bool: \"'%displayName%' must be a 'true' or 'false' value\",\r\n    creditCard: \"The %displayName% is not a valid credit card number\",\r\n    date: \"'%displayName%' must be a date\",\r\n    duration: \"'%displayName%' must be a ISO8601 duration string, such as 'P3H24M60S'\",\r\n    emailAddress: \"The %displayName% '%value%' is not a valid email address\",\r\n    guid: \"'%displayName%' must be a GUID\",\r\n    integer: \"'%displayName%' must be an integer\",\r\n    integerRange: \"'%displayName%' must be an integer between the values of %minValue% and %maxValue%\",\r\n    maxLength: \"'%displayName%' must be a string with %maxLength% characters or less\",\r\n    number: \"'%displayName%' must be a number\",\r\n    phone: \"The %displayName% '%value%' is not a valid phone number\",\r\n    regularExpression: \"The %displayName% '%value%' does not match '%expression%'\",\r\n    required: \"'%displayName%' is required\",\r\n    string: \"'%displayName%' must be a string\",\r\n    stringLength: \"'%displayName%' must be a string with between %minLength% and %maxLength% characters\",\r\n    url: \"The %displayName% '%value%' is not a valid url\"\r\n  };\r\n\r\n  /**\r\n  Returns a standard 'required value' Validator\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      var regionProperty - custType.getProperty(\"Region\");\r\n      // Makes \"Region\" on Customer a required property.\r\n      regionProperty.validators.push(Validator.required());\r\n      // or to allow empty strings\r\n      regionProperty.validators.push(Validator.required({ allowEmptyStrings: true }););\r\n  @method required\r\n  @static\r\n  @param context {Object}\r\n  @param [context.allowEmptyStrings] {Boolean} If this parameter is omitted or false then empty strings do NOT pass validation.\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static required = function(context?: any) {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (typeof v === \"string\") {\r\n        if (ctx && ctx.allowEmptyStrings) return true;\r\n        return v.length > 0;\r\n      } else {\r\n        return v != null;\r\n      }\r\n    };\r\n    return new Validator(\"required\", valFn, context);\r\n  };\r\n\r\n  /**\r\n  Returns a standard maximum string length Validator; the maximum length must be specified\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      var regionProperty - custType.getProperty(\"Region\");\r\n      // Validates that the value of the Region property on Customer will be less than or equal to 5 characters.\r\n      regionProperty.validators.push(Validator.maxLength( {maxLength: 5}));\r\n  @method maxLength\r\n  @static\r\n  @param context {Object}\r\n  @param context.maxLength {Integer}\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static maxLength = function(context: any) {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (v == null) return true;\r\n      if (typeof (v) !== \"string\") return false;\r\n      return v.length <= ctx.maxLength;\r\n    };\r\n    return new Validator(\"maxLength\", valFn, context);\r\n  };\r\n\r\n  /**\r\n  Returns a standard string length Validator; both minimum and maximum lengths must be specified.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      var regionProperty - custType.getProperty(\"Region\");\r\n      // Validates that the value of the Region property on Customer will be\r\n      // between 2 and 5 characters\r\n      regionProperty.validators.push(Validator.stringLength( {minLength: 2, maxLength: 5});\r\n  @method stringLength\r\n  @static\r\n  @param context {Object}\r\n  @param context.maxLength {Integer}\r\n  @param context.minLength {Integer}\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static stringLength = function (context: any) {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (v == null) return true;\r\n      if (typeof (v) !== \"string\") return false;\r\n      if (ctx.minLength != null && v.length < ctx.minLength) return false;\r\n      if (ctx.maxLength != null && v.length > ctx.maxLength) return false;\r\n      return true;\r\n    };\r\n    return new Validator(\"stringLength\", valFn, context);\r\n  };\r\n\r\n  /**\r\n  Returns a standard string dataType Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      var regionProperty - custType.getProperty(\"Region\");\r\n      // Validates that the value of the Region property on Customer is a string.\r\n      regionProperty.validators.push(Validator.string());\r\n  @method string\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static string = function () {\r\n    let valFn = function (v: any) {\r\n      if (v == null) return true;\r\n      return (typeof v === \"string\");\r\n    };\r\n    return new Validator(\"string\", valFn);\r\n  };\r\n\r\n  /**\r\n  Returns a Guid data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      var customerIdProperty - custType.getProperty(\"CustomerID\");\r\n      // Validates that the value of the CustomerID property on Customer is a Guid.\r\n      customerIdProperty.validators.push(Validator.guid());\r\n  @method guid\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static guid = function () {\r\n    let valFn = function (v: any) {\r\n      if (v == null) return true;\r\n      return core.isGuid(v);\r\n    };\r\n    return new Validator(\"guid\", valFn);\r\n  };\r\n\r\n  /**\r\n  Returns a ISO 8601 duration string  Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var eventType = em1.metadataStore.getEntityType(\"Event\");\r\n      var elapsedTimeProperty - eventType.getProperty(\"ElapsedTime\");\r\n      // Validates that the value of the ElapsedTime property on Customer is a duration.\r\n      elapsedTimeProperty.validators.push(Validator.duration());\r\n  @method duration\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static duration = function () {\r\n    let valFn = function (v: any) {\r\n      if (v == null) return true;\r\n      return core.isDuration(v);\r\n    };\r\n    return new Validator(\"duration\", valFn);\r\n  };\r\n\r\n  /**\r\n  Returns a standard numeric data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var freightProperty - orderType.getProperty(\"Freight\");\r\n      // Validates that the value of the Freight property on Order is a number.\r\n      freightProperty.validators.push(Validator.number());\r\n  @method number\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n\r\n    // TODO: may need to have seperate logic for single.\r\n  public static number = function(context?: any) {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (v == null) return true;\r\n      if (typeof v === \"string\" && ctx && ctx.allowString) {\r\n        v = parseFloat(v);\r\n      }\r\n      return (typeof v === \"number\" && !isNaN(v));\r\n    };\r\n    return new Validator(\"number\", valFn, context);\r\n  };\r\n  public static double = Validator.number;\r\n  public static single = Validator.number;\r\n\r\n  /**\r\n  Returns a standard large integer data type - 64 bit - Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var freightProperty - orderType.getProperty(\"Freight\");\r\n      // Validates that the value of the Freight property on Order is within the range of a 64 bit integer.\r\n      freightProperty.validators.push(Validator.int64());\r\n  @method int64\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static integer = function(context: any) {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (v == null) return true;\r\n      if (typeof v === \"string\" && ctx && ctx.allowString) {\r\n        v = parseInt(v, 10);\r\n      }\r\n      return (typeof v === \"number\") && (!isNaN(v)) && Math.floor(v) === v;\r\n    };\r\n    return new Validator(\"integer\", valFn, context);\r\n  };\r\n  public static int64 = Validator.integer;\r\n\r\n  /**\r\n  Returns a standard 32 bit integer data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var freightProperty - orderType.getProperty(\"Freight\");\r\n      freightProperty.validators.push(Validator.int32());\r\n  @method int32\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static int32 = function(context: any) {\r\n    return intRangeValidatorCtor(\"int32\", INT32_MIN, INT32_MAX, context)();\r\n  };\r\n\r\n  /**\r\n  Returns a standard 16 bit integer data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var freightProperty - orderType.getProperty(\"Freight\");\r\n      // Validates that the value of the Freight property on Order is within the range of a 16 bit integer.\r\n      freightProperty.validators.push(Validator.int16());\r\n  @method int16\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static int16 = function(context: any) {\r\n    return intRangeValidatorCtor(\"int16\", INT16_MIN, INT16_MAX, context)();\r\n  };\r\n\r\n  /**\r\n  Returns a standard byte data type Validator. (This is a integer between 0 and 255 inclusive for js purposes).\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var freightProperty - orderType.getProperty(\"Freight\");\r\n      // Validates that the value of the Freight property on Order is within the range of a 16 bit integer.\r\n      // Probably not a very good validation to place on the Freight property.\r\n      regionProperty.validators.push(Validator.byte());\r\n  @method byte\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static byte = function(context: any) {\r\n    return intRangeValidatorCtor(\"byte\", BYTE_MIN, BYTE_MAX, context)();\r\n  };\r\n\r\n  /**\r\n  Returns a standard boolean data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var productType = em1.metadataStore.getEntityType(\"Product\");\r\n      var discontinuedProperty - productType.getProperty(\"Discontinued\");\r\n      // Validates that the value of the Discontinued property on Product is a boolean\r\n      discontinuedProperty.validators.push(Validator.bool());\r\n  @method bool\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static bool = function() {\r\n    let valFn = function (v: any) {\r\n      if (v == null) return true;\r\n      return (v === true) || (v === false);\r\n    };\r\n    return new Validator(\"bool\", valFn);\r\n  };\r\n\r\n  public static none = function() {\r\n    let valFn = function (v: any) {\r\n      return true;\r\n    };\r\n    return new Validator(\"none\", valFn);\r\n  };\r\n\r\n  /**\r\n  Returns a standard date data type Validator.\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager.\r\n      var orderType = em1.metadataStore.getEntityType(\"Order\");\r\n      var orderDateProperty - orderType.getProperty(\"OrderDate\");\r\n      // Validates that the value of the OrderDate property on Order is a date\r\n      // Probably not a very good validation to place on the Freight property.\r\n      orderDateProperty.validators.push(Validator.date());\r\n  @method date\r\n  @static\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static date = function() {\r\n    let valFn = function (v: any) {\r\n      if (v == null) return true;\r\n      if (typeof v === \"string\") {\r\n        try {\r\n          return !isNaN(Date.parse(v));\r\n          // old code\r\n          // return __isDate(new Date(v));\r\n        } catch (e) {\r\n          return false;\r\n        }\r\n      } else {\r\n        return core.isDate(v);\r\n      }\r\n    };\r\n    return new Validator(\"date\", valFn);\r\n  };\r\n\r\n  /**\r\n  Returns a credit card number validator\r\n  Performs a luhn algorithm checksum test for plausability\r\n  catches simple mistakes; only service knows for sure\r\n  @example\r\n      // Assume em is a preexisting EntityManager.\r\n      var personType = em.metadataStore.getEntityType(\"Person\");\r\n      var creditCardProperty = personType.getProperty(\"creditCard\");\r\n      // Validates that the value of the Person.creditCard property is credit card.\r\n      creditCardProperty.validators.push(Validator.creditCard());\r\n  @method creditCard\r\n  @static\r\n  @param [context] {Object} optional parameters to pass through to validation constructor\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static creditCard = function(context?: any) {\r\n    function valFn(v: any) {\r\n      if (v == null || v === '') return true;\r\n      if (typeof (v) !== 'string') return false;\r\n      v = v.replace(/(\\-|\\s)/g, \"\"); // remove dashes and spaces\r\n      if (!v || /\\D/.test(v)) return false; // all digits, not empty\r\n      return luhn(v);\r\n    }\r\n    return new Validator('creditCard', valFn, context);\r\n  };\r\n\r\n\r\n  /**\r\n  Returns a regular expression validator; the expression must be specified\r\n  @example\r\n      // Add validator to a property. Assume em is a preexisting EntityManager.\r\n      var customerType = em.metadataStore.getEntityType(\"Customer\");\r\n      var regionProperty = customerType.getProperty(\"Region\");\r\n      // Validates that the value of Customer.Region is 2 char uppercase alpha.\r\n      regionProperty.validators.push(Validator.regularExpression( {expression: '^[A-Z]{2}$'} );\r\n  @method regularExpression\r\n  @static\r\n  @param context {Object}\r\n  @param context.expression {String} String form of the regular expression to apply\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static regularExpression = function(context?: any) {\r\n    function valFn(v: any, ctx: any) {\r\n      // do not invalidate if empty; use a separate required test\r\n      if (v == null || v === '') return true;\r\n      if (typeof (v) !== 'string') return false;\r\n      try {\r\n        let re = new RegExp(ctx.expression);\r\n        return re.test(v);\r\n      } catch (e) {\r\n        throw new Error('Missing or invalid expression parameter to regExp validator');\r\n      }\r\n    }\r\n    return new Validator('regularExpression', valFn, context);\r\n  };\r\n\r\n  /**\r\n  Returns the email address validator\r\n  @example\r\n      // Assume em is a preexisting EntityManager.\r\n      var personType = em.metadataStore.getEntityType(\"Person\");\r\n      var emailProperty = personType.getProperty(\"email\");\r\n      // Validates that the value of the Person.email property is an email address.\r\n      emailProperty.validators.push(Validator.emailAddress());\r\n  @method emailAddress\r\n  @static\r\n  @param [context] {Object} optional parameters to pass through to validation constructor\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static emailAddress = function(context?: any) {\r\n    // See https://github.com/srkirkland/DataAnnotationsExtensions/blob/master/DataAnnotationsExtensions/EmailAttribute.cs\r\n    let reEmailAddress = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i;\r\n    return makeRegExpValidator('emailAddress', reEmailAddress, null, context);\r\n  };\r\n\r\n  /**\r\n  Returns the phone validator\r\n  Provides basic assertions on the format and will help to eliminate most nonsense input\r\n  Matches:\r\n  International dialing prefix: {{}, +, 0, 0000} (with or without a trailing break character, if not '+': [-/. ])\r\n  > ((\\+)|(0(\\d+)?[-/.\\s]))\r\n  Country code: {{}, 1, ..., 999} (with or without a trailing break character: [-/. ])\r\n  > [1-9]\\d{,2}[-/.\\s]?\r\n  Area code: {(0), ..., (000000), 0, ..., 000000} (with or without a trailing break character: [-/. ])\r\n  > ((\\(\\d{1,6}\\)|\\d{1,6})[-/.\\s]?)?\r\n  Local: {0, ...}+ (with or without a trailing break character: [-/. ])\r\n  > (\\d+[-/.\\s]?)+\\d+\r\n  @example\r\n      // Assume em is a preexisting EntityManager.\r\n      var customerType = em.metadataStore.getEntityType(\"Customer\");\r\n      var phoneProperty = customerType.getProperty(\"phone\");\r\n      // Validates that the value of the Customer.phone property is phone.\r\n      phoneProperty.validators.push(Validator.phone());\r\n  @method phone\r\n  @static\r\n  @param [context] {Object} optional parameters to pass through to validation constructor\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static phone = function (context?: any) {\r\n    // See https://github.com/srkirkland/DataAnnotationsExtensions/blob/master/DataAnnotationsExtensions/Expressions.cs\r\n    let rePhone = /^((\\+|(0(\\d+)?[-/.\\s]?))[1-9]\\d{0,2}[-/.\\s]?)?((\\(\\d{1,6}\\)|\\d{1,6})[-/.\\s]?)?(\\d+[-/.\\s]?)+\\d+$/;\r\n    return makeRegExpValidator('phone', rePhone, null, context);\r\n  };\r\n\r\n  /**\r\n  Returns the URL (protocol required) validator\r\n  @example\r\n      // Assume em is a preexisting EntityManager.\r\n      var personType = em.metadataStore.getEntityType(\"Person\");\r\n      var websiteProperty = personType.getProperty(\"website\");\r\n      // Validates that the value of the Person.website property is a URL.\r\n      websiteProperty.validators.push(Validator.url());\r\n  @method url\r\n  @static\r\n  @param [context] {Object} optional parameters to pass through to validation constructor\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static url = function (context?: any) {\r\n    //See https://github.com/srkirkland/DataAnnotationsExtensions/blob/master/DataAnnotationsExtensions/UrlAttribute.cs\r\n    let reUrlProtocolRequired = /^(https?|ftp):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-fA-F]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|([a-zA-Z][\\-a-zA-Z0-9]*)|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-fA-F]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-fA-F]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-fA-F]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-fA-F]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/;\r\n    return makeRegExpValidator('url', reUrlProtocolRequired, null, context);\r\n  };\r\n\r\n  /**\r\n  Creates a regular expression validator with a fixed expression.\r\n  Many of the stock validators are built with this factory method.\r\n  Their expressions are often derived from\r\n  https://github.com/srkirkland/DataAnnotationsExtensions/blob/master/DataAnnotationsExtensions\r\n  You can try many of them at http://dataannotationsextensions.org/\r\n  @example\r\n      // Make a zipcode validator\r\n      function zipValidator = Validator.makeRegExpValidator(\r\n      \"zipVal,\r\n      /^\\d{5}([\\-]\\d{4})?$/,\r\n      \"The %displayName% '%value%' is not a valid U.S. zipcode\");\r\n      // Register it.\r\n      Validator.register(zipValidator);\r\n      // Add it to a data property. Assume em is a preexisting EntityManager.\r\n      var custType = em.metadataStore.getEntityType(\"Customer\");\r\n      var zipProperty = custType.getProperty(\"PostalCode\");\r\n      zipProperty.validators.push(zipValidator);\r\n  @method makeRegExpValidator\r\n  @static\r\n  @param validatorName {String} name of this validator\r\n  @param expression {String | RegExp} regular expression to apply\r\n  @param [defaultMessage] {String} default message for failed validations\r\n  @param [context] {Object} optional parameters to pass through to validation constructor\r\n  @return {Validator} A new Validator\r\n  **/\r\n  public static makeRegExpValidator = makeRegExpValidator;\r\n\r\n}\r\nValidator.prototype._$typeName = \"Validator\";\r\n\r\n// register all validators\r\nError['x'] = core.objectForEach(Validator, function (key: string, value: any) {\r\n  if (typeof (value) !== \"function\") {\r\n    return;\r\n  }\r\n  if (key === \"fromJSON\" || key === \"register\" ||\r\n      key === \"registerFactory\" || key === \"makeRegExpValidator\") {\r\n    return;\r\n  }\r\n\r\n  config.registerFunction(value, \"Validator.\" + key);\r\n});\r\n\r\nfunction formatTemplate(template: string, vars: Object, ownPropertiesOnly: boolean = false) {\r\n  if (!vars) return template;\r\n  return template.replace(/%([^%]+)%/g, function (_, key) {\r\n    let valOrFn: any;\r\n    if (ownPropertiesOnly) {\r\n      valOrFn = vars.hasOwnProperty(key) ? vars[key] : '';\r\n    } else {\r\n      valOrFn = vars[key];\r\n    }\r\n    if (valOrFn != null) {\r\n      if (core.isFunction(valOrFn)) {\r\n        return valOrFn(vars);\r\n      } else {\r\n        return valOrFn;\r\n      }\r\n    } else {\r\n      return \"\";\r\n    }\r\n  });\r\n}\r\n\r\nfunction intRangeValidatorCtor(validatorName: string, minValue: number, maxValue: number, context: any) {\r\n  context = context || {};\r\n  if (minValue !== undefined) { context.min = minValue; }\r\n  if (maxValue !== undefined) { context.max = maxValue; }\r\n  let templateExists = context.messageTemplate || Validator.messageTemplates[validatorName];\r\n  if (!templateExists) {\r\n    Validator.messageTemplates[validatorName] = core.formatString(\"'%displayName%' must be an integer between the values of %1 and %2\",\r\n        minValue, maxValue);\r\n  }\r\n  return function () {\r\n    let valFn = function (v: any, ctx: any) {\r\n      if (v == null) return true;\r\n      if (typeof v === \"string\" && ctx && ctx.allowString) {\r\n        v = parseInt(v, 0);\r\n      }\r\n      if ((typeof v === \"number\") && (!isNaN(v)) && Math.floor(v) === v) {\r\n        if (minValue != null && v < minValue) {\r\n          return false;\r\n        }\r\n        if (maxValue != null && v > maxValue) {\r\n          return false;\r\n        }\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    };\r\n    return new Validator(validatorName, valFn, context);\r\n  };\r\n}\r\n\r\nexport function makeRegExpValidator(validatorName: string, expression: RegExp, defaultMessage?: string | null, context?: any) {\r\n  if (defaultMessage) {\r\n    Validator.messageTemplates[validatorName] = defaultMessage;\r\n  }\r\n  let re = (typeof (expression) === 'string') ? new RegExp(expression) : expression;\r\n  let valFn = function (v: any) {\r\n    // do not invalidate if empty; use a separate required test\r\n    if (v == null || v === '') return true;\r\n    if (typeof (v) !== 'string') return false;\r\n    return re.test(v);\r\n  };\r\n  return new Validator(validatorName, valFn, context);\r\n}\r\n\r\n// http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers#JavaScript\r\n\r\n// function luhn(a: string, b: number, c: number, d: number, e: number) {\r\n//   for (d = +a[b = a.length - 1], e = 0; b--; ) {\r\n//     c = +a[b], d += ++e % 2 ? 2 * c % 10 + (c > 4) : c;\r\n//   }\r\n//   return !(d % 10);\r\n// };\r\n\r\nlet  luhn = (function() {\r\n  let luhnArr = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\r\n  return function(str: string) \t{\r\n    let counter = 0;\r\n    let incNum: number;\r\n    let odd = false;\r\n    let temp = String(str).replace(/[^\\d]/g, \"\");\r\n    if ( temp.length === 0) return false;\r\n    for (let i = temp.length - 1; i >= 0; --i)  {\r\n      incNum = parseInt(temp.charAt(i), 10);\r\n      counter += (odd = !odd) ? incNum : luhnArr[incNum];\r\n    }\r\n    return (counter % 10 === 0);\r\n  };\r\n})();\r\n\r\n/**\r\nA ValidationError is used to describe a failed validation.\r\n\r\n@class ValidationError\r\n**/\r\n\r\n/**\r\nConstructs a new ValidationError\r\n@method <ctor> ValidationError\r\n\r\n@param validator {Validator || null} The Validator used to create this error, if any.\r\n@param context { ContextObject || null} The Context object used in conjunction with the Validator to create this error.\r\n@param errorMessage { String} The actual error message\r\n@param [key] {String} An optional key used to define a key for this error. One will be created automatically if not provided here.\r\n**/\r\nexport class ValidationError {\r\n  validator?: Validator;\r\n  key: string;\r\n  context: any;\r\n  errorMessage: string;\r\n  property: any; // IProperty\r\n  propertyName: string;\r\n  isServerError: boolean;\r\n\r\n  constructor(validator: Validator | null, context: any, errorMessage: string, key?: string) {\r\n    // Error is with isInstanceOf(Validator)\r\n    assertParam(validator, \"validator\").isOptional().isInstanceOf(Validator).check();\r\n    assertParam(errorMessage, \"errorMessage\").isNonEmptyString().check();\r\n    assertParam(key, \"key\").isOptional().isNonEmptyString().check();\r\n    this.validator = validator || undefined;\r\n    context = context || {};\r\n    this.context = context;\r\n    this.errorMessage = errorMessage;\r\n\r\n    this.property = context.property;\r\n    this.propertyName = context.propertyName || (context.property && context.property.name);\r\n\r\n    if (key) {\r\n      this.key = key;\r\n    } else {\r\n      this.key = ValidationError.getKey(validator || errorMessage, this.propertyName);\r\n    }\r\n    this.isServerError = false;\r\n  }\r\n\r\n\r\n  /**\r\n  The Validator associated with this ValidationError.\r\n\r\n  __readOnly__\r\n  @property validator {Validator}\r\n  **/\r\n\r\n  /**\r\n  A 'context' object associated with this ValidationError.\r\n\r\n  __readOnly__\r\n  @property context {Object}\r\n  **/\r\n\r\n  /**\r\n  The DataProperty or NavigationProperty associated with this ValidationError.\r\n\r\n  __readOnly__\r\n  @property property {DataProperty|NavigationProperty}\r\n  **/\r\n\r\n  /**\r\n  The property name associated with this ValidationError. This will be a \"property path\" for any properties of a complex object.\r\n\r\n  __readOnly__\r\n  @property propertyName {String}\r\n  **/\r\n\r\n  /**\r\n  The error message associated with the ValidationError.\r\n\r\n  __readOnly__\r\n  @property errorMessage {string}\r\n  **/\r\n\r\n  /**\r\n  The key by which this validation error may be removed from a collection of ValidationErrors.\r\n\r\n  __readOnly__\r\n  @property key {string}\r\n  **/\r\n\r\n  /**\r\n  Whether this is a server error.\r\n\r\n  __readOnly__\r\n  @property isServerError {bool}\r\n  **/\r\n\r\n\r\n  /**\r\n  Composes a ValidationError 'key' given a validator or an errorName and an optional propertyName\r\n  @method getKey\r\n  @static\r\n  @param validator {ValidatorOrErrorKey} A Validator or an \"error name\" if no validator is available.\r\n  @param [propertyName] A property name\r\n  @return {String} A ValidationError 'key'\r\n  **/\r\n  public static getKey(validatorOrErrorName: Validator | string, propertyName?: string) {\r\n    let name = (typeof validatorOrErrorName === 'string') ? validatorOrErrorName : validatorOrErrorName.name;\r\n    return name + (propertyName ? \":\" + propertyName : \"\");\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { core } from './core';\r\nimport { BreezeEnum } from './enum';\r\nimport { Validator } from './validate';\r\n\r\nlet _localTimeRegex = /.\\d{3}$/;\r\n\r\n/**  \r\nDataType is an 'Enum' containing all of the supported data types.\r\n@dynamic\r\n**/\r\nexport class DataType extends BreezeEnum {\r\n  /** The default value of this DataType. __Read Only__ **/\r\n  defaultValue?: any;\r\n  /** Whether this is a 'numeric' DataType. __Read Only__ **/\r\n  isNumeric?: boolean;\r\n  /** Whether this is an 'integer' DataType. __Read Only__ **/\r\n  isInteger?: boolean;\r\n  /** Whether to quote the json value when formatting this DataType for OData. */\r\n  quoteJsonOData?: boolean;\r\n  /** The constructor function to create a [[Validator]] to be used in validating instances of this DataType. */\r\n  validatorCtor?(context?: any): Validator;\r\n  /** \r\n  Optional function to normalize a data value for comparison, if its value cannot be used directly. \r\n  Note that this will be called each time a property is changed, so make it fast.\r\n  @return value appropriate for this DataType\r\n  **/\r\n  normalize?(value: any): any;\r\n  /**\r\n  Optional function to convert a raw (server) value from string to this DataType.\r\n  @return value appropriate for this DataType\r\n  **/\r\n  parseRawValue?(value: any): any;\r\n  /**\r\n  Optional function to convert a value from string to this DataType.  Note that this will be called each time a property is changed, so make it fast.\r\n  @return value appropriate for this DataType \r\n  **/\r\n  parse?(source: any, sourceTypeName: string): any;\r\n  /** \r\n  Optional function to format this DataType for OData queries.\r\n  @return value appropriate for OData query   \r\n  **/\r\n  fmtOData?(value: any): any;\r\n  /** \r\n  Optional function to get the next value for key generation, if this datatype is used as a key.  Uses an internal table of previous values.\r\n  @return value appropriate for this DataType \r\n  **/\r\n  getNext?(): any;\r\n  /**\r\n  Optional function to get the next value when the datatype is used as a concurrency property.\r\n  @param previousValue\r\n  @return the next concurrency value, which may be a function of the previousValue.\r\n  **/\r\n  getConcurrencyValue?(previousValue?: any): any;\r\n\r\n  static parseDateFromServer = (value: any) => DataType.parseDateAsUTC(value);\r\n  // same effect as above but doesn't give right TSDOC.\r\n  // static parseDateFromServer = DataType.parseDateAsUTC;\r\n\r\n  /** @hidden @internal */\r\n  static constants: { stringPrefix: string, nextNumber: number, nextNumberIncrement: number };\r\n\r\n  static String = new DataType({\r\n    defaultValue: \"\",\r\n    parse: coerceToString,\r\n    fmtOData: fmtString,\r\n    getNext: getNextString\r\n  });\r\n\r\n  static Int64 = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isInteger: true,\r\n    quoteJsonOData: true,\r\n    parse: coerceToInt,\r\n    fmtOData: makeFloatFmt(\"L\"),\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static Int32 = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isInteger: true,\r\n    parse: coerceToInt,\r\n    fmtOData: fmtInt,\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static Int16 = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isInteger: true,\r\n    parse: coerceToInt,\r\n    fmtOData: fmtInt,\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static Byte = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isInteger: true,\r\n    parse: coerceToInt,\r\n    fmtOData: fmtInt\r\n  });\r\n\r\n  static Decimal = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    quoteJsonOData: true,\r\n    isFloat: true,\r\n    parse: coerceToFloat,\r\n    fmtOData: makeFloatFmt(\"m\"),\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static Double = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isFloat: true,\r\n    parse: coerceToFloat,\r\n    fmtOData: makeFloatFmt(\"d\"),\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static Single = new DataType({\r\n    defaultValue: 0,\r\n    isNumeric: true,\r\n    isFloat: true,\r\n    parse: coerceToFloat,\r\n    fmtOData: makeFloatFmt(\"f\"),\r\n    getNext: getNextNumber\r\n  });\r\n\r\n  static DateTime = new DataType({\r\n    defaultValue: new Date(1900, 0, 1),\r\n    isDate: true,\r\n    parse: coerceToDate,\r\n    parseRawValue: parseRawDate,\r\n    normalize: function (value: any) { return value && value.getTime && value.getTime(); }, // dates don't perform equality comparisons properly\r\n    fmtOData: fmtDateTime,\r\n    getNext: getNextDateTime,\r\n    getConcurrencyValue: getConcurrencyDateTime\r\n  });\r\n\r\n  static DateTimeOffset = new DataType({\r\n    defaultValue: new Date(1900, 0, 1),\r\n    isDate: true,\r\n    parse: coerceToDate,\r\n    parseRawValue: parseRawDate,\r\n    normalize: function (value: any) { return value && value.getTime && value.getTime(); }, // dates don't perform equality comparisons properly\r\n    fmtOData: fmtDateTimeOffset,\r\n    getNext: getNextDateTime,\r\n    getConcurrencyValue: getConcurrencyDateTime\r\n  });\r\n\r\n  static Time = new DataType({\r\n    defaultValue: \"PT0S\",\r\n    fmtOData: fmtTime,\r\n    parseRawValue: DataType.parseTimeFromServer\r\n  });\r\n\r\n  static Boolean = new DataType({\r\n    defaultValue: false,\r\n    parse: coerceToBool,\r\n    fmtOData: fmtBoolean\r\n  });\r\n\r\n  static Guid = new DataType({\r\n    defaultValue: \"00000000-0000-0000-0000-000000000000\",\r\n    parse: coerceToGuid,\r\n    fmtOData: fmtGuid,\r\n    getNext: getNextGuid,\r\n    parseRawValue: function (val: string) { return val.toLowerCase(); },\r\n    getConcurrencyValue: core.getUuid\r\n  });\r\n\r\n  static Binary = new DataType({\r\n    defaultValue: null,\r\n    fmtOData: fmtBinary,\r\n    parseRawValue: parseRawBinary\r\n  });\r\n\r\n  static Undefined = new DataType({\r\n    defaultValue: undefined,\r\n    fmtOData: fmtUndefined\r\n  });\r\n\r\n  static getComparableFn(dataType?: DataType) {\r\n    if (dataType && dataType.normalize) {\r\n      return dataType.normalize;\r\n    } else if (dataType === DataType.Time) {\r\n      // durations must be converted to compare them\r\n      return function (value: any) {\r\n        return value && core.durationToSeconds(value);\r\n      };\r\n    } else {\r\n      // TODO: __identity\r\n      return function (value: any) {\r\n        return value;\r\n      };\r\n    }\r\n  }\r\n\r\n  /** Returns the DataType for a specified EDM type name.\r\n  **/\r\n  static fromEdmDataType(typeName: string) {\r\n    let dt: DataType | undefined;\r\n    let parts = typeName.split(\".\");\r\n    if (parts.length > 1) {\r\n      let simpleName = parts[1];\r\n      if (simpleName === \"image\") {\r\n        // hack\r\n        dt = DataType.Byte;\r\n      } else if (parts.length === 2) {\r\n        dt = DataType.fromName(simpleName) || DataType.Undefined;\r\n      } else {\r\n        // enum\r\n        // dt = DataType.Int32;\r\n        dt = DataType.String;\r\n      }\r\n    }\r\n\r\n    return dt;\r\n  }\r\n\r\n  /** Returns the DataType for a specified input. */\r\n  static fromValue(val: any) {\r\n    if (core.isDate(val)) return DataType.DateTime;\r\n    switch (typeof val) {\r\n      case \"string\":\r\n        if (core.isGuid(val)) return DataType.Guid;\r\n        // the >3 below is a hack to insure that if we are inferring datatypes that\r\n        // very short strings that are valid but unlikely ISO encoded Time's are treated as strings instead.\r\n        else if (core.isDuration(val) && val.length > 3) return DataType.Time;\r\n        else if (core.isDateString(val)) return DataType.DateTime;\r\n        return DataType.String;\r\n      case \"boolean\":\r\n        return DataType.Boolean;\r\n      case \"number\":\r\n        return DataType.Double;\r\n    }\r\n    return DataType.Undefined;\r\n  }\r\n\r\n  static parseTimeFromServer(source: any) {\r\n    if (typeof source === 'string') {\r\n      return source;\r\n    }\r\n    // ODATA v3 format\r\n    if (source && source.__edmType === 'Edm.Time') {\r\n      let seconds = Math.floor(source.ms / 1000);\r\n      return 'PT' + seconds + 'S';\r\n    }\r\n    return source;\r\n  }\r\n\r\n  static parseDateAsUTC(source: any) {\r\n    if (typeof source === 'string') {\r\n      // convert to UTC string if no time zone specifier.\r\n      let isLocalTime = _localTimeRegex.test(source);\r\n      // var isLocalTime = !hasTimeZone(source);\r\n      source = isLocalTime ? source + 'Z' : source;\r\n    }\r\n    source = new Date(Date.parse(source));\r\n    return source;\r\n  }\r\n\r\n\r\n  /** Returns a raw value converted to the specified DataType */\r\n  static parseRawValue(val: any, dataType?: DataType) {\r\n    // undefined values will be the default for most unmapped properties EXCEPT when they are set\r\n    // in a jsonResultsAdapter ( an unusual use case).\r\n    if (val === undefined) return undefined;\r\n    if (!val) return val;\r\n    if (dataType && dataType.parseRawValue) {\r\n      val = dataType.parseRawValue(val);\r\n    }\r\n    return val;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  // used during initialization; visible on instance for testing purposes.\r\n  static _resetConstants() {\r\n    DataType.constants = {\r\n      stringPrefix: \"K_\",\r\n      nextNumber: -1,\r\n      nextNumberIncrement: -1\r\n    };\r\n  }\r\n\r\n  // NOT YET NEEDED --------------------------------------------------\r\n  // var _utcOffsetMs = (new Date()).getTimezoneOffset() * 60000;\r\n\r\n  //DataType.parseDateAsLocal = function (source) {\r\n  //    var dt = DataType.parseDatesAsUTC(source);\r\n  //    if (__isDate(dt)) {\r\n  //        dt = new Date(dt.getTime() + _utcOffsetMs);\r\n  //    }\r\n  //    return dt;\r\n  //};\r\n}\r\nDataType.prototype._$typeName = \"DataType\";\r\nError['x'] = DataType._resetConstants();\r\nError['x'] = DataType.resolveSymbols();\r\nError['x'] = DataType.getSymbols().forEach((sym: DataType) => sym.validatorCtor = getValidatorCtor(sym));\r\n\r\n// private functions;\r\n\r\n\r\nfunction getValidatorCtor(dataType: DataType) {\r\n  switch (dataType) {\r\n    case DataType.String:\r\n      return Validator.string;\r\n    case DataType.Int64:\r\n      return Validator.int64;\r\n    case DataType.Int32:\r\n      return Validator.int32;\r\n    case DataType.Int16:\r\n      return Validator.int16;\r\n    case DataType.Decimal:\r\n      return Validator.number;\r\n    case DataType.Double:\r\n      return Validator.number;\r\n    case DataType.Single:\r\n      return Validator.number;\r\n    case DataType.DateTime:\r\n      return Validator.date;\r\n    case DataType.DateTimeOffset:\r\n      return Validator.date;\r\n    case DataType.Boolean:\r\n      return Validator.bool;\r\n    case DataType.Guid:\r\n      return Validator.guid;\r\n    case DataType.Byte:\r\n      return Validator.byte;\r\n    case DataType.Binary:\r\n      // TODO: don't quite know how to validate this yet.\r\n      return Validator.none;\r\n    case DataType.Time:\r\n      return Validator.duration;\r\n    case DataType.Undefined:\r\n      return Validator.none;\r\n  }\r\n}\r\n\r\nfunction getNextString() {\r\n  return DataType.constants.stringPrefix + getNextNumber().toString();\r\n}\r\n\r\nfunction getNextNumber() {\r\n  let result = DataType.constants.nextNumber;\r\n  DataType.constants.nextNumber += DataType.constants.nextNumberIncrement;\r\n  return result;\r\n}\r\n\r\nfunction getNextGuid() {\r\n  return core.getUuid();\r\n}\r\n\r\nfunction getNextDateTime() {\r\n  return new Date();\r\n}\r\n\r\nfunction getConcurrencyDateTime(val: any) {\r\n  // use the current datetime but insure that it is different from previous call.\r\n  let dt = new Date();\r\n  let dt2 = new Date();\r\n  while (dt.getTime() === dt2.getTime()) {\r\n    dt2 = new Date();\r\n  }\r\n  return dt2;\r\n}\r\n\r\nfunction coerceToString(source: any, sourceTypeName?: string) {\r\n  return (source == null) ? source : source.toString();\r\n}\r\n\r\nfunction coerceToGuid(source: any, sourceTypeName: string) {\r\n  if (sourceTypeName === \"string\") {\r\n    return source.trim().toLowerCase();\r\n  }\r\n  return source;\r\n}\r\n\r\nfunction coerceToInt(source: any, sourceTypeName: string) {\r\n  if (sourceTypeName === \"string\") {\r\n    let src = source.trim();\r\n    if (src === \"\") return null;\r\n    let val = parseInt(src, 10);\r\n    return isNaN(val) ? source : val;\r\n  } else if (sourceTypeName === \"number\") {\r\n    return Math.round(source);\r\n  }\r\n  // do we want to coerce floats -> ints\r\n  return source;\r\n}\r\n\r\nfunction coerceToFloat(source: any, sourceTypeName: string) {\r\n  if (sourceTypeName === \"string\") {\r\n    let src = source.trim();\r\n    if (src === \"\") return null;\r\n    let val = parseFloat(src);\r\n    return isNaN(val) ? source : val;\r\n  }\r\n  return source;\r\n}\r\n\r\nfunction coerceToDate(source: any, sourceTypeName: string) {\r\n  let val: any;\r\n  if (sourceTypeName === \"string\") {\r\n    let src = source.trim();\r\n    if (src === \"\") return null;\r\n    val = new Date(Date.parse(src));\r\n    return core.isDate(val) ? val : source;\r\n  } else if (sourceTypeName === \"number\") {\r\n    val = new Date(source);\r\n    return core.isDate(val) ? val : source;\r\n  }\r\n  return source;\r\n}\r\n\r\nfunction coerceToBool(source: any, sourceTypeName: string) {\r\n  if (sourceTypeName === \"string\") {\r\n    let src = source.trim().toLowerCase();\r\n    if (src === \"false\" || src === \"\") {\r\n      return false;\r\n    } else if (src === \"true\") {\r\n      return true;\r\n    } else {\r\n      return source;\r\n    }\r\n  }\r\n  return source;\r\n}\r\n\r\nfunction fmtString(val: any) {\r\n  return val == null ? null : \"'\" + val.replace(/'/g, \"''\") + \"'\";\r\n}\r\n\r\nfunction fmtInt(val: any) {\r\n  return val == null ? null : ((typeof val === \"string\") ? parseInt(val, 10) : val);\r\n}\r\n\r\nfunction makeFloatFmt(fmtSuffix: string) {\r\n  return function (val: any) {\r\n    if (val == null) return null;\r\n    if (typeof val === \"string\") {\r\n      val = parseFloat(val);\r\n    }\r\n    return val + fmtSuffix;\r\n  };\r\n}\r\n\r\nfunction fmtDateTime(val: Date) {\r\n  if (val == null) return null;\r\n  try {\r\n    return \"datetime'\" + val.toISOString() + \"'\";\r\n  } catch (e) {\r\n    throwError(\"'%1' is not a valid dateTime\", val);\r\n  }\r\n}\r\n\r\nfunction fmtDateTimeOffset(val: Date) {\r\n  if (val == null) return null;\r\n  try {\r\n    return \"datetimeoffset'\" + val.toISOString() + \"'\";\r\n  } catch (e) {\r\n    throwError(\"'%1' is not a valid dateTime\", val);\r\n  }\r\n}\r\n\r\nfunction fmtTime(val: any) {\r\n  if (val == null) return null;\r\n  if (!core.isDuration(val)) {\r\n    throwError(\"'%1' is not a valid ISO 8601 duration\", val);\r\n  }\r\n  return \"time'\" + val + \"'\";\r\n}\r\n\r\nfunction fmtGuid(val: any) {\r\n  if (val == null) return null;\r\n  if (!core.isGuid(val)) {\r\n    throwError(\"'%1' is not a valid guid\", val);\r\n  }\r\n  return \"guid'\" + val + \"'\";\r\n}\r\n\r\nfunction fmtBoolean(val: any) {\r\n  if (val == null) return null;\r\n  if (typeof val === \"string\") {\r\n    return val.trim().toLowerCase() === \"true\";\r\n  } else {\r\n    return !!val;\r\n  }\r\n}\r\n\r\nfunction fmtBinary(val: any) {\r\n  if (val == null) return val;\r\n  return \"binary'\" + val + \"'\";\r\n}\r\n\r\n// TODO: use __identity instead;\r\nfunction fmtUndefined(val: any) {\r\n  return val;\r\n}\r\n\r\nfunction throwError(msg: string, val: any) {\r\n  msg = core.formatString(msg, val);\r\n  throw new Error(msg);\r\n}\r\n\r\nfunction parseRawDate(val: any) {\r\n  if (!core.isDate(val)) {\r\n    val = DataType.parseDateFromServer(val);\r\n  }\r\n  return val;\r\n}\r\n\r\nfunction parseRawBinary(val: any) {\r\n  if (val && val.$value !== undefined) {\r\n    val = val.$value; // this will be a byte[] encoded as a string\r\n  }\r\n  return val;\r\n}\r\n\r\n//function hasTimeZone(source) {\r\n//  var ix = source.indexOf(\"T\");\r\n//  var timePart = source.substring(ix+1);\r\n//  return  timePart.indexOf(\"-\") >= 0 || timePart.indexOf(\"+\") >= 0 || timePart.indexOf(\"Z\");\r\n//}\r\n\r\n\r\n","import { BreezeEnum } from './enum';\r\n\r\n/**\r\nEntityState is an 'Enum' containing all of the valid states for an 'Entity'.\r\n**/\r\nexport class EntityState extends BreezeEnum {\r\n\r\n  /** The 'Unchanged' state. **/\r\n  static Unchanged = new EntityState();\r\n  /**  The 'Added' state.  **/\r\n  static Added = new EntityState();\r\n  /**  The 'Modified' state.   **/\r\n  static Modified = new EntityState();\r\n  /**  The 'Deleted' state.  **/\r\n  static Deleted = new EntityState();\r\n  /**  The 'Detached' state.  **/\r\n  static Detached = new EntityState();\r\n\r\n  /**\r\n  Returns whether an entityState instance is EntityState.Unchanged.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isUnchanged();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Unchanged;\r\n  **/\r\n  isUnchanged() {\r\n    return this === EntityState.Unchanged;\r\n  }\r\n\r\n  /**\r\n  Return whether an entityState instance is EntityState.Added.\r\n  \r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isAdded();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Added;\r\n  **/\r\n  isAdded() {\r\n    return this === EntityState.Added;\r\n  }\r\n\r\n  /**\r\n  Returns whether an entityState instance is EntityState.Modified.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isModified();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Modified;\r\n  **/\r\n  isModified() {\r\n    return this === EntityState.Modified;\r\n  }\r\n\r\n  /**\r\n  Returns whether an entityState instance is EntityState.Deleted.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isDeleted();\r\n\r\n  is the same as\r\n  \r\n  >     return es === EntityState.Deleted;\r\n  **/\r\n  isDeleted() {\r\n    return this === EntityState.Deleted;\r\n  }\r\n\r\n  /**\r\n  Returns whether an entityState instance is EntityState.Detached.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isDetached();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Detached;\r\n  **/\r\n  isDetached() {\r\n    return this === EntityState.Detached;\r\n  }\r\n\r\n  /**\r\n  Returns whether an entityState instance is EntityState.Unchanged or EntityState.Modified.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isUnchangedOrModified();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Unchanged || es === EntityState.Modified\r\n  **/\r\n  isUnchangedOrModified() {\r\n    return this === EntityState.Unchanged || this === EntityState.Modified;\r\n  }\r\n\r\n  /** Returns whether an entityState instance is EntityState.Added or EntityState.Modified or EntityState.Deleted.\r\n  >     var es = anEntity.entityAspect.entityState;\r\n  >     return es.isAddedModifiedOrDeleted();\r\n\r\n  is the same as\r\n  >     return es === EntityState.Added || es === EntityState.Modified || es === EntityState.Deleted\r\n  **/\r\n  isAddedModifiedOrDeleted() {\r\n    return this === EntityState.Added ||\r\n      this === EntityState.Modified ||\r\n      this === EntityState.Deleted;\r\n  }\r\n\r\n}\r\nEntityState.prototype._$typeName = \"EntityState\";\r\nError['x'] = EntityState.resolveSymbols();\r\n","import { BreezeEnum} from './enum';\r\n\r\n/** EntityAction is an 'Enum' containing all of the valid actions that can occur to an 'Entity'. \r\n \r\n*/\r\n\r\nexport class EntityAction extends BreezeEnum {\r\n\r\n  /** Entity was attached via an AttachEntity call. */\r\n  static Attach = new EntityAction( { _isAttach: true });\r\n  /**  Entity was attached as a result of a query. */\r\n  static AttachOnQuery = new EntityAction({ _isAttach: true});\r\n  /**  Entity was attached as a result of an import. */\r\n  static AttachOnImport = new EntityAction({ _isAttach: true});\r\n\r\n  /** Entity was detached */\r\n  static Detach = new EntityAction( { _isDetach: true });\r\n\r\n  /** Properties on the entity were merged as a result of a query. */\r\n  static MergeOnQuery = new EntityAction({ _isModification: true });\r\n  /** Properties on the entity were merged as a result of an import. */\r\n  static MergeOnImport = new EntityAction({ _isModification: true });\r\n  /** Properties on the entity were merged as a result of a save */\r\n  static MergeOnSave = new EntityAction({ _isModification: true });\r\n\r\n  /** A property on the entity was changed. */\r\n  static PropertyChange = new EntityAction({ _isModification: true});\r\n\r\n  /** The EntityState of the entity was changed. */\r\n  static EntityStateChange = new EntityAction();\r\n\r\n  /** AcceptChanges was called on the entity, or its entityState was set to Unmodified. */\r\n  static AcceptChanges = new EntityAction();\r\n  /** RejectChanges was called on the entity. */\r\n  static RejectChanges = new EntityAction({ _isModification: true});\r\n\r\n  /** The EntityManager was cleared.  All entities detached. */\r\n  static Clear = new EntityAction({ _isDetach: true});\r\n\r\n  /** @hidden @internal */\r\n  _isAttach?: boolean;\r\n  /** @hidden @internal */\r\n  _isDetach?: boolean;\r\n  /** @hidden @internal */\r\n  _isModification: boolean;\r\n  /** Is this an 'attach' operation? ( Attach, AttachOnQuery or AttachOnImport) */\r\n  isAttach() {\r\n    return !!this._isAttach;\r\n  }\r\n  /** Is this a 'detach' operation? ( Detach, Clear) */\r\n  isDetach() {\r\n    return !!this._isDetach;\r\n  }\r\n  /** Is this a 'modification' operation? ( PropertyChange, MergeOnQuery, MergeOnSave, MergeOnImport, RejectChanges) */\r\n  isModification() {\r\n    return !!this._isModification;\r\n  }\r\n}\r\nEntityAction.prototype._$typeName = \"EntityAction\";\r\nError['x'] = EntityAction.resolveSymbols();\r\n\r\n\r\n\r\n","import { core } from './core';\r\nimport { assertParam } from './assert-param';\r\nimport { EntityType, MetadataStore } from './entity-metadata';\r\nimport { DataType } from './data-type';\r\n\r\n/**\r\nAn EntityKey is an object that represents the unique identity of an entity.  EntityKey's are immutable.\r\n\r\n\r\n**/\r\nexport class EntityKey {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // actually placed on prototype\r\n  /** @hidden @internal */\r\n  static ENTITY_KEY_DELIMITER = \":::\";\r\n  /**  The 'EntityType' that this is a key for. __Read Only__ */\r\n  entityType: EntityType;\r\n  /**  An array of the values for this key. This will usually only have a single element, \r\n  unless the entity type has a multipart key. __Read Only__ */\r\n  values: any[];\r\n  /** @hidden @internal */\r\n  _keyInGroup: string;\r\n  /** @hidden @internal */\r\n  _subtypes: EntityType[];\r\n\r\n  /**\r\n  Constructs a new EntityKey.  Each entity within an EntityManager will have a unique EntityKey.\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     var empType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >     var entityKey = new EntityKey(empType, 1);\r\n\r\n  EntityKey's may also be found by calling EntityAspect.getKey()\r\n  >     // assume employee1 is an existing Employee entity\r\n  >     var empKey = employee1.entityAspect.getKey();\r\n\r\n  Multipart keys are created by passing an array as the 'keyValues' parameter\r\n  >     var empTerrType = em1.metadataStore.getEntityType(\"EmployeeTerritory\");\r\n  >     var empTerrKey = new EntityKey(empTerrType, [ 1, 77]);\r\n  >     // The order of the properties in the 'keyValues' array must be the same as that\r\n  >     // returned by empTerrType.keyProperties\r\n  @param entityType - The [[EntityType]] of the entity.\r\n  @param keyValues - A single value or an array of values. \r\n  */\r\n  constructor(entityType: EntityType, keyValues: any) {\r\n    assertParam(entityType, \"entityType\").isInstanceOf(EntityType).check();\r\n    let subtypes = entityType.getSelfAndSubtypes();\r\n    if (subtypes.length > 1) {\r\n      this._subtypes = subtypes.filter(function (st) {\r\n        return st.isAbstract === false;\r\n      });\r\n    }\r\n\r\n    if (!Array.isArray(keyValues)) {\r\n      keyValues = [keyValues];\r\n    }\r\n\r\n    this.entityType = entityType;\r\n    entityType.keyProperties.forEach(function (kp, i) {\r\n      // insure that guid keys are comparable.\r\n      if (kp.dataType === DataType.Guid) {\r\n        keyValues[i] = keyValues[i] && keyValues[i].toLowerCase ? keyValues[i].toLowerCase() : keyValues[i];\r\n      }\r\n    });\r\n\r\n    this.values = keyValues;\r\n    this._keyInGroup = EntityKey.createKeyString(keyValues);\r\n\r\n  }\r\n\r\n\r\n  toJSON() {\r\n    return {\r\n      entityType: this.entityType.name,\r\n      values: this.values\r\n    };\r\n  }\r\n\r\n  static fromJSON(json: any, metadataStore: MetadataStore) {\r\n    let et = metadataStore._getStructuralType(json.entityType, true) as EntityType;\r\n    return new EntityKey(et, json.values);\r\n  }\r\n\r\n  /**\r\n  Used to compare EntityKeys are determine if they refer to the same Entity.\r\n  There is also an static version of 'equals' with the same functionality.\r\n  \r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      var empType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >      var empKey1 = new EntityKey(empType, 1);\r\n  >      // assume employee1 is an existing Employee entity\r\n  >      var empKey2 = employee1.entityAspect.getKey();\r\n  >      if (empKey1.equals(empKey2)) {\r\n  >          // do something  ...\r\n  >      }\r\n  **/\r\n  equals(entityKey: EntityKey): boolean {\r\n    if (!(entityKey instanceof EntityKey)) return false;\r\n    return (this.entityType === entityKey.entityType) &&\r\n      core.arrayEquals(this.values, entityKey.values);\r\n  }\r\n\r\n  /*\r\n  Returns a human readable representation of this EntityKey.\r\n  */\r\n  toString(altEntityType?: EntityType) {\r\n    return (altEntityType || this.entityType).name + '-' + this._keyInGroup;\r\n  }\r\n\r\n  /**\r\n  Used to compare EntityKeys are determine if they refer to the same Entity.\r\n  There is also an instance version of 'equals' with the same functionality.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      var empType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >      var empKey1 = new EntityKey(empType, 1);\r\n  >      // assume employee1 is an existing Employee entity\r\n  >      var empKey2 = employee1.entityAspect.getKey();\r\n  >      if (EntityKey.equals(empKey1, empKey2)) {\r\n  >          // do something  ...\r\n  >      }\r\n  **/\r\n  static equals(k1: EntityKey, k2: EntityKey) {\r\n    if (!(k1 instanceof EntityKey)) return false;\r\n    return k1.equals(k2);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  // TODO: we may want to compare to default values later.\r\n  _isEmpty() {\r\n    return this.values.join(\"\").length === 0;\r\n  }\r\n\r\n  /** hidden */\r\n  // TODO: think about giving _ prefix or documenting.\r\n  static createKeyString(keyValues: any[]) {\r\n    return keyValues.join(EntityKey.ENTITY_KEY_DELIMITER);\r\n  }\r\n\r\n}\r\nEntityKey.prototype._$typeName = \"EntityKey\";\r\n\r\n\r\n","import { core } from './core';\r\nimport { BreezeEnum } from './enum';\r\nimport { assertConfig } from './assert-param';\r\n\r\n/**\r\nMergeStrategy is an 'Enum' that determines how entities are merged into an EntityManager.\r\n\r\n@class MergeStrategy\r\n@static\r\n**/\r\nexport class MergeStrategy extends BreezeEnum {\r\n\r\n  /**\r\n  MergeStrategy.PreserveChanges updates the cached entity with the incoming values unless the cached entity is in a changed\r\n  state (added, modified, deleted) in which case the incoming values are ignored. The updated cached entity’s EntityState will\r\n  remain [[EntityState.Unchanged]] unless you’re importing entities in which case the new EntityState will\r\n  be that of the imported entities.\r\n  **/\r\n  static PreserveChanges = new MergeStrategy();\r\n  /**\r\n  MergeStrategy.OverwriteChanges always updates the cached entity with incoming values even if the entity is in\r\n  a changed state (added, modified, deleted). After the merge, the pending changes are lost.\r\n  The new EntityState will be  [[EntityState/Unchanged]] unless you’re importing entities\r\n  in which case the new EntityState will be that of the imported entities.\r\n  **/\r\n  static OverwriteChanges = new MergeStrategy();\r\n\r\n  /**\r\n  SkipMerge is used to ignore incoming values. Adds the incoming entity to the cache only if there is no cached entity with the same key.\r\n  This is the fastest merge strategy but your existing cached data will remain “stale”.\r\n  **/\r\n  static SkipMerge = new MergeStrategy();\r\n\r\n  /**\r\n  Disallowed is used to throw an exception if there is an incoming entity with the same key as an entity already in the cache.\r\n  Use this strategy when you want to be sure that the incoming entity is not already in cache.\r\n  This is the default strategy for EntityManager.attachEntity.\r\n  **/\r\n  static Disallowed = new MergeStrategy();\r\n\r\n\r\n}\r\nMergeStrategy.prototype._$typeName = \"MergeStrategy\";\r\nError['x'] = MergeStrategy.resolveSymbols();\r\n\r\n/**\r\nFetchStrategy is an 'Enum' that determines how and where entities are retrieved from as a result of a query.\r\n**/\r\nexport class FetchStrategy extends BreezeEnum {\r\n\r\n  /**\r\n  FromServer is used to tell the query to execute the query against a remote data source on the server.\r\n  **/\r\n  static FromServer = new FetchStrategy();\r\n  /**\r\n  FromLocalCache is used to tell the query to execute the query against a local EntityManager instead of going to a remote server.\r\n  **/\r\n  static FromLocalCache = new FetchStrategy();\r\n\r\n}\r\nFetchStrategy.prototype._$typeName = \"FetchStrategy\";\r\nError['x'] = FetchStrategy.resolveSymbols();\r\n\r\n/** Configuration info to be passed to the [[QueryOptions]] constructor. */\r\nexport interface QueryOptionsConfig {\r\n  /** The [[FetchStrategy]] to use with any queries.*/\r\n  fetchStrategy?: FetchStrategy;\r\n  /** The [[MergeStrategy]] to use with any queries.*/\r\n  mergeStrategy?: MergeStrategy;\r\n  /** Whether to include cached deleted entities in a query result (false by default). __Read Only__ */\r\n  includeDeleted?: boolean;\r\n}\r\n\r\n/**\r\nA QueryOptions instance is used to specify the 'options' under which a query will occur.\r\n**/\r\nexport class QueryOptions {\r\n  /** @hidden @internal */\r\n  _$typeName: string;\r\n  /** The [[FetchStrategy]] to use with any queries. __Read Only__ */\r\n  fetchStrategy: FetchStrategy;\r\n  /** The [[MergeStrategy]] to use with any queries. __Read Only__ */\r\n  mergeStrategy: MergeStrategy;\r\n  /** Whether to include cached deleted entities in a query result (false by default). __Read Only__ */\r\n  includeDeleted: boolean;\r\n\r\n  /**\r\n  The default instance for use whenever QueryOptions are not specified.\r\n  **/\r\n  static defaultInstance = new QueryOptions({\r\n    fetchStrategy: FetchStrategy.FromServer,\r\n    mergeStrategy: MergeStrategy.PreserveChanges,\r\n    includeDeleted: false\r\n  });\r\n\r\n  /**\r\n  QueryOptions constructor\r\n  >     var newQo = new QueryOptions( { mergeStrategy: MergeStrategy.OverwriteChanges });\r\n  >     // assume em1 is a preexisting EntityManager\r\n  >     em1.setProperties( { queryOptions: newQo });\r\n  Any QueryOptions property that is not defined will be defaulted from any QueryOptions defined at a higher level in the breeze hierarchy, i.e.\r\n  -  from query.queryOptions\r\n  -  to   entityManager.queryOptions\r\n  -  to   QueryOptions.defaultInstance;\r\n\r\n  @param config - A configuration object.\r\n  **/\r\n  constructor(config?: QueryOptionsConfig) {\r\n    QueryOptions._updateWithConfig(this, config);\r\n  }\r\n\r\n  static resolve(queryOptionsArray: any[]) {\r\n    return new QueryOptions(core.resolveProperties(queryOptionsArray, [\"fetchStrategy\", \"mergeStrategy\", \"includeDeleted\"]));\r\n  }\r\n\r\n  /**\r\n  Returns a copy of this QueryOptions with the specified [[MergeStrategy]],\r\n  [[FetchStrategy]], or 'includeDeleted' option applied.\r\n  >     // Given an EntityManager instance, em\r\n  >     var queryOptions = em.queryOptions.using(MergeStrategy.PreserveChanges);\r\n\r\n  or\r\n  >     var queryOptions = em.queryOptions.using(FetchStrategy.FromLocalCache);\r\n\r\n  or\r\n  >     var queryOptions = em.queryOptions.using({ mergeStrategy: MergeStrategy.OverwriteChanges });\r\n\r\n  or\r\n  >     var queryOptions = em.queryOptions.using({\r\n  >        includeDeleted: true,\r\n  >        fetchStrategy:  FetchStrategy.FromLocalCache \r\n  >     });\r\n  @param config - A configuration object or a standalone [[MergeStrategy]] or [[FetchStrategy]] \r\n  @return A new QueryOptions instance.\r\n  **/\r\n  using(qoConfig: QueryOptionsConfig | MergeStrategy | FetchStrategy) {\r\n    if (!qoConfig) return this;\r\n    let result = new QueryOptions(this);\r\n    if ( qoConfig instanceof MergeStrategy) {\r\n      qoConfig = { mergeStrategy: qoConfig };\r\n    } else if ( qoConfig instanceof FetchStrategy) {\r\n      qoConfig = { fetchStrategy: qoConfig };\r\n    }\r\n    return QueryOptions._updateWithConfig(result, qoConfig);\r\n  }\r\n\r\n  /**\r\n  Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.\r\n  The current instance is returned unchanged.\r\n  >     var newQo = new QueryOptions( { mergeStrategy: MergeStrategy.OverwriteChanges });\r\n  >     newQo.setAsDefault();\r\n  **/\r\n  setAsDefault() {\r\n    return core.setAsDefault(this, QueryOptions);\r\n  }\r\n\r\n  toJSON() {\r\n    return core.toJson(this, {\r\n      fetchStrategy: null,\r\n      mergeStrategy: null,\r\n      includeDeleted: false\r\n    });\r\n  }\r\n\r\n  static fromJSON(json: any) {\r\n    return new QueryOptions({\r\n      fetchStrategy: FetchStrategy.fromName(json.fetchStrategy),\r\n      mergeStrategy: MergeStrategy.fromName(json.mergeStrategy),\r\n      includeDeleted: json.includeDeleted === true\r\n    });\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  private static _updateWithConfig(obj: QueryOptions, config?: QueryOptionsConfig) {\r\n    if (config) {\r\n      assertConfig(config)\r\n        .whereParam(\"fetchStrategy\").isEnumOf(FetchStrategy).isOptional()\r\n        .whereParam(\"mergeStrategy\").isEnumOf(MergeStrategy).isOptional()\r\n        .whereParam(\"includeDeleted\").isBoolean().isOptional()\r\n        .applyAll(obj);\r\n    }\r\n    return obj;\r\n  }\r\n\r\n}\r\nQueryOptions.prototype._$typeName = \"QueryOptions\";\r\n","import { core } from './core';\r\nimport { EntityType, StructuralType, DataProperty  } from './entity-metadata';\r\nimport { QueryOp } from './entity-query';\r\nimport { DataType  } from './data-type';\r\nimport { EntityAspect, Entity } from './entity-aspect';\r\nimport { LocalQueryComparisonOptions } from './local-query-comparison-options';\r\n\r\nexport interface Op {\r\n  key: string;\r\n  aliases?: string[];\r\n  isFunction?: boolean;\r\n}\r\n\r\n/** @hidden @internal */\r\nexport interface OpMap {\r\n  [key: string]: Op;\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport interface Visitor {\r\n\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport interface VisitContext {\r\n  entityType?: EntityType;\r\n  // usesNameOnServer?: boolean;\r\n  toNameOnServer?: boolean;\r\n  useExplicitDataType?: boolean;\r\n  visitor?: Visitor;\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport interface ExpressionContext {\r\n  entityType?: EntityType;\r\n  usesNameOnServer?: boolean;\r\n  dataType?: DataType | string;\r\n  isRHS?: boolean;\r\n  isFnArg?: boolean;\r\n}\r\n\r\n/**\r\nUsed to define a 'where' predicate for an [[EntityQuery]].  Predicates are immutable, which means that any\r\nmethod that would modify a Predicate actually returns a new Predicate.\r\n**/\r\nexport class Predicate {\r\n  op: Op;\r\n  /** @hidden @internal */\r\n  _entityType?: EntityType;\r\n  /** @hidden @internal */\r\n  aliasMap: OpMap;\r\n  visitorMethodName: string;\r\n\r\n\r\n  /**\r\n  Predicate constructor\r\n  >     let p1 = new Predicate(\"CompanyName\", \"StartsWith\", \"B\");\r\n  >     let query = new EntityQuery(\"Customers\").where(p1);\r\n\r\n  or\r\n  >     let p2 = new Predicate(\"Region\", FilterQueryOp.Equals, null);\r\n  >     let query = new EntityQuery(\"Customers\").where(p2);\r\n  @param property - A property name, a nested property name or an expression involving a property name.\r\n  @param operator - \r\n  @param value - This will be treated as either a property expression or a literal depending on context.  In general,\r\n  if the value can be interpreted as a property expression it will be, otherwise it will be treated as a literal.\r\n  In most cases this works well, but you can also force the interpretation by making the value argument itself an object with a 'value'\r\n  property and an 'isLiteral' property set to either true or false.  Breeze also tries to infer the dataType of any\r\n  literal based on context, if this fails you can force this inference by making the value argument an object with a\r\n  'value' property and a 'dataType' property set to one of the breeze.DataType enumeration instances.\r\n  **/\r\n  constructor(...args: any[]) {\r\n    if (args.length === 0) return;\r\n    if (!(this instanceof Predicate)) {\r\n      return new Predicate(...<any>args);\r\n    }\r\n    return Predicate.create(...<any>args);\r\n  }\r\n\r\n  /**\r\n  Same as using the ctor.\r\n  >      // so \r\n  >      let p = Predicate.create(a, b, c);\r\n  >      // is the same as \r\n  >      let p = new Predicate(a, b, c); \r\n  @param property -  A property name, a nested property name or an expression involving a property name.\r\n  @param operator - the filter query operator.\r\n  @param value - This will be treated as either a property expression or a literal depending on context.  In general,\r\n  if the value can be interpreted as a property expression it will be, otherwise it will be treated as a literal.\r\n  In most cases this works well, but you can also force the interpretation by making the value argument itself an object with a 'value'\r\n  property and an 'isLiteral' property set to either true or false.  Breeze also tries to infer the dataType of any\r\n  literal based on context, if this fails you can force this inference by making the value argument an object with a\r\n  'value' property and a 'dataType' property set to one of the breeze.DataType enumeration instances.\r\n  **/\r\n  static create(...args: any[]) {\r\n    // can be called from std javascript without new ( legacy )\r\n\r\n    // empty ctor is used by all subclasses.\r\n    if (args.length === 0) return new Predicate();\r\n    if (args.length === 1) {\r\n      // possibilities:\r\n      //      Predicate([ aPredicate ]) or  Predicate([\"freight\", \">\", 100]) - an array\r\n      //      Predicate(aPredicate) - a predicate\r\n      //      Predicate( \"freight gt 100\" }  // passthru ( i.e. maybe an odata string) - a string\r\n      //      Predicate( { freight: { \">\": 100 } }) - an object\r\n      let arg = arguments[0];\r\n      if (Array.isArray(arg)) {\r\n        if (arg.length === 1) {\r\n          // recurse\r\n          return new Predicate(arg[0]);\r\n        } else {\r\n          return createPredicateFromArray(arg);\r\n        }\r\n      } else if (arg instanceof Predicate) {\r\n        return arg;\r\n      } else if (typeof arg === 'string') {\r\n        return new PassthruPredicate(arg);\r\n      } else {\r\n        return createPredicateFromObject(arg);\r\n      }\r\n    } else {\r\n      // 2 possibilities\r\n      //      Predicate(\"freight\", \">\", 100\");\r\n      //      Predicate(\"orders\", \"any\", \"freight\",  \">\", 950);\r\n      return createPredicateFromArray(args);\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _validate(entityType: EntityType | undefined, usesNameOnServer?: boolean) {\r\n    // noop here;\r\n  }\r\n\r\n  /**\r\n  Creates a 'composite' Predicate by 'and'ing a set of specified Predicates together.\r\n  >      let dt = new Date(88, 9, 12);\r\n  >      let p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\r\n  >      let p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\r\n  >      let p3 = Predicate.create(\"Freight\", \">\", 100);\r\n  >      let newPred = Predicate.and(p1, p2, p3);\r\n\r\n  or\r\n  >      let preds = [p1, p2, p3];\r\n  >      let newPred = Predicate.and(preds);\r\n  @param predicates - multiple Predicates or an array of Predicate. \r\n  Any null or undefined values passed in will be automatically filtered out before constructing the composite predicate.\r\n  **/\r\n  static and(...args: any[]) {\r\n    let pred = new AndOrPredicate(\"and\", args);\r\n    // TODO removed below\r\n    // return undefined if empty\r\n    // return pred.op && pred;\r\n    return pred;\r\n  }\r\n\r\n  /**\r\n  Creates a 'composite' Predicate by 'or'ing a set of specified Predicates together.\r\n  >      let dt = new Date(88, 9, 12);\r\n  >      let p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\r\n  >      let p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\r\n  >      let p3 = Predicate.create(\"Freight\", \">\", 100);\r\n  >      let newPred = Predicate.or(p1, p2, p3);\r\n\r\n  or\r\n  >      let preds = [p1, p2, p3];\r\n  >      let newPred = Predicate.or(preds);\r\n  @param predicates - multiple Predicates or an array of Predicate.\r\n  Any null or undefined values passed in will be automatically filtered out before constructing the composite predicate.\r\n  **/\r\n  static or(...args: any[]) {\r\n    let pred = new AndOrPredicate(\"or\", args);\r\n    // return pred.op && pred;\r\n    return pred;\r\n  }\r\n\r\n  /**\r\n  Creates a 'composite' Predicate by 'negating' a specified predicate.\r\n  >      let p1 = Predicate.create(\"Freight\", \"gt\", 100);\r\n  >      let not_p1 = Predicate.not(p1);\r\n\r\n  This can also be accomplished using the 'instance' version of the 'not' method\r\n  >      let not_p1 = p1.not();\r\n\r\n  Both of which would be the same as\r\n  >      let not_p1 = Predicate.create(\"Freight\", \"le\", 100);\r\n  **/\r\n  static not(pred: Predicate) {\r\n    return pred.not();\r\n  }\r\n\r\n  // TODO: determine if/where this is used.\r\n  // static extendBinaryPredicateFn(opMap: IOpMap, visitorFn: any) {\r\n  //   let baseVisitorFn = toFunctionVisitor.binaryPredicate;\r\n  //   for (let op in (opMap || {})) {\r\n  //     let config = opMap[op];\r\n  //     config.visitorFn = visitorFn;\r\n  //     updateAliasMap(BinaryPredicate.prototype.aliasMap, op, opMap[op]);\r\n  //   }\r\n  //   if (!toFunctionVisitor.isExtended) {\r\n  //     toFunctionVisitor.binaryPredicate = function (context, expr1Val, expr2Val) {\r\n  //       let visitorFn = this.aliasMap[this.op.key].visitorFn;\r\n  //       if (visitorFn) {\r\n  //         return visitorFn(context, expr1Val, expr2Val);\r\n  //       } else {\r\n  //         return baseVisitorFn(context, expr1Val, expr2Val);\r\n  //       }\r\n  //     };\r\n  //     toFunctionVisitor.isExtended = true;\r\n  //   }\r\n  // };\r\n\r\n\r\n  /**\r\n  'And's this Predicate with one or more other Predicates and returns a new 'composite' Predicate\r\n  >      let dt = new Date(88, 9, 12);\r\n  >      let p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\r\n  >      let p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\r\n  >      let p3 = Predicate.create(\"Freight\", \">\", 100);\r\n  >      let newPred = p1.and(p2, p3);\r\n\r\n  or\r\n  >      let preds = [p2, p3];\r\n  >      let newPred = p1.and(preds);\r\n\r\n  The 'and' method is also used to write \"fluent\" expressions\r\n  >      let p4 = Predicate.create(\"ShipCity\", \"startswith\", \"F\")\r\n  >        .and(\"Size\", \"gt\", 2000);\r\n  @param predicates - multiple Predicates or an array of Predicates. \r\n  Any null or undefined values passed in will be automatically filtered out before constructing the composite predicate.\r\n  **/\r\n  and(...args: any[]) {\r\n    return new AndOrPredicate(\"and\", argsForAndOrPredicates(this, args));\r\n  }\r\n\r\n  /**\r\n  'Or's this Predicate with one or more other Predicates and returns a new 'composite' Predicate\r\n  >      let dt = new Date(88, 9, 12);\r\n  >      let p1 = Predicate.create(\"OrderDate\", \"ne\", dt);\r\n  >      let p2 = Predicate.create(\"ShipCity\", \"startsWith\", \"C\");\r\n  >      let p3 = Predicate.create(\"Freight\", \">\", 100);\r\n  >      let newPred = p1.or(p2, p3);\r\n\r\n  or\r\n  >      let preds = [p2, p3];\r\n  >      let newPred = p1.or(preds);\r\n\r\n  The 'or' method is also used to write \"fluent\" expressions\r\n  >      let p4 = Predicate.create(\"ShipCity\", \"startswith\", \"F\")\r\n  >        .or(\"Size\", \"gt\", 2000);\r\n  @param predicates - multiple Predicates or an array of Predicates. \r\n  Any null or undefined values passed in will be automatically filtered out before constructing the composite predicate.\r\n  **/\r\n  or(...args: any[]) {\r\n    return new AndOrPredicate(\"or\", argsForAndOrPredicates(this, args));\r\n  }\r\n\r\n  /**\r\n  Returns the 'negated' version of this Predicate\r\n  >      let p1 = Predicate.create(\"Freight\", \"gt\", 100);\r\n  >      let not_p1 = p1.not();\r\n\r\n  This can also be accomplished using the 'static' version of the 'not' method\r\n  >      let p1 = Predicate.create(\"Freight\", \"gt\", 100);\r\n  >      let not_p1 = Predicate.not(p1);\r\n\r\n  which would be the same as\r\n  >      let not_p1 = Predicate.create(\"Freight\", \"le\", 100);\r\n  **/\r\n  not() {\r\n    return new UnaryPredicate(\"not\", this);\r\n  }\r\n\r\n  //\r\n  toJSON() {\r\n    // toJSON ( part of js standard - takes a single parameter\r\n    // that is either \"\" or the name of the property being serialized.\r\n    return this.toJSONExt({ entityType: this._entityType });\r\n  }\r\n\r\n  /** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n  @adapter (see [[IUriBuilderAdapter]])    \r\n  @hidden @internal \r\n  */\r\n  toJSONExt(context: VisitContext) {\r\n    return this.visit(context, toJSONVisitor);\r\n  }\r\n\r\n  /** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n  @adapter (see [[IUriBuilderAdapter]])    \r\n  @hidden @internal \r\n  */\r\n  toFunction(context: VisitContext) {\r\n    return this.visit(context, toFunctionVisitor);\r\n  }\r\n\r\n  toString() {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  /** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n  @adapter (see [[IUriBuilderAdapter]])    \r\n  @hidden @internal \r\n  */\r\n  visit(context: VisitContext, visitor?: Visitor) {\r\n    if (core.isEmpty(context)) {\r\n      context = { entityType: undefined };\r\n    } else if (context instanceof EntityType) {\r\n      context = { entityType: context };\r\n    } else if (!core.hasOwnProperty(context, \"entityType\")) {\r\n      throw new Error(\"All visitor methods must be called with a context object containing at least an 'entityType' property\");\r\n    }\r\n\r\n    if (visitor) {\r\n      context.visitor = visitor;\r\n    }\r\n    let tVisitor = visitor || context.visitor!;\r\n    let fn = tVisitor[this.visitorMethodName];\r\n    if (fn == null) {\r\n      throw new Error(\"Unable to locate method: \" + this.visitorMethodName + \" on visitor\");\r\n    }\r\n\r\n    let entityType = context.entityType;\r\n    // don't bother validating if already done so ( or if no _validate method\r\n    if (this._validate && (entityType == null || this._entityType !== entityType)) {\r\n      // don't need to capture return value because validation fn doesn't have one.\r\n      // TODO: this was old code\r\n      // this._validate(entityType, context.usesNameOnServer);\r\n      this._validate(entityType, context.toNameOnServer);\r\n      this._entityType = entityType;\r\n    }\r\n\r\n    return fn.call(this, context);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _initialize(visitorMethodName: string, opMap: { [key: string]: { aliases?: string[], isFunction?: boolean }} = {}) {\r\n    this.visitorMethodName = visitorMethodName;\r\n    let aliasMap = this.aliasMap = {};\r\n    for (let op in opMap ) {\r\n      updateAliasMap(aliasMap, op, opMap[op] as Op);\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _resolveOp(op: string | QueryOp, okIfNotFound?: boolean) {\r\n    let opStr = (typeof op === \"string\") ? op : op.operator;\r\n    let result = this.aliasMap[opStr.toLowerCase()];\r\n    if (!result && !okIfNotFound) {\r\n      throw new Error(\"Unable to resolve operator: \" + opStr);\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nfunction createPredicateFromArray(arr: any[]) {\r\n  // TODO: assert that length of the array should be > 3\r\n  // Needs to handle:\r\n  //      [ \"freight\", \">\", 100\"];\r\n  //      [ \"orders\", \"any\", \"freight\",  \">\", 950 ]\r\n  //      [ \"orders\", \"and\", anotherPred ]\r\n  //      [ \"orders\", \"and\", [ \"freight, \">\", 950 ]]\r\n  let json = {};\r\n  let value = {};\r\n  json[arr[0]] = value;\r\n  let op = arr[1];\r\n  op = op.operator || op;  // incoming op will be either a string or a FilterQueryOp\r\n  if (arr.length === 3) {\r\n    value[op] = arr[2];\r\n  } else {\r\n    value[op] = createPredicateFromArray(arr.splice(2));\r\n  }\r\n  return createPredicateFromObject(json);\r\n}\r\n\r\nfunction createPredicateFromObject(obj: Object) {\r\n  if (obj instanceof Predicate) return obj;\r\n\r\n  if (typeof obj !== 'object') {\r\n    throw new Error(\"Unable to convert to a Predicate: \" + obj);\r\n  }\r\n  let keys = Object.keys(obj);\r\n  let preds = keys.map(function (key) {\r\n    return createPredicateFromKeyValue(key, obj[key]);\r\n  });\r\n  return (preds.length === 1) ? preds[0] : new AndOrPredicate(\"and\", preds);\r\n}\r\n\r\nfunction createPredicateFromKeyValue(key: string, value: any): Predicate {\r\n  // { and: [a,b] } key='and', value = [a,b]\r\n  if (AndOrPredicate.prototype._resolveOp(key, true)) {\r\n    return new AndOrPredicate(key, value);\r\n  }\r\n\r\n  // { not: a }  key= 'not', value = a\r\n  if (UnaryPredicate.prototype._resolveOp(key, true)) {\r\n    return new UnaryPredicate(key, value);\r\n  }\r\n\r\n  if ((typeof value !== 'object') || value == null || core.isDate(value)) {\r\n    // { foo: bar } key='foo', value = bar ( where bar is a literal i.e. a string, a number, a boolean or a date.\r\n    return new BinaryPredicate(\"eq\", key, value);\r\n  } else if (core.hasOwnProperty(value, 'value')) {\r\n    // { foo: { value: bar, dataType: xxx} } key='foo', value = bar ( where bar is an object representing a literal\r\n    return new BinaryPredicate(\"eq\", key, value);\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    throw new Error(\"Unable to resolve predicate after the phrase: \" + key);\r\n  }\r\n\r\n  let expr = key;\r\n  let keys = Object.keys(value);\r\n  let preds = keys.map(function (op) {\r\n\r\n    // { a: { any: b } op = 'any', expr=a, value[op] = b\r\n    if (AnyAllPredicate.prototype._resolveOp(op, true)) {\r\n      return new AnyAllPredicate(op, expr, value[op]);\r\n    }\r\n\r\n    if (BinaryPredicate.prototype._resolveOp(op, true)) {\r\n      // { a: { \">\": b }} op = \">\", expr=a, value[op] = b\r\n      return new BinaryPredicate(op, expr, value[op]);\r\n    } else if (core.hasOwnProperty(value[op], 'value')) {\r\n      // { a: { \">\": { value: b, dataType: 'Int32' }} expr = a value[op] = { value: b, dataType: 'Int32' }\r\n      return new BinaryPredicate(\"eq\", expr, value[op]);\r\n    }\r\n\r\n    let msg = core.formatString(\"Unable to resolve predicate after the phrase: '%1' for operator: '%2'  and value: '%3'\", expr, op, value[op]);\r\n    throw new Error(msg);\r\n\r\n  });\r\n\r\n  return (preds.length === 1) ? preds[0] : new AndOrPredicate(\"and\", preds);\r\n}\r\n\r\nfunction argsForAndOrPredicates(obj: {}, args: any[]) {\r\n  let preds = args[0];\r\n  if (preds instanceof Predicate) {\r\n    preds = core.arraySlice(args);\r\n  } else if (!Array.isArray(preds)) {\r\n    preds = [new Predicate(core.arraySlice(args))];\r\n  }\r\n  return [obj].concat(preds);\r\n}\r\n\r\nfunction updateAliasMap(aliasMap: OpMap, opStr: string, op: Op) {\r\n  let key = opStr.toLowerCase();\r\n  op.key = key;\r\n  aliasMap[key] = op;\r\n\r\n  op.aliases && op.aliases.forEach((alias: any) => {\r\n    aliasMap[alias.toLowerCase()] = op;\r\n  });\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden @internal \r\n*/\r\nclass PassthruPredicate extends Predicate {\r\n  value: any;\r\n  constructor(value: any) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  // _validate = core.noop;\r\n}\r\nError['x'] = PassthruPredicate.prototype._initialize('passthruPredicate');\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport class UnaryPredicate extends Predicate {\r\n  op: Op;\r\n  pred: Predicate;\r\n  constructor(op: string | QueryOp, ...args: any[]) {\r\n    super();\r\n    this.op = this._resolveOp(op);\r\n    this.pred = new Predicate(args);\r\n  }\r\n\r\n  _validate(entityType: EntityType, usesNameOnServer?: boolean) {\r\n    this.pred._validate(entityType, usesNameOnServer);\r\n  }\r\n}\r\n\r\nError['x'] = UnaryPredicate.prototype._initialize('unaryPredicate', {\r\n  'not': { aliases: ['!', '~'] },\r\n});\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport class BinaryPredicate extends Predicate {\r\n  op: Op;\r\n  expr1Source: any;\r\n  expr2Source: any;\r\n  expr1?: PredicateExpression;\r\n  expr2?: PredicateExpression;\r\n  constructor(op: string | QueryOp, expr1: any, expr2: any) {\r\n    super();\r\n    // 5 public props op, expr1Source, expr2Source, expr1, expr2\r\n    this.op = this._resolveOp(op);\r\n    this.expr1Source = expr1;\r\n    this.expr2Source = expr2;\r\n    // this.expr1 and this.expr2 won't be\r\n    // determined until validate is run\r\n  }\r\n\r\n\r\n  _validate(entityType: EntityType, usesNameOnServer?: boolean) {\r\n    let expr1Context = { entityType: entityType, usesNameOnServer: usesNameOnServer };\r\n    this.expr1 = createExpr(this.expr1Source, expr1Context);\r\n    if (this.expr1 == null) {\r\n      throw new Error(\"Unable to validate 1st expression: \" + this.expr1Source);\r\n    }\r\n    if (this.expr1 instanceof LitExpr) {\r\n      // lhs must be either a property or a function.\r\n      throw new Error(\"The left hand side of a binary predicate cannot be a literal expression, it must be a valid property or functional predicate expression: \" + this.expr1Source);\r\n    }\r\n\r\n    if (this.op.key === 'in' && !Array.isArray(this.expr2Source)) {\r\n      throw new Error(\"The 'in' operator requires that its right hand argument be an array\");\r\n    }\r\n    let expr2Context = core.extend(expr1Context, { isRHS: true, dataType: this.expr1.dataType });\r\n    this.expr2 = createExpr(this.expr2Source, expr2Context);\r\n    if (this.expr2 == null) {\r\n      throw new Error(\"Unable to validate 2nd expression: \" + this.expr2Source);\r\n    }\r\n\r\n    if (this.expr1.dataType == null) {\r\n      this.expr1.dataType = this.expr2.dataType;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\nError['x'] = BinaryPredicate.prototype._initialize('binaryPredicate', {\r\n  'eq': {\r\n    aliases: [\"==\", \"equals\"]\r\n  },\r\n  'ne': {\r\n    aliases: [\"!=\", \"~=\", \"notequals\"]\r\n  },\r\n  'lt': {\r\n    aliases: [\"<\", \"lessthan\"]\r\n  },\r\n  'le': {\r\n    aliases: [\"<=\", \"lessthanorequal\"]\r\n  },\r\n  'gt': {\r\n    aliases: [\">\", \"greaterthan\"]\r\n  },\r\n  'ge': {\r\n    aliases: [\">=\", \"greaterthanorequal\"]\r\n  },\r\n  'startswith': {\r\n    isFunction: true\r\n  },\r\n  'endswith': {\r\n    isFunction: true\r\n  },\r\n  'contains': {\r\n    aliases: [\"substringof\"],\r\n    isFunction: true\r\n  },\r\n  'in': {\r\n\r\n  }\r\n});\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden\r\n*/\r\nexport class AndOrPredicate extends Predicate {\r\n  op: Op;\r\n  preds: Predicate[];\r\n  constructor(op: string | QueryOp, preds: any[]) {\r\n    super();\r\n    this.op = this._resolveOp(op);\r\n    if (preds.length === 1 && Array.isArray(preds[0])) {\r\n      preds = preds[0];\r\n    }\r\n    this.preds = preds.filter(function (pred) {\r\n      return pred != null;\r\n    }).map(function (pred) {\r\n      return new Predicate(pred);\r\n    });\r\n    // TODO: this was removed - test if really needed.\r\n    // if (this.preds.length === 0) {\r\n    //   // marker for an empty predicate\r\n    //   this.op = null;\r\n    // }\r\n    if (this.preds.length === 1) {\r\n      return this.preds[0] as AndOrPredicate; // HACK: this.preds[0] is actually NOT a AndOrPredicate but some other kind of pred.\r\n    }\r\n  }\r\n\r\n  _validate(entityType: EntityType, usesNameOnServer?: boolean) {\r\n    this.preds.forEach((pred) => {\r\n      pred._validate(entityType, usesNameOnServer);\r\n    });\r\n  }\r\n}\r\n\r\nError['x'] = AndOrPredicate.prototype._initialize(\"andOrPredicate\", {\r\n  'and': { aliases: ['&&'] },\r\n  'or': { aliases: ['||'] }\r\n} );\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport class AnyAllPredicate extends Predicate {\r\n  op: Op;\r\n  /** @internal */\r\n  expr: PredicateExpression;\r\n  exprSource: string;\r\n  pred: Predicate;\r\n  // 4 public props: op, exprSource, expr, pred\r\n  constructor(op: string | QueryOp, expr: string, pred: any) {\r\n    super();\r\n    this.op = this._resolveOp(op);\r\n    this.exprSource = expr;\r\n    // this.expr will not be resolved until validate is called\r\n    this.pred = new Predicate(pred);\r\n  }\r\n\r\n  _validate(entityType: EntityType, usesNameOnServer: boolean) {\r\n    this.expr = createExpr(this.exprSource, { entityType: entityType, usesNameOnServer: usesNameOnServer } as ExpressionContext);\r\n    // can't really know the predicateEntityType unless the original entity type was known.\r\n    if (entityType == null || entityType.isAnonymous) {\r\n      this.expr.dataType = undefined;\r\n    }\r\n    this.pred._validate(this.expr.dataType as EntityType | undefined, usesNameOnServer);\r\n  }\r\n\r\n}\r\n\r\nError['x'] = AnyAllPredicate.prototype._initialize(\"anyAllPredicate\", {\r\n  'any': { aliases: ['some'] },\r\n  'all': { aliases: [\"every\"] }\r\n});\r\n\r\n/** @hidden */\r\nexport class PredicateExpression {\r\n  visitorMethodName: string;\r\n  visit: Function; // TODO\r\n  dataType?: DataType | StructuralType;\r\n  constructor(visitorMethodName: string) {\r\n    this.visitorMethodName = visitorMethodName;\r\n    // give expressions the Predicate prototype method\r\n    this.visit = Predicate.prototype.visit;\r\n  }\r\n\r\n  // default impls - may/will be overridden be subclass expressions\r\n  _validate(entityType: EntityType | undefined, usesNameOnServer?: boolean) {\r\n    // noop;\r\n  }\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport class LitExpr extends PredicateExpression {\r\n  value: any;\r\n  dataType: DataType;\r\n  hasExplicitDataType: boolean;\r\n  // 2 public props: value, dataType\r\n  constructor(value: any, dataType: string | DataType | undefined, hasExplicitDataType?: boolean) {\r\n    super(\"litExpr\");\r\n    // dataType may come is an a string\r\n    let dt1 = resolveDataType(dataType);\r\n    // if the DataType comes in as Undefined this means\r\n    // that we should NOT attempt to parse it but just leave it alone\r\n    // for now - this is usually because it is part of a Func expr.\r\n    // TODO: cast as DataType seems to be needed by early version of TypeDoc - may be able to remove later\r\n    let dt2 = (dt1 || DataType.fromValue(value)) as DataType;\r\n\r\n    if (dt2.parse) {\r\n      if (Array.isArray(value)) {\r\n        this.value = value.map((v) => { return dt2.parse!(v, typeof v); });\r\n      } else {\r\n        this.value = dt2.parse(value, typeof value);\r\n      }\r\n    } else {\r\n      this.value = value;\r\n    }\r\n    this.dataType = dt2;\r\n    this.hasExplicitDataType = !!hasExplicitDataType;\r\n  }\r\n\r\n  toString() {\r\n    return \" LitExpr - value: \" + this.value.toString() + \" dataType: \" + this.dataType.toString();\r\n  }\r\n\r\n}\r\n\r\nfunction resolveDataType(dataType?: DataType | string) {\r\n  if (dataType == null) return dataType;\r\n  // if (DataType.contains(dataType)) {\r\n  if (dataType instanceof DataType) {\r\n    return dataType;\r\n  }\r\n  if (typeof dataType === 'string') {\r\n    let dt = DataType.fromName(dataType) as DataType;\r\n    if (dt) return dt;\r\n    throw new Error(\"Unable to resolve a dataType named: \" + dataType);\r\n  }\r\n\r\n  throw new Error(\"The dataType parameter passed into this literal expression is not a 'DataType'\" + dataType);\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n*/\r\nexport class PropExpr extends PredicateExpression {\r\n  propertyPath: string;\r\n  dataType: DataType | StructuralType;\r\n  // two public props: propertyPath, dateType\r\n  constructor(propertyPath: string) {\r\n    super('propExpr');\r\n    this.propertyPath = propertyPath;\r\n    //this.dataType = DataType.Undefined;\r\n    // this.dataType resolved after validate ( if not on an anon type }\r\n  }\r\n\r\n  toString() {\r\n    return \" PropExpr - \" + this.propertyPath;\r\n  }\r\n\r\n  _validate(entityType: EntityType | undefined, usesNameOnServer?: boolean) {\r\n\r\n    if (entityType == null || entityType.isAnonymous) return;\r\n    let props = entityType.getPropertiesOnPath(this.propertyPath, null, false);\r\n\r\n    if (!props) {\r\n      let msg = core.formatString(\"Unable to resolve propertyPath.  EntityType: '%1'   PropertyPath: '%2'\", entityType.name, this.propertyPath);\r\n      throw new Error(msg);\r\n    }\r\n    // get the last property\r\n    let prop = props[props.length - 1];\r\n    if (prop instanceof DataProperty) {\r\n      this.dataType = prop.dataType;\r\n    } else {\r\n      this.dataType = prop.entityType;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IUriBuilderAdapter]] implementation. \r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden @dynamic\r\n*/\r\nexport class FnExpr extends PredicateExpression {\r\n  fnName: string;\r\n  exprs: PredicateExpression[];\r\n  localFn: any; // TODO:\r\n  dataType: DataType;\r\n  constructor(fnName: string, exprs: PredicateExpression[]) {\r\n    super('fnExpr');\r\n    // 4 public props: fnName, exprs, localFn, dataType\r\n    this.fnName = fnName;\r\n    this.exprs = exprs;\r\n    let qf = FnExpr._funcMap[fnName];\r\n    if (qf == null) {\r\n      throw new Error(\"Unknown function: \" + fnName);\r\n    }\r\n    this.localFn = qf.fn;\r\n    this.dataType = qf.dataType;\r\n  }\r\n\r\n  toString() {\r\n    let exprStr = this.exprs.map(function (expr) {\r\n      expr.toString();\r\n    }).toString();\r\n    return \"FnExpr - \" + this.fnName + \"(\" + exprStr + \")\";\r\n  }\r\n\r\n  _validate(entityType: EntityType | undefined, usesNameOnServer?: boolean) {\r\n    this.exprs.forEach(function (expr) {\r\n      expr._validate(entityType, usesNameOnServer);\r\n    });\r\n  }\r\n\r\n  static _funcMap = {\r\n    toupper: {\r\n      fn: function (source: string) {\r\n        return source.toUpperCase();\r\n      }, dataType: DataType.String\r\n    },\r\n    tolower: {\r\n      fn: function (source: string) {\r\n        return source.toLowerCase();\r\n      }, dataType: DataType.String\r\n    },\r\n    substring: {\r\n      fn: function (source: string, pos: number, length: number) {\r\n        return source.substring(pos, length);\r\n      }, dataType: DataType.String\r\n    },\r\n    substringof: {\r\n      fn: function (find: string, source: string) {\r\n        return source.indexOf(find) >= 0;\r\n      }, dataType: DataType.Boolean\r\n    },\r\n    length: {\r\n      fn: function (source: any) {\r\n        return source.length;\r\n      }, dataType: DataType.Int32\r\n    },\r\n    trim: {\r\n      fn: function (source: string) {\r\n        return source.trim();\r\n      }, dataType: DataType.String\r\n    },\r\n    concat: {\r\n      fn: function (s1: string, s2: string) {\r\n        return s1.concat(s2);\r\n      }, dataType: DataType.String\r\n    },\r\n    replace: {\r\n      fn: function (source: string, find: string, replace: string) {\r\n        return source.replace(find, replace);\r\n      }, dataType: DataType.String\r\n    },\r\n    startswith: {\r\n      fn: function (source: string, find: string) {\r\n        return core.stringStartsWith(source, find);\r\n      }, dataType: DataType.Boolean\r\n    },\r\n    endswith: {\r\n      fn: function (source: string, find: string) {\r\n        return core.stringEndsWith(source, find);\r\n      }, dataType: DataType.Boolean\r\n    },\r\n    indexof: {\r\n      fn: function (source: any, find: any) {\r\n        return source.indexOf(find);\r\n      }, dataType: DataType.Int32\r\n    },\r\n    round: {\r\n      fn: function (source: number) {\r\n        return Math.round(source);\r\n      }, dataType: DataType.Int32\r\n    },\r\n    ceiling: {\r\n      fn: function (source: number) {\r\n        return Math.ceil(source);\r\n      }, dataType: DataType.Int32\r\n    },\r\n    floor: {\r\n      fn: function (source: number) {\r\n        return Math.floor(source);\r\n      }, dataType: DataType.Int32\r\n    },\r\n    second: {\r\n      fn: function (source: Date) {\r\n        return source.getSeconds();\r\n      }, dataType: DataType.Int32\r\n    },\r\n    minute: {\r\n      fn: function (source: Date) {\r\n        return source.getMinutes();\r\n      }, dataType: DataType.Int32\r\n    },\r\n    day: {\r\n      fn: function (source: Date) {\r\n        return source.getDate();\r\n      }, dataType: DataType.Int32\r\n    },\r\n    month: {\r\n      fn: function (source: Date) {\r\n        return source.getMonth() + 1;\r\n      }, dataType: DataType.Int32\r\n    },\r\n    year: {\r\n      fn: function (source: Date) {\r\n        return source.getFullYear();\r\n      }, dataType: DataType.Int32\r\n    }\r\n  };\r\n\r\n}\r\n\r\n// TODO: add dataTypes for the args next - will help to infer other dataTypes.\r\n\r\n\r\nlet RX_IDENTIFIER = /^[a-z_][\\w.$]*$/i;\r\n// comma delimited expressions ignoring commas inside of both single and double quotes.\r\nlet RX_COMMA_DELIM1 = /('[^']*'|[^,]+)/g;\r\nlet RX_COMMA_DELIM2 = /(\"[^\"]*\"|[^,]+)/g;\r\nlet DELIM = String.fromCharCode(191);\r\n\r\nfunction createExpr(source: any, exprContext: ExpressionContext) {\r\n  let entityType = exprContext.entityType;\r\n\r\n  // the right hand side of an 'in' clause\r\n  if (Array.isArray(source)) {\r\n    if (!exprContext.isRHS) {\r\n      throw new Error(\"Array expressions are only permitted on the right hand side of a BinaryPredicate\");\r\n    }\r\n    return new LitExpr(source, exprContext.dataType!);\r\n  }\r\n\r\n  if (!(typeof source === 'string')) {\r\n    if (source != null && typeof source === 'object' && !source.toISOString) {\r\n      // source is an object but not a Date-like thing such as a JS or MomentJS Date\r\n      if (source.value === undefined) {\r\n        throw new Error(\"Unable to resolve an expression for: \" + source + \" on entityType: \" + (entityType ? entityType.name : 'null'));\r\n      }\r\n      if (source.isProperty) {\r\n        return new PropExpr(source.value);\r\n      } else {\r\n        // we want to insure that any LitExpr created this way is tagged with 'hasExplicitDataType: true'\r\n        // because we want to insure that if we roundtrip thru toJSON that we don't\r\n        // accidentally reinterpret this node as a PropExpr.\r\n        // return new LitExpr(source.value, source.dataType || context.dataType, !!source.dataType);\r\n        return new LitExpr(source.value, source.dataType || exprContext.dataType, true);\r\n      }\r\n    } else {\r\n      return new LitExpr(source, exprContext.dataType);\r\n    }\r\n  }\r\n\r\n  if (exprContext.isRHS) {\r\n    if (entityType == null || entityType.isAnonymous) {\r\n      // if entityType is unknown then assume that the rhs is a literal\r\n      return new LitExpr(source, exprContext.dataType);\r\n    } else {\r\n      return parseLitOrPropExpr(source, exprContext);\r\n    }\r\n  } else {\r\n    let regex = /\\([^()]*\\)/;\r\n    let m: RegExpExecArray | null;\r\n    let tokens: string[] = [];\r\n    let i = 0;\r\n    while (m = regex.exec(source)) {\r\n      let token = m[0];\r\n      tokens.push(token);\r\n      let repl = DELIM + i++;\r\n      source = source.replace(token, repl);\r\n    }\r\n\r\n    let expr = parseExpr(source, tokens, exprContext);\r\n    expr._validate(entityType, exprContext.usesNameOnServer);\r\n    return expr;\r\n  }\r\n}\r\n\r\nfunction parseExpr(source: string, tokens: string[], exprContext: ExpressionContext): PredicateExpression {\r\n  let parts = source.split(DELIM);\r\n  if (parts.length === 1) {\r\n    return parseLitOrPropExpr(parts[0], exprContext);\r\n  } else {\r\n    return parseFnExpr(source, parts, tokens, exprContext);\r\n  }\r\n}\r\n\r\nfunction parseLitOrPropExpr(value: string, exprContext: ExpressionContext): PredicateExpression {\r\n  value = value.trim();\r\n  // value is either a string, a quoted string, a number, a bool value, or a date\r\n  // if a string ( not a quoted string) then this represents a property name ( 1st ) or a lit string ( 2nd)\r\n  let firstChar = value.substr(0, 1);\r\n  let isQuoted = (firstChar === \"'\" || firstChar === '\"') && value.length > 1 && value.substr(value.length - 1) === firstChar;\r\n  if (isQuoted) {\r\n    let unquotedValue = value.substr(1, value.length - 2);\r\n    return new LitExpr(unquotedValue, exprContext.dataType || DataType.String);\r\n  } else {\r\n    let entityType = exprContext.entityType;\r\n    // TODO: get rid of isAnonymous below when we get the chance.\r\n    if (entityType == null || entityType.isAnonymous) {\r\n      // this fork will only be reached on the LHS of an BinaryPredicate -\r\n      // a RHS expr cannot get here with an anon type\r\n      return new PropExpr(value);\r\n    } else {\r\n      let mayBeIdentifier = RX_IDENTIFIER.test(value);\r\n      if (mayBeIdentifier) {\r\n        // if (entityType.getProperty(value, false) != null) {\r\n        if (entityType.getPropertiesOnPath(value, null, false) != null) {\r\n          return new PropExpr(value);\r\n        }\r\n      }\r\n    }\r\n    // we don't really know the datatype here because even though it comes in as a string\r\n    // its usually a string BUT it might be a number  i.e. the \"1\" or the \"2\" from an expr\r\n    // like \"toUpper(substring(companyName, 1, 2))\"\r\n    return new LitExpr(value, exprContext.dataType);\r\n  }\r\n}\r\n\r\nfunction parseFnExpr(source: string, parts: string[], tokens: string[], exprContext: ExpressionContext) {\r\n  try {\r\n    let fnName = parts[0].trim().toLowerCase();\r\n\r\n    let argSource = tokens[parts[1]].trim() as string;\r\n    if (argSource.substr(0, 1) === \"(\") {\r\n      argSource = argSource.substr(1, argSource.length - 2);\r\n    }\r\n    let commaMatchStr = source.indexOf(\"'\") >= 0 ? RX_COMMA_DELIM1 : RX_COMMA_DELIM2;\r\n    let args = argSource.match(commaMatchStr);\r\n    let newContext = core.extend({}, exprContext) as ExpressionContext;\r\n    // a dataType of Undefined on a context basically means not to try parsing\r\n    // the value if the expr is a literal\r\n    newContext.dataType = DataType.Undefined;\r\n    newContext.isFnArg = true;\r\n    let exprs = args!.map(function (a) {\r\n      return parseExpr(a, tokens, newContext);\r\n    });\r\n    return new FnExpr(fnName, exprs);\r\n  } catch (e) {\r\n    // TODO: removed old code here\r\n    // return null;\r\n    // and replaced with \r\n    throw e;\r\n  }\r\n}\r\n\r\n// toFunctionVisitor\r\n\r\nlet toFunctionVisitor = {\r\n\r\n  isExtended: false,\r\n\r\n  passthruPredicate: function (this: PassthruPredicate) {\r\n    throw new Error(\"Cannot execute an PassthruPredicate expression against the local cache: \" + this.value);\r\n  },\r\n\r\n  unaryPredicate: function (this: UnaryPredicate, context: VisitContext) {\r\n    let predFn = this.pred.visit(context);\r\n    switch (this.op.key) {\r\n      case \"not\":\r\n        return function (entity: any) {\r\n          return !predFn(entity);\r\n        };\r\n      default:\r\n        throw new Error(\"Invalid unary operator:\" + this.op.key);\r\n    }\r\n  },\r\n\r\n  binaryPredicate: function (this: BinaryPredicate, context: VisitContext) {\r\n    let expr1Fn = this.expr1!.visit(context);\r\n    let expr2Fn = this.expr2!.visit(context);\r\n    let dataType = this.expr1!.dataType || this.expr2!.dataType;\r\n    let lqco = context.entityType!.metadataStore.localQueryComparisonOptions;\r\n    let predFn = getBinaryPredicateFn(this, dataType as DataType, lqco);\r\n    if (predFn == null) {\r\n      throw new Error(\"Invalid binaryPredicate operator:\" + this.op.key);\r\n    }\r\n    return function (entity: Entity) {\r\n      return predFn!(expr1Fn(entity), expr2Fn(entity));\r\n    };\r\n  },\r\n\r\n  andOrPredicate: function (this: AndOrPredicate, context: VisitContext) {\r\n    let predFns = this.preds.map((pred) => {\r\n      return pred.visit(context);\r\n    });\r\n    switch (this.op!.key) {\r\n      case \"and\":\r\n        return function (entity: any) {\r\n          let result = predFns.reduce(function (prev, cur) {\r\n            return prev && cur(entity);\r\n          }, true);\r\n          return result;\r\n        };\r\n      case \"or\":\r\n        return function (entity: any) {\r\n          let result = predFns.reduce(function (prev, cur) {\r\n            return prev || cur(entity);\r\n          }, false);\r\n          return result;\r\n        };\r\n      default:\r\n        throw new Error(\"Invalid boolean operator:\" + this.op!.key);\r\n    }\r\n  },\r\n\r\n  anyAllPredicate: function (this: AnyAllPredicate, context: VisitContext) {\r\n    let exprFn = this.expr.visit(context);\r\n    let newContext = core.extend({}, context) as VisitContext;\r\n    newContext.entityType = this.expr.dataType as EntityType;\r\n    let predFn = this.pred.visit(newContext);\r\n    let anyAllPredFn = getAnyAllPredicateFn(this.op);\r\n    return function (entity: any) {\r\n      return anyAllPredFn(exprFn(entity), predFn);\r\n    };\r\n  },\r\n\r\n  litExpr: function (this: LitExpr) {\r\n    let value = this.value;\r\n    return function (entity: any) {\r\n      return value;\r\n    };\r\n  },\r\n\r\n  propExpr: function (this: PropExpr) {\r\n    let propertyPath = this.propertyPath;\r\n    let properties = propertyPath.split('.');\r\n    if (properties.length === 1) {\r\n      return function (entity: any) {\r\n        return entity.getProperty(propertyPath);\r\n      };\r\n    } else {\r\n      return function (entity: Entity) {\r\n        return EntityAspect.getPropertyPathValue(entity, properties);\r\n      };\r\n    }\r\n  },\r\n\r\n  fnExpr: function (this: FnExpr, context: ExpressionContext) {\r\n    let exprFns = this.exprs.map(function (expr) {\r\n      return expr.visit(context);\r\n    });\r\n    let that = this;\r\n    return function (entity: any) {\r\n      let values = exprFns.map(function (exprFn) {\r\n        let value = exprFn(entity);\r\n        return value;\r\n      });\r\n      let result = that.localFn.apply(null, values);\r\n      return result;\r\n    };\r\n  }\r\n\r\n};\r\n\r\nfunction getAnyAllPredicateFn(op: Op): (v1: any[], v2: any) => boolean {\r\n  switch (op.key) {\r\n    case \"any\":\r\n      return function (v1, v2) {\r\n        return v1.some(function (v) {\r\n          return v2(v);\r\n        });\r\n      };\r\n    case \"all\":\r\n      return function (v1, v2) {\r\n        return v1.every(function (v) {\r\n          return v2(v);\r\n        });\r\n      };\r\n    default:\r\n      throw new Error(\"Unknown operator: \" + op.key);\r\n  }\r\n}\r\n\r\nfunction getBinaryPredicateFn(binaryPredicate: BinaryPredicate, dataType: DataType, lqco: LocalQueryComparisonOptions) {\r\n  let op = binaryPredicate.op;\r\n  let mc = DataType.getComparableFn(dataType);\r\n  let predFn: (v1: any, v2: any) => boolean;\r\n  switch (op.key) {\r\n    case 'eq':\r\n      predFn = function (v1, v2) {\r\n        if (v1 && typeof v1 === 'string') {\r\n          return stringEquals(v1, v2, lqco);\r\n        } else {\r\n          return mc(v1) === mc(v2);\r\n        }\r\n      };\r\n      break;\r\n    case 'ne':\r\n      predFn = function (v1, v2) {\r\n        if (v1 && typeof v1 === 'string') {\r\n          return !stringEquals(v1, v2, lqco);\r\n        } else {\r\n          return mc(v1) !== mc(v2);\r\n        }\r\n      };\r\n      break;\r\n    case 'gt':\r\n      predFn = function (v1, v2) {\r\n        return mc(v1) > mc(v2);\r\n      };\r\n      break;\r\n    case 'ge':\r\n      predFn = function (v1, v2) {\r\n        return mc(v1) >= mc(v2);\r\n      };\r\n      break;\r\n    case 'lt':\r\n      predFn = function (v1, v2) {\r\n        return mc(v1) < mc(v2);\r\n      };\r\n      break;\r\n    case 'le':\r\n      predFn = function (v1, v2) {\r\n        return mc(v1) <= mc(v2);\r\n      };\r\n      break;\r\n    case 'startswith':\r\n      predFn = function (v1, v2) {\r\n        return stringStartsWith(v1, v2, lqco);\r\n      };\r\n      break;\r\n    case 'endswith':\r\n      predFn = function (v1, v2) {\r\n        return stringEndsWith(v1, v2, lqco);\r\n      };\r\n      break;\r\n    case 'contains':\r\n      predFn = function (v1, v2) {\r\n        return stringContains(v1, v2, lqco);\r\n      };\r\n      break;\r\n    case 'in':\r\n      predFn = function (v1: any, v2: any[]) {\r\n        v1 = mc(v1);\r\n        v2 = v2.map(function (v) { return mc(v); });\r\n        return v2.indexOf(v1) >= 0;\r\n      };\r\n      break;\r\n    default:\r\n      return null;\r\n  }\r\n  return predFn;\r\n}\r\n\r\nfunction stringEquals(a: any, b: any, lqco: LocalQueryComparisonOptions) {\r\n  if (b == null) return false;\r\n  if (typeof b !== 'string') {\r\n    b = b.toString();\r\n  }\r\n  if (lqco.usesSql92CompliantStringComparison) {\r\n    a = (a || \"\").trim();\r\n    b = (b || \"\").trim();\r\n  }\r\n  if (!lqco.isCaseSensitive) {\r\n    a = (a || \"\").toLowerCase();\r\n    b = (b || \"\").toLowerCase();\r\n  }\r\n  return a === b;\r\n}\r\n\r\nfunction stringStartsWith(a: any, b: any, lqco: LocalQueryComparisonOptions) {\r\n  if (!lqco.isCaseSensitive) {\r\n    a = (a || \"\").toLowerCase();\r\n    b = (b || \"\").toLowerCase();\r\n  }\r\n  return core.stringStartsWith(a, b);\r\n}\r\n\r\nfunction stringEndsWith(a: any, b: any, lqco: LocalQueryComparisonOptions) {\r\n  if (!lqco.isCaseSensitive) {\r\n    a = (a || \"\").toLowerCase();\r\n    b = (b || \"\").toLowerCase();\r\n  }\r\n  return core.stringEndsWith(a, b);\r\n}\r\n\r\nfunction stringContains(a: any, b: any, lqco: LocalQueryComparisonOptions) {\r\n  if (!lqco.isCaseSensitive) {\r\n    a = (a || \"\").toLowerCase();\r\n    b = (b || \"\").toLowerCase();\r\n  }\r\n  return a.indexOf(b) >= 0;\r\n}\r\n\r\n// toJSONVisitor\r\n\r\nlet toJSONVisitor = {\r\n\r\n  passthruPredicate: function (this: PassthruPredicate) {\r\n    return this.value;\r\n  },\r\n\r\n  unaryPredicate: function (this: UnaryPredicate, context: VisitContext) {\r\n    let predVal = this.pred.visit(context);\r\n    let json = {};\r\n    json[this.op.key] = predVal;\r\n    return json;\r\n  },\r\n\r\n  binaryPredicate: function (this: BinaryPredicate, context: VisitContext) {\r\n    let expr1Val = this.expr1!.visit(context);\r\n    let expr2Val = this.expr2!.visit(context);\r\n    let json = {};\r\n    if (this.expr2 instanceof PropExpr) {\r\n      expr2Val = { value: expr2Val, isProperty: true };\r\n    }\r\n    if (this.op.key === \"eq\") {\r\n      json[expr1Val] = expr2Val;\r\n    } else {\r\n      let value = {};\r\n      json[expr1Val] = value;\r\n      value[this.op.key] = expr2Val;\r\n    }\r\n    return json;\r\n  },\r\n\r\n  andOrPredicate: function (this: AndOrPredicate, context: VisitContext) {\r\n    let predVals = this.preds.map(function (pred) {\r\n      return pred.visit(context);\r\n    });\r\n    if (!predVals || !predVals.length) {\r\n      return {};\r\n    }\r\n    let json: Object | undefined;\r\n    // normalizeAnd clauses if possible.\r\n    // passthru predicate will appear as string and their 'ands' can't be 'normalized'\r\n    if (this.op!.key === 'and' && predVals.length === 2 && !predVals.some((v) => typeof(v) === 'string')) {\r\n      // normalize 'and' clauses - will return null if can't be combined.\r\n      json = predVals.reduce(combine);\r\n    }\r\n    if (json == null) {\r\n      json = {};\r\n      json[this.op!.key!] = predVals;\r\n    }\r\n    return json;\r\n  },\r\n\r\n  anyAllPredicate: function (this: AnyAllPredicate, context: VisitContext) {\r\n    let exprVal = this.expr.visit(context);\r\n    let newContext = core.extend({}, context) as VisitContext;\r\n    newContext.entityType = this.expr.dataType as EntityType;\r\n    let predVal = this.pred.visit(newContext);\r\n    let json = {};\r\n    let value = {};\r\n    value[this.op.key] = predVal;\r\n    json[exprVal] = value;\r\n    return json;\r\n  },\r\n\r\n  litExpr: function (this: LitExpr, context: VisitContext) {\r\n    if (this.hasExplicitDataType || context.useExplicitDataType) {\r\n      return { value: this.value, dataType: this.dataType.name };\r\n    } else {\r\n      return this.value;\r\n    }\r\n  },\r\n\r\n  propExpr: function (this: PropExpr, context: VisitContext) {\r\n    if (context.toNameOnServer) {\r\n      return context.entityType!.clientPropertyPathToServer(this.propertyPath);\r\n    } else {\r\n      return this.propertyPath;\r\n    }\r\n  },\r\n\r\n  fnExpr: function (this: FnExpr, context: VisitContext) {\r\n    let exprVals = this.exprs.map(function (expr) {\r\n      return expr.visit(context);\r\n    });\r\n    return this.fnName + \"(\" + exprVals.join(\",\") + \")\";\r\n  }\r\n\r\n};\r\n\r\nfunction combine(j1: Object, j2: Object) {\r\n  let ok = Object.keys(j2).every(function (key) {\r\n    if (j1.hasOwnProperty(key)) {\r\n      if (typeof (j2[key]) !== 'object') {\r\n        // exit and indicate that we can't combine\r\n        return false;\r\n      }\r\n      if (combine(j1[key], j2[key]) == null) {\r\n        return false;\r\n      }\r\n    } else {\r\n      j1[key] = j2[key];\r\n    }\r\n    return true;\r\n  });\r\n  return ok ? j1 : null;\r\n}\r\n\r\n\r\n\r\n\r\n","import { core, Callback, ErrorCallback } from './core';\r\nimport { assertParam } from './assert-param';\r\nimport { DataType } from './data-type';\r\nimport { EntityAspect, Entity } from './entity-aspect';\r\nimport { EntityKey } from './entity-key';\r\nimport { BreezeEnum } from './enum';\r\nimport { DataService, JsonResultsAdapter } from './data-service';\r\nimport { EntityManager, QueryResult } from './entity-manager';\r\nimport { MetadataStore, EntityType, NavigationProperty, EntityProperty } from './entity-metadata';\r\nimport { QueryOptions, MergeStrategy, FetchStrategy } from './query-options';\r\nimport { Predicate } from './predicate';\r\n\r\nexport interface RecursiveArray<T> {\r\n  [i: number]: T | RecursiveArray<T>;\r\n}\r\n\r\nexport interface EntityQueryJsonContext {\r\n  entityType?: EntityType;\r\n  propertyPathFn?: Function; // TODO\r\n  toNameOnServer?: boolean;\r\n}\r\n/**\r\nAn EntityQuery instance is used to query entities either from a remote datasource or from a local [[EntityManager]].\r\n\r\nEntityQueries are immutable - this means that all EntityQuery methods that return an EntityQuery actually create a new EntityQuery.  This means that\r\nEntityQueries can be 'modified' without affecting any current instances.\r\n@dynamic\r\n**/\r\nexport class EntityQuery {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // actually placed on prototype\r\n  // top = this.take; // TODO: consider\r\n  /** The resource name used by this query. __Read Only__ */\r\n  resourceName?: string;\r\n  /** The [[EntityType]] that is associated with the 'from' clause ( resourceName) of the query.  This is only guaranteed to be be set AFTER the query\r\n  has been executed because it depends on the [[MetadataStore]] associated with the [[EntityManager]] that the query was executed against.\r\n  This value may be null if the entityType cannot be associated with a resourceName. __Read Only__ */\r\n  fromEntityType?: EntityType;\r\n  /** The 'where' [[Predicate]] used by this query. __Read Only__ */\r\n  wherePredicate: Predicate; // TODO\r\n  /** The [[OrderByClause]] used by this query. __Read Only__ */\r\n  orderByClause?: OrderByClause;\r\n  /** The [[ExpandClause]] used by this query. __Read Only__ */\r\n  expandClause?: ExpandClause;\r\n  /** The [[SelectClause]] used by this query. __Read Only__ */\r\n  selectClause?: SelectClause;\r\n  /** The number of entities to 'skip' for this query. __Read Only__ */\r\n  skipCount?: number;\r\n  /** The number of entities to 'take' for this query. __Read Only__ */\r\n  takeCount?: number;\r\n  /** Any additional parameters that were added to the query via the 'withParameters' method. __Read Only__ */\r\n  parameters: Object;\r\n  /** Whether an inline count is returned for this query. __Read Only__ */\r\n  inlineCountEnabled: boolean;\r\n  /** Whether entity tracking has been disabled for this query. __Read Only__ */\r\n  noTrackingEnabled: boolean;\r\n  /** The [[QueryOptions]] for this query. __Read Only__  **/\r\n  // default is to get queryOptions and dataService from the entityManager.\r\n  queryOptions?: QueryOptions;\r\n  /** The [[DataService]] for this query. __Read Only__  **/\r\n  dataService?: DataService;\r\n  /** The [[EntityManager]] for this query. This may be null and can be set via the 'using' method.  **/\r\n  entityManager?: EntityManager;\r\n  /**  The entityType that will be returned by this query. \r\n  This property will only be set if the 'toType' method was called. __Read Only__ */\r\n  resultEntityType: EntityType | string;\r\n  usesNameOnServer?: boolean;\r\n\r\n  /** Constructor\r\n  >    let query = new EntityQuery(\"Customers\")\r\n\r\n  Usually this constructor will be followed by calls to filtering, ordering or selection methods\r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >        .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >        .orderBy(\"Region\");\r\n  @param resourceName - either a resource name or a serialized EntityQuery ( created by [[EntityQuery.toJSON]])\r\n  **/\r\n  constructor(resourceName?: string | Object) {\r\n    if (resourceName != null && (typeof resourceName !== 'string')) {\r\n      return fromJSON(this, resourceName);\r\n    }\r\n    // TODO: cast as string below needed for early versions of TypeDoc - but not for regular compile - check later\r\n    this.resourceName = resourceName as string;\r\n    this.fromEntityType = undefined;\r\n    this.wherePredicate = undefined;\r\n    this.orderByClause = undefined;\r\n    this.selectClause = undefined;\r\n    this.skipCount = undefined;\r\n    this.takeCount = undefined;\r\n    this.expandClause = undefined;\r\n    this.parameters = {};\r\n    this.inlineCountEnabled = false;\r\n    this.noTrackingEnabled = false;\r\n    // default is to get queryOptions and dataService from the entityManager.\r\n    // this.queryOptions = new QueryOptions();\r\n    // this.dataService = new DataService();\r\n    this.entityManager = undefined;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n  Specifies the resource to query for this EntityQuery.\r\n  >      let query = new EntityQuery()\r\n  >        .from(\"Customers\");\r\n\r\n  is the same as\r\n  >      let query = new EntityQuery(\"Customers\");\r\n  @param resourceName - The resource to query.\r\n  **/\r\n  from(resourceName: string) {\r\n    // TODO: think about allowing entityType as well\r\n    assertParam(resourceName, \"resourceName\").isString().check();\r\n    return clone(this, \"resourceName\", resourceName);\r\n  }\r\n\r\n  /**\r\n  This is a static version of the \"from\" method and it creates a 'base' entityQuery for the specified resource name.\r\n  >      let query = EntityQuery.from(\"Customers\");\r\n\r\n  is the same as\r\n  >      let query = new EntityQuery(\"Customers\");\r\n  @param resourceName - The resource to query.\r\n  **/\r\n  static from(resourceName: string) {\r\n    assertParam(resourceName, \"resourceName\").isString().check();\r\n    return new EntityQuery(resourceName);\r\n  }\r\n\r\n  /**\r\n  Specifies the top level EntityType that this query will return.  Only needed when a query returns a json result that does not include type information.\r\n  >      let query = new EntityQuery()\r\n  >        .from(\"MyCustomMethod\")\r\n  >        .toType(\"Customer\")\r\n  @param entityType - The top level EntityType that this query will return.  This method is only needed when a query returns a json result that\r\n  does not include type information.  If the json result consists of more than a simple entity or array of entities, consider using a [[JsonResultsAdapter]] instead.\r\n  **/\r\n  toType(entityType: string | EntityType) {\r\n    assertParam(entityType, \"entityType\").isString().or().isInstanceOf(EntityType).check();\r\n    return clone(this, \"resultEntityType\", entityType);\r\n  }\r\n\r\n\r\n  where(predicate?: Predicate): EntityQuery;\r\n  where(predicate: Object): EntityQuery;\r\n  where(property: string, operator: string, value: any): EntityQuery;\r\n  where(property: string, operator: FilterQueryOp, value: any): EntityQuery;\r\n  where(property: string, filterop: FilterQueryOp, property2: string, filterop2: FilterQueryOp, value: any): EntityQuery;  // for any/all clauses\r\n  where(property: string, filterop: string, property2: string, filterop2: string, value: any): EntityQuery;  // for any/all clauses\r\n  where(property: string, filterop: string, property2: string, filterop2: string, property3: string, filterop3: string, value: any): EntityQuery;  // for any/all clauses\r\n  where(anArray: RecursiveArray<string | number | FilterQueryOp | Predicate>): EntityQuery;\r\n  /**\r\n  Returns a new query with an added filter criteria; Can be called multiple times which means to 'and' with any existing\r\n  Predicate or can be called with null to clear all predicates.\r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >          .where(\"CompanyName\", \"startsWith\", \"C\");\r\n\r\n  This can also be expressed using an explicit [[FilterQueryOp]] as\r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >          .where(\"CompanyName\", FilterQueryOp.StartsWith, \"C\");\r\n\r\n  or a preconstructed [[Predicate]] may be used\r\n  >      let pred = new Predicate(\"CompanyName\", FilterQueryOp.StartsWith, \"C\");\r\n  >      let query = new EntityQuery(\"Customers\").where(pred);\r\n\r\n  Predicates are often useful when you want to combine multiple conditions in a single filter, such as\r\n  >      let pred = Predicate.create(\"CompanyName\", \"startswith\", \"C\").and(\"Region\", FilterQueryOp.Equals, null);\r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >          .where(pred);\r\n\r\n  More complicated queries can make use of nested property paths\r\n  >      let query = new EntityQuery(\"Products\")\r\n  >          .where(\"Category.CategoryName\", \"startswith\", \"S\");\r\n\r\n  or OData functions - A list of valid OData functions can be found within the [[Predicate]] documentation.\r\n  \r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >          .where(\"toLower(CompanyName)\", \"startsWith\", \"c\");\r\n\r\n  or to be even more baroque\r\n  >      let query = new EntityQuery(\"Customers\")\r\n  >          .where(\"toUpper(substring(CompanyName, 1, 2))\", FilterQueryOp.Equals, \"OM\");\r\n  @param predicate -  Can be either\r\n    - a single [[Predicate]]\r\n\r\n    - the parameters to create a 'simple' Predicate\r\n    - -  a property name, a property path with '.' as path seperators or a property expression {String}\r\n    - -  an operator - [[FilterQueryOp]] or it's string representation. Case is ignored\r\n    when if a string is provided and any string that matches one of the FilterQueryOp aliases will be accepted.\r\n    - -  a value {Object} - This will be treated as either a property expression or a literal depending on context.  \r\n    In general, if the value can be interpreted as a property expression it will be, otherwise it will be treated as a literal.\r\n    In most cases this works well, but you can also force the interpretation by making the value argument itself an object \r\n    with a 'value' property and an 'isLiteral' property set to either true or false.\r\n    Breeze also tries to infer the dataType of any literal based on context, if this fails you can force this inference by making the value argument \r\n    an object with a 'value' property and a 'dataType'property set to one of the DataType enumeration instances.\r\n\r\n    - a null or undefined ( this causes any existing where clause to be removed)\r\n  **/\r\n  where(...args: any[]) {\r\n    let wherePredicate: Predicate | undefined;\r\n    if (args.length > 0 && args[0] != null) {\r\n      wherePredicate = Predicate.create(...<any>args);\r\n      if (this.fromEntityType) wherePredicate._validate(this.fromEntityType);\r\n      if (this.wherePredicate) {\r\n        wherePredicate = this.wherePredicate.and(wherePredicate);\r\n      }\r\n    }\r\n    return clone(this, \"wherePredicate\", wherePredicate);\r\n  }\r\n\r\n\r\n  orderBy(propertyPaths?: string, isDescending?: boolean): EntityQuery;\r\n  orderBy(propertyPaths: string[], isDescending?: boolean): EntityQuery;\r\n  /**\r\n  Returns a new query that orders the results of the query by property name.  By default sorting occurs is ascending order, but sorting in descending order is supported as well.\r\n  OrderBy clauses may be chained.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderBy(\"CompanyName\");\r\n\r\n  or to sort across multiple properties\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderBy(\"Region, CompanyName\");\r\n\r\n  Nested property paths are also supported\r\n  >     let query = new EntityQuery(\"Products\")\r\n  >        .orderBy(\"Category.CategoryName\");\r\n\r\n  Sorting in descending order is supported via the addition of ' desc' to the end of any property path.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderBy(\"CompanyName desc\");\r\n\r\n  or\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderBy(\"Region desc, CompanyName desc\");\r\n  @param propertyPaths - A comma-separated (',') string of property paths or an array of property paths.\r\n  Each property path can optionally end with \" desc\" to force a descending sort order. If 'propertyPaths' is either null or omitted then all ordering is removed.\r\n  @param isDescending - If specified, overrides all of the embedded 'desc' tags in the previously specified property paths.\r\n  **/\r\n  orderBy(propertyPaths: string | string[], isDescending?: boolean) {\r\n    // propertyPaths: can pass in create(\"A.X,B\") or create(\"A.X desc, B\") or create(\"A.X desc,B\", true])\r\n    // isDesc parameter trumps isDesc in propertyName.\r\n    let orderByClause = propertyPaths == null ? null : new OrderByClause(normalizePropertyPaths(propertyPaths), isDescending);\r\n    if (this.orderByClause && orderByClause) {\r\n      orderByClause = new OrderByClause([this.orderByClause, orderByClause]);\r\n    }\r\n    return clone(this, \"orderByClause\", orderByClause);\r\n  }\r\n\r\n\r\n  orderByDesc(propertyPaths: string): EntityQuery;\r\n  orderByDesc(propertyPaths: string[]): EntityQuery;\r\n  /**\r\n  Returns a new query that orders the results of the query by property name in descending order.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderByDesc(\"CompanyName\");\r\n\r\n  or to sort across multiple properties\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .orderByDesc(\"Region, CompanyName\");\r\n\r\n  Nested property paths are also supported\r\n  >     let query = new EntityQuery(\"Products\")\r\n  >        .orderByDesc(\"Category.CategoryName\");\r\n  @param propertyPaths - A comma-separated (',') string of property paths or an array of property paths.\r\n  If 'propertyPaths' is either null or omitted then all ordering is removed.\r\n  **/\r\n  orderByDesc(propertyPaths: string | string[]) {\r\n    return this.orderBy(propertyPaths as any, true);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that selects a list of properties from the results of the original query and returns the values of just these properties. This\r\n  will be referred to as a projection.\r\n  If the result of this selection \"projection\" contains entities, these entities will automatically be added to EntityManager's cache and will\r\n  be made 'observable'.\r\n  Any simple properties, i.e. strings, numbers or dates within a projection will not be cached are will NOT be made 'observable'.\r\n  \r\n  Simple data properties can be projected\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >         .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >         .select(\"CompanyName\");\r\n\r\n  This will return an array of objects each with a single \"CompanyName\" property of type string.\r\n  A similar query could return a navigation property instead\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >        .select(\"Orders\");\r\n\r\n  where the result would be an array of objects each with a single \"Orders\" property that would itself be an array of \"Order\" entities.\r\n  Composite projections are also possible:\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >        .select(\"CompanyName, Orders\");\r\n\r\n  As well as projections involving nested property paths\r\n  >     let query = EntityQuery(\"Orders\")\r\n  >        .where(\"Customer.CompanyName\", \"startsWith\", \"C\")\r\n  >        .select(\"Customer.CompanyName, Customer, OrderDate\");\r\n  @param propertyPaths - A comma-separated (',') string of property paths or an array of property paths.\r\n  If 'propertyPaths' is either null or omitted then any existing projection on the query is removed.\r\n  **/\r\n  select(propertyPaths?: string | string[]) {\r\n    let selectClause = propertyPaths == null ? null : new SelectClause(normalizePropertyPaths(propertyPaths));\r\n    return clone(this, \"selectClause\", selectClause);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that skips the specified number of entities when returning results.\r\n  Any existing 'skip' can be cleared by calling 'skip' with no arguments.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >       .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >       .skip(5);\r\n  @param count - The number of entities to skip over. If omitted or null any existing skip count on the query is removed.\r\n  **/\r\n  skip(count?: number) {\r\n    assertParam(count, \"count\").isOptional().isNumber().check();\r\n    return clone(this, \"skipCount\", (count == null) ? null : count);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that returns only the specified number of entities when returning results. - Same as 'take'.\r\n  Any existing 'top' can be cleared by calling 'top' with no arguments.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .top(5);\r\n  @param count - The number of entities to return.\r\n  If 'count' is either null or omitted then any existing 'top' count on the query is removed.\r\n  **/\r\n  top(count?: number) {\r\n    return this.take(count);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that returns only the specified number of entities when returning results - Same as 'top'.\r\n  Any existing take can be cleared by calling take with no arguments.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .take(5);\r\n  @param count - The number of entities to return.\r\n  If 'count' is either null or omitted then any existing 'take' count on the query is removed.\r\n  **/\r\n  take(count?: number) {\r\n    assertParam(count, \"count\").isOptional().isNumber().check();\r\n    return clone(this, \"takeCount\", (count == null) ? null : count);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that will return related entities nested within its results. The expand method allows you to identify related entities, via navigation property\r\n  names such that a graph of entities may be retrieved with a single request. Any filtering occurs before the results are 'expanded'.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .where(\"CompanyName\", \"startsWith\", \"C\")\r\n  >        .expand(\"Orders\");\r\n\r\n  will return the filtered customers each with its \"Orders\" properties fully resolved.\r\n  Multiple paths may be specified by separating the paths by a ','\r\n  >     let query = new EntityQuery(\"Orders\")\r\n  >        .expand(\"Customer, Employee\")\r\n\r\n  and nested property paths my be specified as well\r\n  >     let query = new EntityQuery(\"Orders\")\r\n  >        .expand(\"Customer, OrderDetails, OrderDetails.Product\")\r\n  @param propertyPaths - A comma-separated list of navigation property names or an array of navigation property names. Each Navigation Property name can be followed\r\n  by a '.' and another navigation property name to enable identifying a multi-level relationship.\r\n  If 'propertyPaths' is either null or omitted then any existing 'expand' clause on the query is removed.\r\n  **/\r\n  expand(propertyPaths?: string | string[]) {\r\n    let expandClause = propertyPaths == null ? null : new ExpandClause(normalizePropertyPaths(propertyPaths));\r\n    return clone(this, \"expandClause\", expandClause);\r\n  }\r\n\r\n  /**\r\n  Returns a new query that includes a collection of parameters to pass to the server.\r\n  >     let query = EntityQuery.from(\"EmployeesFilteredByCountryAndBirthdate\")\r\n  >        .withParameters({ BirthDate: \"1/1/1960\", Country: \"USA\" });\r\n   \r\n  will call the 'EmployeesFilteredByCountryAndBirthdate' method on the server and pass in 2 parameters. This\r\n  query will be uri encoded as\r\n  >      {serviceApi}/EmployeesFilteredByCountryAndBirthdate?birthDate=1%2F1%2F1960&country=USA\r\n\r\n  Parameters may also be mixed in with other query criteria.\r\n  >     let query = EntityQuery.from(\"EmployeesFilteredByCountryAndBirthdate\")\r\n  >        .withParameters({ BirthDate: \"1/1/1960\", Country: \"USA\" })\r\n  >        .where(\"LastName\", \"startsWith\", \"S\")\r\n  >        .orderBy(\"BirthDate\");\r\n  @param parameters - A parameters object where the keys are the parameter names and the values are the parameter values.\r\n  **/\r\n  withParameters(parameters: Object) {\r\n    assertParam(parameters, \"parameters\").isObject().check();\r\n    return clone(this, \"parameters\", parameters);\r\n  }\r\n\r\n  /**\r\n  Returns a query with the 'inlineCount' capability either enabled or disabled.  With 'inlineCount' enabled, an additional 'inlineCount' property\r\n  will be returned with the query results that will contain the number of entities that would have been returned by this\r\n  query with only the 'where'/'filter' clauses applied, i.e. without any 'skip'/'take' operators applied. For local queries this clause is ignored.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >        .take(20)\r\n  >        .orderBy(\"CompanyName\")\r\n  >        .inlineCount(true);\r\n\r\n  will return the first 20 customers as well as a count of all of the customers in the remote store.\r\n  @param enabled - (default = true) Whether or not inlineCount capability should be enabled. If this parameter is omitted, true is assumed.\r\n  **/\r\n  inlineCount(enabled?: boolean) {\r\n    assertParam(enabled, \"enabled\").isBoolean().isOptional().check();\r\n    enabled = (enabled === undefined) ? true : !!enabled;\r\n    return clone(this, \"inlineCountEnabled\", enabled);\r\n  }\r\n\r\n  useNameOnServer(usesNameOnServer?: boolean) {\r\n    assertParam(usesNameOnServer, \"usesNameOnServer\").isBoolean().isOptional().check();\r\n    usesNameOnServer = (usesNameOnServer === undefined) ? true : !!usesNameOnServer;\r\n    return clone(this, \"usesNameOnServer\", usesNameOnServer);\r\n  }\r\n\r\n  /**\r\n  Returns a query with the 'noTracking' capability either enabled or disabled.  With 'noTracking' enabled, the results of this query\r\n  will not be coerced into entities but will instead look like raw javascript projections. i.e. simple javascript objects.\r\n  >     let query = new EntityQuery(\"Customers\")\r\n  >         .take(20)\r\n  >         .orderBy(\"CompanyName\")\r\n  >         .noTracking(true);\r\n  @param enabled - (default = true) Whether or not the noTracking capability should be enabled. If this parameter is omitted, true is assumed.\r\n  **/\r\n  noTracking(enabled?: boolean) {\r\n    assertParam(enabled, \"enabled\").isBoolean().isOptional().check();\r\n    enabled = (enabled === undefined) ? true : !!enabled;\r\n    return clone(this, \"noTrackingEnabled\", enabled);\r\n  }\r\n\r\n  using(obj: EntityManager): EntityQuery;\r\n  using(obj: DataService): EntityQuery;\r\n  using(obj: JsonResultsAdapter): EntityQuery;\r\n  using(obj: QueryOptions): EntityQuery;\r\n  using(obj: MergeStrategy): EntityQuery;\r\n  using(obj: FetchStrategy): EntityQuery;\r\n  /**\r\n  Returns a copy of this EntityQuery with the specified [[EntityManager]], [[DataService]],\r\n  [[JsonResultsAdapter]], [[MergeStrategy]] or [[FetchStrategy]] applied.\r\n  >      // 'using' can be used to return a new query with a specified EntityManager.\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\")\r\n  >        .using(em);\r\n\r\n  or with a specified [[MergeStrategy]]\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\")\r\n  >        .using(MergeStrategy.PreserveChanges);\r\n\r\n  or with a specified [[FetchStrategy]]\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\")\r\n  >        .using(FetchStrategy.FromLocalCache);\r\n  @param obj - The object to update in creating a new EntityQuery from an existing one.\r\n  **/\r\n  using(obj: any) {\r\n    if (!obj) return this;\r\n    let eq = clone(this);\r\n    processUsing(eq, {\r\n      \"entityManager\": null,\r\n      \"dataService\": null,\r\n      \"queryOptions\": null,\r\n      \"fetchStrategy\": (eq: EntityQuery, val: any) => {\r\n        eq.queryOptions = (eq.queryOptions || new QueryOptions()).using(val);\r\n      },\r\n      \"mergeStrategy\": (eq: EntityQuery, val: any) => {\r\n        eq.queryOptions = (eq.queryOptions || new QueryOptions()).using(val);\r\n      },\r\n      \"jsonResultsAdapter\": (eq: EntityQuery, val: any) => {\r\n        eq.dataService = (eq.dataService || new DataService()).using({ jsonResultsAdapter: val });\r\n      }\r\n    }, obj);\r\n    return eq;\r\n  }\r\n\r\n  /**\r\n  Executes this query.  This method requires that an EntityManager has been previously specified via the \"using\" method.\r\n  \r\n  This method can be called using a 'promises' syntax ( recommended)\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\").using(em);\r\n  >      query.execute().then( function(data) {\r\n  >          ... query results processed here\r\n  >      }).catch( function(err) {\r\n  >          ... query failure processed here\r\n  >      });\r\n\r\n  or with callbacks\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\").using(em);\r\n  >      query.execute(\r\n  >        function(data) {\r\n  >                    let orders = data.results;\r\n  >                    ... query results processed here\r\n  >                },\r\n  >        function(err) {\r\n  >                    ... query failure processed here\r\n  >                });\r\n\r\n  Either way this method is the same as calling the EntityManager 'execute' method.\r\n  >      let em = new EntityManager(serviceName);\r\n  >      let query = new EntityQuery(\"Orders\");\r\n  >      em.executeQuery(query).then( function(data) {\r\n  >         let orders = data.results;\r\n  >          ... query results processed here\r\n  >      }).catch( function(err) {\r\n  >         ... query failure processed here\r\n  >      });\r\n\r\n  @param callback -  Function called on success.\r\n  @param errorCallback - Function called on failure.\r\n  @return Promise\r\n  **/\r\n  execute(callback?: Callback, errorCallback?: ErrorCallback): Promise<QueryResult> {\r\n    if (!this.entityManager) {\r\n      throw new Error(\"An EntityQuery must have its EntityManager property set before calling 'execute'\");\r\n    }\r\n    return this.entityManager.executeQuery(this, callback, errorCallback);\r\n  }\r\n\r\n  /**\r\n  Executes this query against the local cache.  This method requires that an EntityManager have been previously specified via the \"using\" method.\r\n  >      // assume em is an entityManager already filled with order entities;\r\n  >      let query = new EntityQuery(\"Orders\").using(em);\r\n  >      let orders = query.executeLocally();\r\n\r\n  Note that calling this method is the same as calling [[EntityManager.executeQueryLocally]].\r\n  **/\r\n  executeLocally() {\r\n    if (!this.entityManager) {\r\n      throw new Error(\"An EntityQuery must have its EntityManager property set before calling 'executeLocally'\");\r\n    }\r\n    return this.entityManager.executeQueryLocally(this);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.toJSONExt();\r\n  }\r\n\r\n  /** Typically only for use when building UriBuilderAdapters.  \r\n  @hidden @internal  \r\n  */\r\n  toJSONExt(context?: EntityQueryJsonContext) {\r\n    context = context || {};\r\n    context.entityType = context.entityType || this.fromEntityType;\r\n    context.propertyPathFn = context.toNameOnServer ? context.entityType!.clientPropertyPathToServer.bind(context.entityType) : core.identity;\r\n\r\n    let toJSONExtFn = function (v: any) {\r\n      return v ? v.toJSONExt(context) : undefined;\r\n    };\r\n    return core.toJson(this, {\r\n      \"from,resourceName\": null,\r\n      \"toType,resultEntityType\": function (v: any) {\r\n        // resultEntityType can be either a string or an entityType\r\n        return v ? (typeof v === 'string' ? v : v.name) : undefined;\r\n      },\r\n      \"where,wherePredicate\": toJSONExtFn,\r\n      \"orderBy,orderByClause\": toJSONExtFn,\r\n      \"select,selectClause\": toJSONExtFn,\r\n      \"expand,expandClause\": toJSONExtFn,\r\n      \"skip,skipCount\": null,\r\n      \"take,takeCount\": null,\r\n      parameters: function (v: any) {\r\n        return core.isEmpty(v) ? undefined : v;\r\n      },\r\n      \"inlineCount,inlineCountEnabled\": false,\r\n      \"noTracking,noTrackingEnabled\": false,\r\n      queryOptions: null\r\n    });\r\n\r\n  }\r\n\r\n  static fromEntities(entity: Entity): EntityQuery;\r\n  static fromEntities(entities: Entity[]): EntityQuery;\r\n  /**\r\n  Static method that creates an EntityQuery that will allow 'requerying' an entity or a collection of entities by primary key. This can be useful\r\n  to force a requery of selected entities, or to restrict an existing collection of entities according to some filter.\r\n\r\n  Works for a single entity or an array of entities of the SAME type.\r\n  Does not work for an array of entities of different types.\r\n  >      // assuming 'customers' is an array of 'Customer' entities retrieved earlier.\r\n  >      let customersQuery = EntityQuery.fromEntities(customers);\r\n\r\n  The resulting query can, of course, be extended\r\n  >      // assuming 'customers' is an array of 'Customer' entities retrieved earlier.\r\n  >      let customersQuery = EntityQuery.fromEntities(customers)\r\n  >        .where(\"Region\", FilterQueryOp.NotEquals, null);\r\n\r\n  Single entities can requeried as well.\r\n  >      // assuming 'customer' is a 'Customer' entity retrieved earlier.\r\n  >      let customerQuery = EntityQuery.fromEntities(customer);\r\n\r\n  will create a query that will return an array containing a single customer entity.\r\n  @param entities - The entities for which we want to create an EntityQuery.\r\n  **/\r\n  static fromEntities(entities: Entity | Entity[]) {\r\n    assertParam(entities, \"entities\").isEntity().or().isNonEmptyArray().isEntity().check();\r\n    let ents = (Array.isArray(entities)) ? entities : [entities];\r\n\r\n    let firstEntity = ents[0];\r\n    let type = firstEntity.entityType;\r\n    if (ents.some(function (e) {\r\n      return e.entityType !== type;\r\n    })) {\r\n      throw new Error(\"All 'fromEntities' must be the same type; at least one is not of type \" +\r\n        type.name);\r\n    }\r\n    let q = new EntityQuery(type.defaultResourceName);\r\n    let preds = ents.map(function (entity) {\r\n      return buildPredicate(entity);\r\n    });\r\n    let pred = Predicate.or(preds);\r\n    q = q.where(pred);\r\n    let em = firstEntity.entityAspect.entityManager;\r\n    if (em) {\r\n      q = q.using(em);\r\n    }\r\n    return q;\r\n  }\r\n\r\n  /**\r\n  Creates an EntityQuery for the specified [[EntityKey]].\r\n  >      let empType = metadataStore.getEntityType(\"Employee\");\r\n  >      let entityKey = new EntityKey(empType, 1);\r\n  >      let query = EntityQuery.fromEntityKey(entityKey);\r\n\r\n  or\r\n  >      // 'employee' is a previously queried employee\r\n  >      let entityKey = employee.entityAspect.getKey();\r\n  >      let query = EntityQuery.fromEntityKey(entityKey);\r\n  @param entityKey - The [[EntityKey]] for which a query will be created.\r\n  **/\r\n  static fromEntityKey(entityKey: EntityKey) {\r\n    assertParam(entityKey, \"entityKey\").isInstanceOf(EntityKey).check();\r\n    let q = new EntityQuery(entityKey.entityType.defaultResourceName);\r\n    let pred = buildKeyPredicate(entityKey);\r\n    q = q.where(pred).toType(entityKey.entityType);\r\n    return q;\r\n  }\r\n\r\n  /**\r\n  Creates an EntityQuery for the specified entity and [[NavigationProperty]].\r\n  >      // 'employee' is a previously queried employee\r\n  >      let ordersNavProp = employee.entityType.getProperty(\"Orders\");\r\n  >      let query = EntityQuery.fromEntityNavigation(employee, ordersNavProp);\r\n\r\n  will return a query for the \"Orders\" of the specified 'employee'.\r\n  @param entity - The Entity whose navigation property will be queried.\r\n  @param navigationProperty - The [[NavigationProperty]] or name of the NavigationProperty to be queried.\r\n  **/\r\n  static fromEntityNavigation = function (entity: Entity, navigationProperty: NavigationProperty | string) {\r\n    assertParam(entity, \"entity\").isEntity().check();\r\n    let navProperty = entity.entityType._checkNavProperty(navigationProperty);\r\n    let q = new EntityQuery(navProperty.entityType.defaultResourceName);\r\n    let pred = buildNavigationPredicate(entity, navProperty);\r\n    if (pred == null) {\r\n      throw new Error(\"Unable to create a NavigationQuery for navigationProperty: \" + navProperty.name );\r\n    }\r\n    q = q.where(pred);\r\n    let em = entity.entityAspect.entityManager;\r\n    return em ? q.using(em) : q;\r\n  };\r\n\r\n  // protected methods\r\n  /** @hidden @internal */\r\n  _getFromEntityType(metadataStore: MetadataStore, throwErrorIfNotFound?: boolean) {\r\n    // Uncomment next two lines if we make this method public.\r\n    // assertParam(metadataStore, \"metadataStore\").isInstanceOf(MetadataStore).check();\r\n    // assertParam(throwErrorIfNotFound, \"throwErrorIfNotFound\").isBoolean().isOptional().check();\r\n    let entityType = this.fromEntityType;\r\n    if (entityType) return entityType;\r\n\r\n    let resourceName = this.resourceName;\r\n    if (!resourceName) {\r\n      throw new Error(\"There is no resourceName for this query\");\r\n    }\r\n\r\n    if (metadataStore.isEmpty()) {\r\n      if (throwErrorIfNotFound) {\r\n        throw new Error(\"There is no metadata available for this query. \" +\r\n          \"Are you querying the local cache before you've fetched metadata?\");\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    let entityTypeName = metadataStore.getEntityTypeNameForResourceName(resourceName);\r\n    if (entityTypeName) {\r\n      entityType = metadataStore._getStructuralType(entityTypeName) as EntityType;\r\n    } else {\r\n      entityType = this._getToEntityType(metadataStore, true);\r\n    }\r\n\r\n    if (!entityType) {\r\n      if (throwErrorIfNotFound) {\r\n        throw new Error(core.formatString(\"Cannot find an entityType for resourceName: '%1'. \"\r\n          + \" Consider adding an 'EntityQuery.toType' call to your query or \"\r\n          + \"calling the MetadataStore.setEntityTypeForResourceName method to register an entityType for this resourceName.\", resourceName));\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    this.fromEntityType = entityType;\r\n    return entityType;\r\n\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _getToEntityType(metadataStore: MetadataStore, skipFromCheck?: boolean): EntityType | undefined {\r\n    // skipFromCheck is to avoid recursion if called from _getFromEntityType;\r\n    if (this.resultEntityType instanceof EntityType) {\r\n      return this.resultEntityType;\r\n    } else if (this.resultEntityType) {\r\n      // resultEntityType is a string\r\n      this.resultEntityType = metadataStore._getStructuralType(this.resultEntityType, false) as EntityType;\r\n      return this.resultEntityType;\r\n    } else {\r\n      // resolve it, if possible, via the resourceName\r\n      // do not cache this value in this case\r\n      // cannot determine the resultEntityType if a selectClause is present.\r\n      // return skipFromCheck ? null : (!this.selectClause) && this._getFromEntityType(metadataStore, false);\r\n      if (skipFromCheck || this.selectClause) {\r\n        return undefined;\r\n      } else {\r\n        this._getFromEntityType(metadataStore, false);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  // for testing\r\n  _toUri(em: EntityManager) {\r\n    let ds = DataService.resolve([em.dataService]);\r\n    return ds!.uriBuilder!.buildUri(this, em.metadataStore);\r\n  }\r\n\r\n}\r\nEntityQuery.prototype._$typeName = \"EntityQuery\";\r\n\r\n// private functions\r\n\r\nfunction fromJSON(eq: EntityQuery, json: Object) {\r\n  core.toJson(json, {\r\n    \"resourceName,from\": null,\r\n    // just the name comes back and will be resolved later\r\n    \"resultEntityType,toType\": null,\r\n    \"wherePredicate,where\": function (v: any) {\r\n      return v ? new Predicate(v) : undefined;\r\n    },\r\n    \"orderByClause,orderBy\": function (v: any) {\r\n      return v ? new OrderByClause(v) : undefined;\r\n    },\r\n    \"selectClause,select\": function (v: any) {\r\n      return v ? new SelectClause(v) : undefined;\r\n    },\r\n    \"expandClause,expand\": function (v: any) {\r\n      return v ? new ExpandClause(v) : undefined;\r\n    },\r\n    \"skipCount,skip\": null,\r\n    \"takeCount,take\": null,\r\n    parameters: function (v: any) {\r\n      return core.isEmpty(v) ? undefined : v;\r\n    },\r\n    \"inlineCountEnabled,inlineCount\": false,\r\n    \"noTrackingEnabled,noTracking\": false,\r\n    queryOptions: function (v: any) {\r\n      return v ? QueryOptions.fromJSON(v) : undefined;\r\n    }\r\n  }, eq);\r\n  return eq;\r\n}\r\n\r\nfunction clone(eq: EntityQuery, propName?: string, value?: any) {\r\n  // immutable queries mean that we don't need to clone if no change in value.\r\n  if (propName) {\r\n    if (eq[propName] === value) return eq;\r\n  }\r\n  // copying QueryOptions is safe because they are are immutable;\r\n  let copy = core.extend(new EntityQuery(), eq, [\r\n    \"resourceName\",\r\n    \"fromEntityType\",\r\n    \"wherePredicate\",\r\n    \"orderByClause\",\r\n    \"selectClause\",\r\n    \"skipCount\",\r\n    \"takeCount\",\r\n    \"expandClause\",\r\n    \"inlineCountEnabled\",\r\n    \"noTrackingEnabled\",\r\n    \"usesNameOnServer\",\r\n    \"queryOptions\",\r\n    \"entityManager\",\r\n    \"dataService\",\r\n    \"resultEntityType\"\r\n  ]) as EntityQuery;\r\n  copy.parameters = core.extend({}, eq.parameters);\r\n  if (propName) {\r\n    copy[propName] = value;\r\n  }\r\n  return copy;\r\n}\r\n\r\nfunction processUsing(eq: EntityQuery, map: Object, value: any, propertyName?: string) {\r\n  let typeName = value._$typeName || ((value instanceof BreezeEnum) && (value.constructor as any).name);\r\n  let key = typeName && typeName.substr(0, 1).toLowerCase() + typeName.substr(1);\r\n  if (propertyName && key !== propertyName) {\r\n    throw new Error(\"Invalid value for property: \" + propertyName);\r\n  }\r\n  if (key) {\r\n    let fn = map[key];\r\n    if (fn === undefined) {\r\n      throw new Error(\"Invalid config property: \" + key);\r\n    } else if (fn === null) {\r\n      eq[key] = value;\r\n    } else {\r\n      fn(eq, value);\r\n    }\r\n  } else {\r\n    core.objectForEach(value, (propName, val) => {\r\n      processUsing(eq, map, val, propName);\r\n    });\r\n  }\r\n}\r\n\r\nfunction normalizePropertyPaths(propertyPaths: string | string[]) {\r\n  assertParam(propertyPaths, \"propertyPaths\").isOptional().isString().or().isArray().isString().check();\r\n  if (typeof propertyPaths === 'string') {\r\n    propertyPaths = propertyPaths.split(\",\");\r\n  }\r\n\r\n  propertyPaths = propertyPaths.map(function (pp) {\r\n    return pp.trim();\r\n  });\r\n  return propertyPaths;\r\n}\r\n\r\nfunction buildPredicate(entity: Entity) {\r\n  let entityType = entity.entityType;\r\n  let predParts = entityType.keyProperties.map(function (kp) {\r\n    return Predicate.create(kp.name, FilterQueryOp.Equals, entity.getProperty(kp.name));\r\n  });\r\n  let pred = Predicate.and(predParts);\r\n  return pred;\r\n}\r\n\r\nfunction buildKeyPredicate(entityKey: EntityKey) {\r\n  let keyProps = entityKey.entityType.keyProperties;\r\n  let preds = core.arrayZip(keyProps, entityKey.values, function (kp, v) {\r\n    return Predicate.create(kp.name, FilterQueryOp.Equals, v);\r\n  });\r\n  let pred = Predicate.and(preds);\r\n  return pred;\r\n}\r\n\r\nfunction buildNavigationPredicate(entity: Entity, navigationProperty: NavigationProperty) {\r\n  if (navigationProperty.isScalar) {\r\n    if (navigationProperty.foreignKeyNames.length === 0) return null;\r\n    let relatedKeyValues = navigationProperty.foreignKeyNames.map((fkName) => {\r\n      return entity.getProperty(fkName);\r\n    });\r\n    let entityKey = new EntityKey(navigationProperty.entityType, relatedKeyValues);\r\n    return buildKeyPredicate(entityKey);\r\n  } else {\r\n    let inverseNp = navigationProperty.inverse;\r\n    let foreignKeyNames = inverseNp ? inverseNp.foreignKeyNames : navigationProperty.invForeignKeyNames;\r\n    if (foreignKeyNames.length === 0) return null;\r\n    let keyValues = entity.entityAspect.getKey().values;\r\n    let predParts = core.arrayZip(foreignKeyNames, keyValues, (fkName, kv) => {\r\n      return Predicate.create(fkName, FilterQueryOp.Equals, kv);\r\n    });\r\n    return Predicate.and(predParts);\r\n  }\r\n}\r\n\r\n/** Base class for BooleanQueryOp and FilterQueryOp */\r\nexport interface QueryOp {\r\n  /** The operator for this enum. */\r\n  operator: string;\r\n}\r\n\r\n\r\n\r\n/**\r\nFilterQueryOp is an 'Enum' containing all of the valid  [[Predicate]]\r\nfilter operators for an [[EntityQuery]].\r\n**/\r\nexport class FilterQueryOp extends BreezeEnum implements QueryOp {\r\n  /** The operator for this enum. */\r\n  operator: string;\r\n\r\n  /** Aliases: \"eq\", \"==\" **/\r\n  static Equals = new FilterQueryOp({ operator: \"eq\" });\r\n  /**  Aliases: \"ne\", \"!=\"  **/\r\n  static NotEquals = new FilterQueryOp({ operator: \"ne\" });\r\n  /** Aliases: \"gt\", \">\"   **/\r\n  static GreaterThan = new FilterQueryOp({ operator: \"gt\" });\r\n  /** Aliases: \"lt\", \"<\"  **/\r\n  static LessThan = new FilterQueryOp({ operator: \"lt\" });\r\n  /**  Aliases: \"ge\", \">=\"  **/\r\n  static GreaterThanOrEqual = new FilterQueryOp({ operator: \"ge\" });\r\n  /**  Aliases: \"le\", \"<=\"  **/\r\n  static LessThanOrEqual = new FilterQueryOp({ operator: \"le\" });\r\n  /**  String operation: Is a string a substring of another string.  Aliases: \"substringof\"   **/\r\n  static Contains = new FilterQueryOp({ operator: \"contains\" });\r\n  /** No aliases */\r\n  static StartsWith = new FilterQueryOp({ operator: \"startswith\" });\r\n  /** No aliases */\r\n  static EndsWith = new FilterQueryOp({ operator: \"endswith\" });\r\n  /**  Aliases: \"some\"  **/\r\n  static Any = new FilterQueryOp({ operator: \"any\" });\r\n  /**  Aliases: \"every\"  **/\r\n  static All = new FilterQueryOp({ operator: \"all\" });\r\n  /** No aliases */\r\n  static In = new FilterQueryOp({ operator: \"in\" });\r\n  /** No aliases */\r\n  static IsTypeOf = new FilterQueryOp({ operator: \"isof\" });\r\n}\r\nFilterQueryOp.prototype._$typeName = \"FilterQueryOp\";\r\nError['x'] = FilterQueryOp.resolveSymbols();\r\n\r\n\r\n/**\r\n BooleanQueryOp is an 'Enum' containing all of the valid  boolean\r\noperators for an [[EntityQuery]].\r\n**/\r\nexport class BooleanQueryOp extends BreezeEnum implements QueryOp {\r\n  /** The operator for this enum. */\r\n  operator: string;\r\n\r\n  static And = new BooleanQueryOp({ operator: \"and\" });\r\n  static Or = new BooleanQueryOp({ operator: \"or\" });\r\n  static Not = new BooleanQueryOp({ operator: \"not\" });\r\n\r\n}\r\nBooleanQueryOp.prototype._$typeName = \"BooleanQueryOp\";\r\nError['x'] = BooleanQueryOp.resolveSymbols();\r\n\r\n\r\n/** For use by breeze plugin authors only.  The class is used in most [[IUriBuilderAdapter]] implementations\r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden\r\n\r\nAn OrderByClause is a description of the properties and direction that the result\r\nof a query should be sorted in.  OrderByClauses are immutable, which means that any\r\nmethod that would modify an OrderByClause actually returns a new OrderByClause.\r\n\r\nFor example for an Employee object with properties of 'Company' and 'LastName' the following would be valid expressions:\r\n>     let obc = new OrderByClause(\"Company.CompanyName, LastName\")\r\n\r\nor\r\n>     let obc = new OrderByClause(\"Company.CompanyName desc, LastName\")\r\n\r\nor\r\n>     let obc = new OrderByClause(\"Company.CompanyName, LastName\", true);\r\n*/\r\nexport class OrderByClause {\r\n  /** @hidden @internal */\r\n  items: OrderByItem[];\r\n\r\n  constructor(propertyPaths: string[] | OrderByClause[], isDesc?: boolean) {\r\n    if (propertyPaths.length === 0) {\r\n      throw new Error(\"OrderByClause cannot be empty\");\r\n    }\r\n\r\n    // you can also pass in an array of orderByClauses\r\n    if (propertyPaths[0] instanceof OrderByClause) {\r\n      let clauses = propertyPaths as OrderByClause[];\r\n      this.items = core.arrayFlatMap(clauses, c => c.items);\r\n      // this.items = Array.prototype.concat.apply(clauses[0].items, clauses.slice(1).map(core.pluck(\"items\")));\r\n      // this.items = Array.prototype.concat.apply([], clauses.map(core.pluck(\"items\")));\r\n    } else {\r\n      this.items = (propertyPaths as string[]).map(function (pp) {\r\n        return new OrderByItem(pp, isDesc);\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  validate(entityType: EntityType) {\r\n    if (entityType == null || entityType.isAnonymous) return;\r\n    this.items.forEach((item) => {\r\n      item.validate(entityType);\r\n    });\r\n  }\r\n\r\n  getComparer(entityType: EntityType) {\r\n    let orderByFuncs = this.items.map(function (obc) {\r\n      return obc.getComparer(entityType);\r\n    });\r\n    return function (entity1: any, entity2: any) {\r\n      for (let i = 0; i < orderByFuncs.length; i++) {\r\n        let result = orderByFuncs[i](entity1, entity2);\r\n        if (result !== 0) {\r\n          return result;\r\n        }\r\n      }\r\n      return 0;\r\n    };\r\n  }\r\n\r\n  toJSONExt(context: EntityQueryJsonContext) {\r\n    return this.items.map(function (item) {\r\n      return context.propertyPathFn!(item.propertyPath) + (item.isDesc ? \" desc\" : \"\");\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/** @hidden @internal */\r\nexport class OrderByItem {\r\n  propertyPath: string;\r\n  isDesc: boolean;\r\n  lastProperty: EntityProperty;\r\n\r\n  constructor(propertyPath: string, isDesc?: boolean) {\r\n    if (!(typeof propertyPath === 'string')) {\r\n      throw new Error(\"propertyPath is not a string\");\r\n    }\r\n    propertyPath = propertyPath.trim();\r\n\r\n    let parts = propertyPath.split(' ');\r\n    // parts[0] is the propertyPath; [1] would be whether descending or not.\r\n    // if (parts.length > 1 && isDesc !== true && isDesc !== false) {\r\n    if (parts.length > 1 && isDesc == null) {\r\n      isDesc = core.stringStartsWith(parts[1].toLowerCase(), \"desc\");\r\n      if (!isDesc) {\r\n        // isDesc is false but check to make sure its intended.\r\n        let isAsc = core.stringStartsWith(parts[1].toLowerCase(), \"asc\");\r\n        if (!isAsc) {\r\n          throw new Error(\"the second word in the propertyPath must begin with 'desc' or 'asc'\");\r\n        }\r\n\r\n      }\r\n    }\r\n    this.propertyPath = parts[0];\r\n    this.isDesc = isDesc || false;\r\n  }\r\n\r\n  validate(entityType: EntityType): EntityProperty | undefined {\r\n    if (entityType == null || entityType.isAnonymous) return;\r\n    // will throw an exception on bad propertyPath\r\n    this.lastProperty = entityType.getProperty(this.propertyPath, true) as EntityProperty;\r\n    return this.lastProperty;\r\n  }\r\n\r\n  getComparer(entityType: EntityType) {\r\n    let propDataType: DataType;\r\n    let isCaseSensitive: boolean;\r\n    if (!this.lastProperty) this.validate(entityType);\r\n    if (this.lastProperty) {\r\n      propDataType = (this.lastProperty as any).dataType;\r\n      isCaseSensitive = this.lastProperty.parentType.metadataStore.localQueryComparisonOptions.isCaseSensitive;\r\n    }\r\n\r\n    let propertyPath = this.propertyPath;\r\n    let isDesc = this.isDesc;\r\n\r\n    return function (entity1: any, entity2: any) {\r\n      let value1 = EntityAspect.getPropertyPathValue(entity1, propertyPath);\r\n      let value2 = EntityAspect.getPropertyPathValue(entity2, propertyPath);\r\n      let dataType = propDataType || (value1 && DataType.fromValue(value1)) || DataType.fromValue(value2);\r\n      if (dataType === DataType.String) {\r\n        if (isCaseSensitive) {\r\n          value1 = value1 || \"\";\r\n          value2 = value2 || \"\";\r\n        } else {\r\n          value1 = (value1 || \"\").toLowerCase();\r\n          value2 = (value2 || \"\").toLowerCase();\r\n        }\r\n      } else {\r\n        let normalize = DataType.getComparableFn(dataType);\r\n        value1 = normalize(value1);\r\n        value2 = normalize(value2);\r\n      }\r\n      if (value1 === value2) {\r\n        return 0;\r\n      } else if (value1 > value2 || value2 === undefined) {\r\n        return isDesc ? -1 : 1;\r\n      } else {\r\n        return isDesc ? 1 : -1;\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\n/** For use by breeze plugin authors only.  The class is used in most [[IUriBuilderAdapter]] implementations\r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n**/\r\nexport class SelectClause {\r\n  propertyPaths: string[];\r\n  /** @hidden @internal */\r\n  _pathNames: string[];\r\n\r\n  constructor(propertyPaths: string[]) {\r\n    this.propertyPaths = propertyPaths;\r\n    this._pathNames = propertyPaths.map(function (pp) {\r\n      return pp.replace(\".\", \"_\");\r\n    });\r\n  }\r\n\r\n  validate(entityType: EntityType) {\r\n    if (entityType == null || entityType.isAnonymous) return; // can't validate yet\r\n    // will throw an exception on bad propertyPath\r\n    this.propertyPaths.forEach(function (path) {\r\n      entityType.getProperty(path, true);\r\n    });\r\n  }\r\n\r\n  toFunction(/* config */) {\r\n    let that = this;\r\n    return function (entity: Entity) {\r\n      let result = {};\r\n      that.propertyPaths.forEach(function (path, i) {\r\n        result[that._pathNames[i]] = EntityAspect.getPropertyPathValue(entity, path);\r\n      });\r\n      return result;\r\n    };\r\n  }\r\n\r\n  toJSONExt(context: EntityQueryJsonContext) {\r\n    return this.propertyPaths.map(function (pp) {\r\n      return context.propertyPathFn!(pp);\r\n    });\r\n  }\r\n}\r\n\r\n/** For use by breeze plugin authors only.  The class is used in most [[IUriBuilderAdapter]] implementations\r\n@adapter (see [[IUriBuilderAdapter]])    \r\n@hidden \r\n**/\r\nexport class ExpandClause {\r\n  propertyPaths: string[];\r\n\r\n  constructor(propertyPaths: string[]) {\r\n    this.propertyPaths = propertyPaths;\r\n  }\r\n\r\n  toJSONExt(context: EntityQueryJsonContext) {\r\n    return this.propertyPaths.map(function (pp) {\r\n      return context.propertyPathFn!(pp);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { core } from './core';\r\nimport { config } from './config';\r\nimport { BreezeEvent } from './event';\r\nimport { assertParam } from './assert-param';\r\nimport { EntityState  } from './entity-state';\r\nimport { EntityAction } from './entity-action';\r\nimport { EntityType, ComplexType, DataProperty, NavigationProperty, EntityProperty } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\nimport { EntityGroup } from './entity-group';\r\nimport { EntityManager, QueryResult, QueryErrorCallback, QuerySuccessCallback } from './entity-manager';\r\nimport { Validator, ValidationError } from './validate';\r\nimport { EntityQuery } from './entity-query';\r\n\r\nexport interface Entity {\r\n  entityAspect: EntityAspect;\r\n  entityType: EntityType;\r\n  /** @internal */\r\n  getProperty?(prop: string): any;\r\n  /** @internal */\r\n  setProperty?(prop: any, value: any): void;\r\n  /** @hidden @internal */\r\n  prototype?: { _$typeName: string };\r\n  /** @hidden @internal */\r\n  _$entityType?: EntityType;\r\n}\r\n\r\nexport interface ComplexObject {\r\n  complexAspect: ComplexAspect;\r\n  complexType: ComplexType;\r\n  getProperty(prop: string): any;\r\n  setProperty(prop: any, value: any): void;\r\n  /** @hidden @internal */\r\n  prototype?: { _$typeName: string };\r\n}\r\n\r\nexport type StructuralObject = Entity | ComplexObject;\r\n\r\nexport interface PropertyChangedEventArgs {\r\n  entity: Entity;\r\n  propertyName: string | null;\r\n  parent?: StructuralObject;\r\n  property?: EntityProperty;\r\n  oldValue?: any;\r\n  newValue?: any;\r\n}\r\n\r\nexport interface ValidationErrorsChangedEventArgs {\r\n  entity: Entity;\r\n  added: ValidationError[];\r\n  removed: ValidationError[];\r\n}\r\n\r\n/**\r\nAn EntityAspect instance is associated with every attached entity and is accessed via the entity's 'entityAspect' property.\r\n\r\nThe EntityAspect itself provides properties to determine and modify the EntityState of the entity and has methods\r\nthat provide a variety of services including validation and change tracking.\r\n\r\nAn EntityAspect will almost never need to be constructed directly. You will usually get an EntityAspect by accessing\r\nan entities 'entityAspect' property.  This property will be automatically attached when an entity is created via either\r\na query, import or [[EntityManager.createEntity]] call.\r\n>      // assume order is an order entity attached to an EntityManager.\r\n>      var aspect = order.entityAspect;\r\n>      var currentState = aspect.entityState;\r\n\r\n**/\r\nexport class EntityAspect {\r\n  /** The Entity that this aspect is associated with. __Read Only__  **/\r\n  entity?: Entity;\r\n  /** The [[EntityManager]] that contains this entity. __Read Only__ **/\r\n  entityManager?: EntityManager;\r\n  /**  @hidden @internal */\r\n  entityGroup?: EntityGroup;\r\n  /** The [[EntityState]] of this entity. __Read Only__ **/\r\n  entityState: EntityState;\r\n  /**   Whether this entity is in the process of being saved. __Read Only__ */\r\n  isBeingSaved: boolean;\r\n  /** The 'original values' of this entity where they are different from the 'current values'.\r\n  This is a map where the key is a property name and the value is the 'original value' of the property. */\r\n  originalValues: {};\r\n  /**  Whether this entity has any validation errors. __Read Only__ */\r\n  hasValidationErrors: boolean;\r\n  /** Whether this entity has a temporary [[EntityKey]]. */\r\n  hasTempKey: boolean;\r\n  /** Whether this entity was created by being loaded from the database */\r\n  wasLoaded?: boolean;\r\n  /** Extra metadata about this entity such as the entity's etag.\r\n  You may extend this object with your own metadata information.\r\n  Breeze (de)serializes this object when importing/exporting the entity. **/\r\n  extraMetadata?: any;\r\n  /**\r\n  A [[BreezeEvent]] that fires whenever any of the validation errors on this entity change.\r\n  Note that this might be the removal of an error when some data on the entity is fixed.\r\n  @eventArgs - \r\n    - entity - The entity on which the validation errors are being added or removed.\r\n    - added - An array containing any newly added [[ValidationError]]s\r\n    - removed - An array containing any newly removed [[ValidationError]]s. This is those\r\n      errors that have been 'fixed'.\r\n\r\n>      // assume order is an order entity attached to an EntityManager.\r\n>      order.entityAspect.validationErrorsChanged.subscribe(\r\n>      function (validationChangeArgs) {\r\n>          // this code will be executed anytime a property value changes on the 'order' entity.\r\n>          var entity == validationChangeArgs.entity; // Note: entity === order\r\n>          var errorsAdded = validationChangeArgs.added;\r\n>          var errorsCleared = validationChangeArgs.removed;\r\n>      });\r\n  @event\r\n  **/\r\n  validationErrorsChanged: BreezeEvent<ValidationErrorsChangedEventArgs>;\r\n  /**\r\n  A [[BreezeEvent]] that fires whenever a value of one of this entity's properties change.\r\n  @eventArgs -\r\n    - entity - The entity whose property has changed.\r\n    - property - The [[DataProperty]] that changed.\r\n    - propertyName - The name of the property that changed. This value will be 'null' for operations that replace the entire entity.  This includes\r\n      queries, imports and saves that require a merge. The remaining parameters will not exist in this case either. This will actually be a \"property path\"\r\n      for any properties of a complex type.\r\n    - oldValue - The old value of this property before the change.\r\n    - newValue - The new value of this property after the change.\r\n    - parent - The immediate parent object for the changed property.  This will be a ComplexType instance as opposed to an Entity \r\n      for any complex type or nested complex type properties.\r\n\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.propertyChanged.subscribe(\r\n  >      function (propertyChangedArgs) {\r\n  >          // this code will be executed anytime a property value changes on the 'order' entity.\r\n  >          var entity = propertyChangedArgs.entity; // Note: entity === order\r\n  >          var propertyNameChanged = propertyChangedArgs.propertyName;\r\n  >          var oldValue = propertyChangedArgs.oldValue;\r\n  >          var newValue = propertyChangedArgs.newValue;\r\n  >      });\r\n  @event\r\n  **/\r\n  propertyChanged: BreezeEvent<PropertyChangedEventArgs>;\r\n\r\n  /** @hidden @internal */\r\n  _validationErrors: { [index: string]: ValidationError };\r\n  /** @hidden @internal */\r\n  _pendingValidationResult: any;\r\n  /** @hidden @internal */\r\n  _entityKey: EntityKey;\r\n  /** @hidden @internal */\r\n  _loadedNps: any[];\r\n  /** @hidden @internal */\r\n  _initialized?: boolean;\r\n  /** @hidden @internal */\r\n  _inProcess: any[]; // used in defaultPropertyInterceptor for temp storage.\r\n  /** @hidden @internal */\r\n  _inProcessEntity?: Entity; // used in EntityManager\r\n  /** @hidden @internal */\r\n  static _nullInstance = new EntityAspect(); // TODO: determine if this works\r\n  /** @hidden @internal */\r\n  constructor(entity?: Entity) {\r\n\r\n    // if called without new\r\n    // if (!(this instanceof EntityAspect)) {\r\n    //   return new EntityAspect(entity);\r\n    // }\r\n\r\n    this.entity = entity;\r\n    // TODO: keep public or not?\r\n    this.entityGroup = undefined;\r\n    this.entityManager = undefined;\r\n    this.entityState = EntityState.Detached;\r\n    this.isBeingSaved = false;\r\n    this.originalValues = {};\r\n    this.hasValidationErrors = false;\r\n    this._validationErrors = {};\r\n\r\n    // Uncomment when we implement entityAspect.isNavigationPropertyLoaded method\r\n    // this._loadedNavPropMap = {};\r\n\r\n    this.validationErrorsChanged = new BreezeEvent(\"validationErrorsChanged\", this);\r\n    this.propertyChanged = new BreezeEvent(\"propertyChanged\", this);\r\n    // in case this is the NULL entityAspect. - used with ComplexAspects that have no parent.\r\n\r\n    if (entity != null) {\r\n      // remove properties that should be on prototype but placed on class by Babel\r\n      if (!entity.entityType) { delete(entity.entityType); }\r\n      if (!entity.entityAspect) { delete(entity.entityAspect); }\r\n      entity.entityAspect = this;\r\n\r\n      // entityType should already be on the entity from 'watch'\r\n      let entityType = entity.entityType || entity._$entityType;\r\n      if (!entityType) {\r\n        let typeName = entity.prototype._$typeName;\r\n        if (!typeName) {\r\n          throw new Error(\"This entity is not registered as a valid EntityType\");\r\n        } else {\r\n          throw new Error(\"Metadata for this entityType has not yet been resolved: \" + typeName);\r\n        }\r\n      }\r\n      let entityCtor = entityType.getEntityCtor();\r\n      config.interfaceRegistry.modelLibrary.getDefaultInstance().startTracking(entity, entityCtor.prototype);\r\n    }\r\n  }\r\n\r\n  /** @hidden */\r\n  // type-guard\r\n  static isEntity(obj: StructuralObject): obj is Entity {\r\n    return (obj as any).entityAspect != null;\r\n  }\r\n\r\n  // No longer used\r\n  // static createFrom(entity: Entity): EntityAspect {\r\n  //   if (entity == null) {\r\n  //     return EntityAspect._nullInstance;\r\n  //   } else if (entity.entityAspect) {\r\n  //     return entity.entityAspect;\r\n  //   }\r\n  //   return new EntityAspect(entity);\r\n  // }\r\n\r\n  // TODO: refactor this and the instance getPropertyValue method.\r\n  /**\r\n  Returns the value of a specified 'property path' for a specified entity.\r\n\r\n  The propertyPath can be either a string delimited with '.' or a string array.  \r\n  **/\r\n  // used by EntityQuery and Predicate\r\n  static getPropertyPathValue(obj: Entity, propertyPath: string | string[]) {\r\n    let properties = Array.isArray(propertyPath) ? propertyPath : propertyPath.split(\".\");\r\n    if (properties.length === 1) {\r\n      return obj.getProperty(propertyPath as string);\r\n    } else {\r\n      let nextValue = obj;\r\n      // hack use of some to perform mapFirst operation.\r\n      properties.some((prop) => {\r\n        nextValue = nextValue.getProperty(prop);\r\n        return nextValue == null;\r\n      });\r\n      return nextValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns the [[EntityKey]] for this Entity.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var entityKey = order.entityAspect.getKey();\r\n  @param forceRefresh - (boolean=false) Forces the recalculation of the key.  This should normally be unnecessary.\r\n  @return The [[EntityKey]] associated with this Entity.\r\n  **/\r\n  getKey(forceRefresh: boolean = false) {\r\n    forceRefresh = assertParam(forceRefresh, \"forceRefresh\").isBoolean().isOptional().check(false);\r\n    if (forceRefresh || !this._entityKey) {\r\n      let entityType = this.entity!.entityType;\r\n      let keyProps = entityType.keyProperties;\r\n      let values = keyProps.map(function (p) {\r\n        return this.entity.getProperty(p.name);\r\n      }, this);\r\n      this._entityKey = new EntityKey(entityType, values);\r\n    }\r\n    return this._entityKey;\r\n  }\r\n\r\n  /**\r\n  Returns the entity to an [[EntityState]] of 'Unchanged' by committing all changes made since the entity was last queried\r\n  had 'acceptChanges' called on it.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.acceptChanges();\r\n  >      // The 'order' entity will now be in an 'Unchanged' state with any changes committed.\r\n  **/\r\n  acceptChanges() {\r\n    if (!this.entity) return;\r\n    this._checkOperation(\"acceptChanges\");\r\n    let em = this.entityManager!;\r\n    if (this.entityState.isDeleted()) {\r\n      em.detachEntity(this.entity);\r\n    } else {\r\n      this.setUnchanged();\r\n    }\r\n    em.entityChanged.publish({ entityAction: EntityAction.AcceptChanges, entity: this.entity });\r\n  }\r\n\r\n  /**\r\n  Returns the entity to an [[EntityState]] of 'Unchanged' by rejecting all changes made to it since the entity was last queried\r\n  had 'rejectChanges' called on it.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.rejectChanges();\r\n  >      // The 'order' entity will now be in an 'Unchanged' state with any changes rejected.\r\n  **/\r\n  rejectChanges() {\r\n    this._checkOperation(\"rejectChanges\");\r\n    let entity = this.entity!;\r\n    let entityManager = this.entityManager!;\r\n    // we do not want PropertyChange or EntityChange events to occur here\r\n    core.using(entityManager, \"isRejectingChanges\", true, function () {\r\n      rejectChangesCore(entity);\r\n    });\r\n    if (this.entityState.isAdded()) {\r\n      // next line is needed because the following line will cause this.entityManager -> null;\r\n      entityManager.detachEntity(entity);\r\n      // need to tell em that an entity that needed to be saved no longer does.\r\n      entityManager._notifyStateChange(entity, false);\r\n    } else {\r\n      if (this.entityState.isDeleted()) {\r\n        entityManager._linkRelatedEntities(entity);\r\n      }\r\n      this.setUnchanged();\r\n      // propertyChanged propertyName is not specified because more than one property may have changed.\r\n      this.propertyChanged.publish({ entity: entity, propertyName: null });\r\n      entityManager.entityChanged.publish({ entityAction: EntityAction.RejectChanges, entity: entity });\r\n    }\r\n  }\r\n\r\n  /**  @hidden @internal */\r\n  // TODO: rename - and use '_'; used on both EntityAspect and ComplexAspect for polymorphic reasons.\r\n  getPropertyPath(propName: string) {\r\n    return propName;\r\n  }\r\n\r\n  /**\r\n  Sets the entity to an EntityState of 'Added'.  This is NOT the equivalent of calling [[EntityManager.addEntity]]\r\n  because no key generation will occur for autogenerated keys as a result of this operation. As a result this operation can be problematic\r\n  unless you are certain that the entity being marked 'Added' does not already exist in the database and does not have an autogenerated key.\r\n  The same operation can be performed by calling [[EntityAspect.setEntityState]].\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setAdded();\r\n  >      // The 'order' entity will now be in an 'Added' state.\r\n  **/\r\n  setAdded() {\r\n    return this.setEntityState(EntityState.Added);\r\n  }\r\n\r\n  /**\r\n  Sets the entity to an EntityState of 'Unchanged'.  This is also the equivalent of calling [[EntityAspect.acceptChanges]].\r\n  The same operation can be performed by calling [[EntityAspect.setEntityState]].\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setUnchanged();\r\n  >      // The 'order' entity will now be in an 'Unchanged' state with any changes committed.\r\n  **/\r\n  setUnchanged = function () {\r\n    return this.setEntityState(EntityState.Unchanged);\r\n  };\r\n\r\n\r\n  /**\r\n  Sets the entity to an EntityState of 'Modified'.  This can also be achieved by changing the value of any property on an 'Unchanged' entity.\r\n  The same operation can be performed by calling [[EntityAspect.setEntityState]].\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setModified();\r\n  >      // The 'order' entity will now be in a 'Modified' state.\r\n  **/\r\n  setModified = function () {\r\n    return this.setEntityState(EntityState.Modified);\r\n  };\r\n\r\n  /**\r\n  Sets the entity to an EntityState of 'Deleted'.  This both marks the entity as being scheduled for deletion during the next 'Save' call\r\n  but also removes the entity from all of its related entities.\r\n  The same operation can be performed by calling [[EntityAspect.setEntityState]].\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setDeleted();\r\n  >      // The 'order' entity will now be in a 'Deleted' state and it will no longer have any 'related' entities.\r\n  **/\r\n  setDeleted = function () {\r\n    return this.setEntityState(EntityState.Deleted);\r\n  };\r\n\r\n  /**\r\n  Sets the entity to an EntityState of 'Detached'.  This removes the entity from all of its related entities, but does NOT change the EntityState of any existing entities.\r\n  The same operation can be performed by calling [[EntityAspect.setEntityState]].\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setDetached();\r\n  >      // The 'order' entity will now be in a 'Detached' state and it will no longer have any 'related' entities.\r\n  **/\r\n  setDetached = function () {\r\n    return this.setEntityState(EntityState.Detached);\r\n  };\r\n\r\n  /**\r\n  Sets the entity to the specified EntityState. See also 'setUnchanged', 'setModified', 'setDetached', etc.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      order.entityAspect.setEntityState(EntityState.Unchanged);\r\n  >      // The 'order' entity will now be in a 'Unchanged' state.\r\n  **/\r\n  setEntityState(entityState: EntityState) {\r\n    if (this.entityState === entityState) return false;\r\n    this._checkOperation(\"setEntityState\");\r\n    if (this.entityState.isDetached()) {\r\n      throw new Error(\"You cannot set the 'entityState' of an entity when it is detached - except by first attaching it to an EntityManager\");\r\n    }\r\n    let entity = this.entity!;\r\n    let em = this.entityManager!;\r\n    let needsSave = true;\r\n    if (entityState === EntityState.Unchanged) {\r\n      clearOriginalValues(entity);\r\n      delete this.hasTempKey;\r\n      needsSave = false;\r\n    } else if (entityState === EntityState.Added) {\r\n      clearOriginalValues(entity);\r\n      // TODO: more to do here... like regenerating key ???\r\n    } else if (entityState === EntityState.Deleted) {\r\n      if (this.entityState.isAdded()) {\r\n        // turn it into a detach and exit early\r\n        this.setEntityState(EntityState.Detached);\r\n        return true;\r\n      } else {\r\n        // TODO: think about cascade deletes\r\n        // entityState needs to be set it early in this one case to insure that fk's are not cleared.\r\n        this.entityState = EntityState.Deleted;\r\n        removeFromRelations(entity, EntityState.Deleted);\r\n      }\r\n    } else if (entityState === EntityState.Modified) {\r\n      // nothing extra needed\r\n    } else if (entityState === EntityState.Detached) {\r\n      let group = this.entityGroup;\r\n      // no group === already detached.\r\n      if (!group) return false;\r\n      group.detachEntity(entity);\r\n      // needs to occur early here - so this IS deliberately redundent with the same code later in this method.\r\n      this.entityState = entityState;\r\n      removeFromRelations(entity, EntityState.Detached);\r\n      this._detach();\r\n      em.entityChanged.publish({ entityAction: EntityAction.Detach, entity: entity });\r\n      needsSave = false;\r\n    }\r\n    this.entityState = entityState;\r\n    em._notifyStateChange(entity, needsSave);\r\n    return true;\r\n  }\r\n\r\n  loadNavigationProperty(navigationProperty: string, callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback): Promise<QueryResult>;\r\n  loadNavigationProperty(navigationProperty: NavigationProperty, callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback): Promise<QueryResult>;\r\n  /**\r\n  Performs a query for the value of a specified [[NavigationProperty]]. __Async__\r\n  >      emp.entityAspect.loadNavigationProperty(\"Orders\").then(function (data) {\r\n  >          var orders = data.results;\r\n  >      }).catch(function (exception) {\r\n  >          // handle exception here;\r\n  >      });\r\n  @param navigationProperty - The NavigationProperty or the name of the NavigationProperty to 'load'.\r\n  @param callback - Function to call on success.\r\n  @param errorCallback - Function to call on failure.\r\n  @return Promise with shape\r\n    - results {Array of Entity}\r\n    - query {EntityQuery} The original query\r\n    - httpResponse {httpResponse} The HttpResponse returned from the server.\r\n  **/\r\n  loadNavigationProperty(navigationProperty: NavigationProperty | string, callback: QuerySuccessCallback, errorCallback: QueryErrorCallback) {\r\n    let entity = this.entity!;\r\n    let navProperty = entity.entityType._checkNavProperty(navigationProperty);\r\n    let query = EntityQuery.fromEntityNavigation(entity, navProperty);\r\n    // return entity.entityAspect.entityManager.executeQuery(query, callback, errorCallback);\r\n    let promise = entity.entityAspect.entityManager!.executeQuery(query);\r\n\r\n    return promise.then((data) => {\r\n      this._markAsLoaded(navProperty.name);\r\n      if (callback) callback(data);\r\n      return Promise.resolve(data);\r\n    }, (error) => {\r\n      if (errorCallback) errorCallback(error);\r\n      return Promise.reject(error);\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  Marks this navigationProperty on this entity as already having been loaded.\r\n  >      emp.entityAspect.markNavigationPropertyAsLoaded(\"Orders\");\r\n  @param navigationProperty - The NavigationProperty or name of NavigationProperty to 'load'.\r\n  **/\r\n  markNavigationPropertyAsLoaded(navigationProperty: NavigationProperty | string) {\r\n    if (!this.entity) return;\r\n    let navProperty = this.entity.entityType._checkNavProperty(navigationProperty);\r\n    this._markAsLoaded(navProperty.name);\r\n  }\r\n\r\n  isNavigationPropertyLoaded(navigationProperty: string): boolean;\r\n  isNavigationPropertyLoaded(navigationProperty: NavigationProperty): boolean;\r\n  /**\r\n  Determines whether a navigationProperty on this entity has already been loaded.\r\n\r\n  A navigation property is considered loaded when any of the following three conditions applies:\r\n\r\n    1. It was fetched from the backend server.\r\n        <br/>   This can be the result of an expand query or a call to the [[EntityAspect.loadNavigationProperty]] method.\r\n        <br/>   Note that even if the fetch returns nothing the property is still marked as loaded in this case.\r\n    1. The property is scalar and has been set to a nonnull value.\r\n    1. The [[EntityAspect.markNavigationPropertyAsLoaded]] was called.\r\n  \r\n  >     var wasLoaded = emp.entityAspect.isNavigationPropertyLoaded(\"Orders\");\r\n  @param navigationProperty - The NavigationProperty or name of NavigationProperty to 'load'.\r\n  **/\r\n  isNavigationPropertyLoaded(navigationProperty: NavigationProperty | string) {\r\n    if (!this.entity) return;\r\n    let navProperty = this.entity.entityType._checkNavProperty(navigationProperty);\r\n    if (navProperty.isScalar && this.entity.getProperty(navProperty.name) != null) {\r\n      return true;\r\n    }\r\n    return this._loadedNps && this._loadedNps.indexOf(navProperty.name) >= 0;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _markAsLoaded(navPropName: string) {\r\n    this._loadedNps = this._loadedNps || [];\r\n    core.arrayAddItemUnique(this._loadedNps, navPropName);\r\n  }\r\n\r\n\r\n  /**\r\n  Performs validation on the entity, any errors encountered during the validation are available via the\r\n  [[EntityAspect.getValidationErrors]] method. Validating an entity means executing\r\n  all of the validators on both the entity itself as well as those on each of its properties.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var isOk = order.entityAspect.validateEntity();\r\n  >      // isOk will be 'true' if there are no errors on the entity.\r\n  >      if (!isOk) {\r\n  >          var errors = order.entityAspect.getValidationErrors();\r\n  >      }\r\n  @return Whether the entity passed validation.\r\n  **/\r\n  validateEntity() {\r\n    let ok = true;\r\n    this._processValidationOpAndPublish(function (that: any) {\r\n      ok = validateTarget(that.entity);\r\n    });\r\n    return ok;\r\n  }\r\n\r\n  validateProperty(property: string, context?: any): boolean;\r\n  validateProperty(property: DataProperty, context?: any): boolean;\r\n  validateProperty(property: NavigationProperty, context?: any): boolean;\r\n  /**\r\n  Performs validation on a specific property of this entity, any errors encountered during the validation are available via the\r\n  [[EntityAspect.getValidationErrors]] method. Validating a property means executing\r\n  all of the validators on the specified property.  This call is also made automatically anytime a property\r\n  of an entity is changed.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var isOk = order.entityAspect.validateProperty(\"Order\");\r\n\r\n  or\r\n  >      var orderDateProperty = order.entityType.getProperty(\"OrderDate\");\r\n  >      var isOk = order.entityAspect.validateProperty(OrderDateProperty);\r\n  @param property - The [[DataProperty]] or [[NavigationProperty]] to validate or a string \r\n  with the name of the property or a property path with the path to a property of a complex object.\r\n  @param context -  A context object used to pass additional information to each [[Validator]].\r\n  @return Whether the entity passed validation.\r\n  **/\r\n  validateProperty(property: EntityProperty | string, context: any) {\r\n    let value = this.getPropertyValue(property); // performs validations\r\n    if (value && value.complexAspect) {\r\n      return validateTarget(value);\r\n    }\r\n    context = context || {};\r\n    context.entity = this.entity;\r\n    if (typeof property === \"string\") {\r\n      context.property = this.entity!.entityType.getProperty(property, true);\r\n      context.propertyName = property;\r\n    } else {\r\n      context.property = property;\r\n      context.propertyName = property.name;\r\n    }\r\n\r\n    return this._validateProperty(value, context);\r\n  }\r\n\r\n  getValidationErrors(): ValidationError[];\r\n  getValidationErrors(property: string): ValidationError[];\r\n  getValidationErrors(property: EntityProperty): ValidationError[];\r\n  /**\r\n  Returns the validation errors associated with either the entire entity or any specified property.\r\n  \r\n  This method can return all of the errors for an Entity\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var valErrors = order.entityAspect.getValidationErrors();\r\n\r\n  as well as those for just a specific property.\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var orderDateErrors = order.entityAspect.getValidationErrors(\"OrderDate\");\r\n\r\n  which can also be expressed as\r\n  >      // assume order is an order entity attached to an EntityManager.\r\n  >      var orderDateProperty = order.entityType.getProperty(\"OrderDate\");\r\n  >      var orderDateErrors = order.entityAspect.getValidationErrors(orderDateProperty);\r\n  @param property - The property for which validation errors should be retrieved.\r\n  If omitted, all of the validation errors for this entity will be returned.\r\n  @return A array of validation errors.\r\n  **/\r\n  getValidationErrors(property?: DataProperty | NavigationProperty | string) {\r\n    assertParam(property, \"property\").isOptional().isEntityProperty().or().isString().check();\r\n    let result = core.getOwnPropertyValues(this._validationErrors);\r\n    if (property) {\r\n      let propertyName = typeof (property) === 'string' ? property : property.name;\r\n      result = result.filter(function (ve: ValidationError) {\r\n        return ve.property && (ve.property.name === propertyName || (propertyName.indexOf(\".\") !== -1 && ve.propertyName === propertyName));\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Adds a validation error.\r\n  **/\r\n  addValidationError(validationError: ValidationError) {\r\n    assertParam(validationError, \"validationError\").isInstanceOf(ValidationError).check();\r\n    this._processValidationOpAndPublish(function (that: any) {\r\n      that._addValidationError(validationError);\r\n    });\r\n  }\r\n\r\n  removeValidationError(validationError: ValidationError): void;\r\n  removeValidationError(validationKey: string): void;\r\n  /**\r\n  Removes a validation error.\r\n  @param validationErrorOrKey - Either a ValidationError or a ValidationError 'key' value\r\n  **/\r\n  removeValidationError(validationErrorOrKey: ValidationError | string) {\r\n    assertParam(validationErrorOrKey, \"validationErrorOrKey\").isString().or().isInstanceOf(ValidationError).or().isInstanceOf(Validator).check();\r\n\r\n    let key = (typeof (validationErrorOrKey) === \"string\") ? validationErrorOrKey : validationErrorOrKey.key;\r\n    this._processValidationOpAndPublish(function (that: any) {\r\n      that._removeValidationError(key);\r\n    });\r\n  }\r\n\r\n  /**\r\n  Removes all of the validation errors for a specified entity\r\n  **/\r\n  clearValidationErrors() {\r\n    this._processValidationOpAndPublish(function (that: any) {\r\n      core.objectForEach(that._validationErrors, function (key: string, valError: ValidationError) {\r\n        if (valError) {\r\n          delete that._validationErrors[key];\r\n          that._pendingValidationResult.removed.push(valError);\r\n        }\r\n      });\r\n      that.hasValidationErrors = !core.isEmpty(that._validationErrors);\r\n    });\r\n  }\r\n\r\n  /**\r\n  Returns an [[EntityKey]] for the entity pointed to by the specified scalar NavigationProperty.\r\n  This only returns an EntityKey if the current entity is a 'child' entity along the specified NavigationProperty. \r\n  i.e. has a single parent.\r\n\r\n  @param navigationProperty - The [[NavigationProperty]] ( pointing to a parent). \r\n  @returns Either a parent EntityKey if this is a 'child' entity or null;  \r\n  */\r\n  getParentKey(navigationProperty: NavigationProperty) {\r\n    if (!this.entity) return null;\r\n    // TODO: review this - not sure about the comment.\r\n    // NavigationProperty doesn't yet exist\r\n    // assertParam(navigationProperty, \"navigationProperty\").isInstanceOf(NavigationProperty).check();\r\n    let fkNames = navigationProperty.foreignKeyNames;\r\n    if (fkNames.length === 0) return null;\r\n    let that = this;\r\n    let fkValues = fkNames.map(function (fkn) {\r\n      return that.entity!.getProperty(fkn);\r\n    });\r\n    return new EntityKey(navigationProperty.entityType, fkValues);\r\n  }\r\n\r\n  // TODO: refactor this and the static getPropertyPathValue.\r\n  /**\r\n  Returns the value of a specified DataProperty or NavigationProperty or 'property path'.  \r\n  **/\r\n  getPropertyValue(property: string | DataProperty | NavigationProperty) {\r\n    assertParam(property, \"property\").isString().or().isEntityProperty().check();\r\n    let value: any;\r\n    if (typeof (property) === 'string') {\r\n      let propNames = property.trim().split(\".\");\r\n      let propName = propNames.shift();\r\n      value = this.entity;\r\n      value = value.getProperty(propName);\r\n      while (propNames.length > 0) {\r\n        propName = propNames.shift();\r\n        value = value.getProperty(propName);\r\n      }\r\n    } else {\r\n      if (!(property.parentType instanceof EntityType)) {\r\n        throw new Error(\"The validateProperty method does not accept a 'property' parameter whose parentType is a ComplexType; \" +\r\n          \"Pass a 'property path' string as the 'property' parameter instead \");\r\n      }\r\n      value = this.entity!.getProperty(property.name);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  // internal methods\r\n  /** @hidden @internal */\r\n  _checkOperation(operationName: string) {\r\n    if (this.isBeingSaved) {\r\n      throw new Error(\"Cannot perform a '\" + operationName + \"' on an entity that is in the process of being saved\");\r\n    }\r\n    // allows chaining\r\n    return this;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _detach() {\r\n    this.entityGroup = undefined;\r\n    this.entityManager = undefined;\r\n    this.entityState = EntityState.Detached;\r\n    this.originalValues = {};\r\n    this._validationErrors = {};\r\n    this.hasValidationErrors = false;\r\n    this.validationErrorsChanged.clear();\r\n    this.propertyChanged.clear();\r\n\r\n  }\r\n\r\n\r\n  // called from defaultInterceptor.\r\n  /** @hidden @internal */\r\n  _validateProperty(value: any, context: any) {\r\n    let ok = true;\r\n    this._processValidationOpAndPublish(function (that: any) {\r\n      context.property.getAllValidators().forEach(function (validator: Validator) {\r\n        ok = validate(that, validator, value, context) && ok;\r\n      });\r\n    });\r\n    return ok;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _processValidationOpAndPublish(validationFn: any) {\r\n    if (this._pendingValidationResult) {\r\n      // only top level processValidations call publishes\r\n      validationFn(this);\r\n    } else {\r\n      try {\r\n        this._pendingValidationResult = { entity: this.entity, added: [], removed: [] };\r\n        validationFn(this);\r\n        if (this._pendingValidationResult.added.length > 0 || this._pendingValidationResult.removed.length > 0) {\r\n          this.validationErrorsChanged.publish(this._pendingValidationResult);\r\n          // this might be a detached entity hence the guard below.\r\n          this.entityManager && this.entityManager.validationErrorsChanged.publish(this._pendingValidationResult);\r\n\r\n        }\r\n      } finally {\r\n        this._pendingValidationResult = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  // TODO: add/use a ValidationError type\r\n  _addValidationError(validationError: any) {\r\n    this._validationErrors[validationError.key] = validationError;\r\n    this.hasValidationErrors = true;\r\n    this._pendingValidationResult.added.push(validationError);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _removeValidationError(key: string) {\r\n    let valError = this._validationErrors[key];\r\n    if (valError) {\r\n      delete this._validationErrors[key];\r\n      this.hasValidationErrors = !core.isEmpty(this._validationErrors);\r\n      this._pendingValidationResult.removed.push(valError);\r\n    }\r\n  }\r\n\r\n}\r\n\r\nBreezeEvent.bubbleEvent(EntityAspect.prototype, function () {\r\n  return this.entityManager;\r\n});\r\n\r\nfunction rejectChangesCore(target: any) {\r\n  let aspect = target.entityAspect || target.complexAspect;\r\n  let stype = target.entityType || target.complexType;\r\n  let originalValues = aspect.originalValues;\r\n  for (let propName in originalValues) {\r\n    target.setProperty(propName, originalValues[propName]);\r\n  }\r\n  stype.complexProperties.forEach(function (cp: any) {\r\n    let cos = target.getProperty(cp.name);\r\n    if (cp.isScalar) {\r\n      rejectChangesCore(cos);\r\n    } else {\r\n      cos._rejectChanges();\r\n      cos.forEach(rejectChangesCore);\r\n    }\r\n  });\r\n}\r\n\r\nfunction removeFromRelations(entity: Entity, entityState: EntityState) {\r\n  // remove this entity from any collections.\r\n  // mark the entity deleted or detached\r\n\r\n  let isDeleted = entityState.isDeleted();\r\n  if (isDeleted) {\r\n    removeFromRelationsCore(entity);\r\n  } else {\r\n    core.using(entity.entityAspect.entityManager!, \"isLoading\", true, function () {\r\n      removeFromRelationsCore(entity);\r\n    });\r\n  }\r\n}\r\n\r\nfunction removeFromRelationsCore(entity: Entity) {\r\n  entity.entityType.navigationProperties.forEach(function (np) {\r\n    let inverseNp = np.inverse;\r\n    let npValue = entity.getProperty(np.name);\r\n    if (np.isScalar) {\r\n      if (npValue) {\r\n        if (inverseNp) {\r\n          if (inverseNp.isScalar) {\r\n            npValue.setProperty(inverseNp.name, null);\r\n          } else {\r\n            let collection = npValue.getProperty(inverseNp.name);\r\n            if (collection.length) {\r\n              core.arrayRemoveItem(collection, entity);\r\n            }\r\n          }\r\n        }\r\n        entity.setProperty(np.name, null);\r\n      }\r\n    } else {\r\n      if (inverseNp != null) {\r\n        // npValue is a live list so we need to copy it first.\r\n        npValue.slice(0).forEach((v: any) => {\r\n          if (inverseNp!.isScalar) {\r\n            v.setProperty(inverseNp!.name, null);\r\n          } else {\r\n            // TODO: many to many - not yet handled.\r\n          }\r\n        });\r\n      }\r\n      // now clear it.\r\n      npValue.length = 0;\r\n    }\r\n  });\r\n\r\n}\r\n\r\n// note entityAspect only - ( no complex aspect allowed on the call).\r\nfunction validate(entityAspect: EntityAspect, validator: Validator, value: any, context?: any) {\r\n  let ve = validator.validate(value, context);\r\n  if (ve) {\r\n    entityAspect._addValidationError(ve);\r\n    return false;\r\n  } else {\r\n    let key = ValidationError.getKey(validator, context ? context.propertyName : null);\r\n    entityAspect._removeValidationError(key);\r\n    return true;\r\n  }\r\n}\r\n\r\n// coIndex is only used where target is a complex object that is part of an array of complex objects\r\n// in which case ctIndex is the index of the target within the array.\r\nfunction validateTarget(target: any, coIndex?: number) {\r\n  let ok = true;\r\n  let stype = target.entityType || target.complexType;\r\n  let aspect = target.entityAspect || target.complexAspect;\r\n  let entityAspect = target.entityAspect || target.complexAspect.getEntityAspect();\r\n  let context = <any>{ entity: entityAspect.entity };\r\n  if (coIndex !== undefined) {\r\n    context.index = coIndex;\r\n  }\r\n\r\n  stype.getProperties().forEach(function (p: any) {\r\n    let value = target.getProperty(p.name);\r\n    let validators = p.getAllValidators();\r\n    if (validators.length > 0) {\r\n      context.property = p;\r\n      context.propertyName = aspect.getPropertyPath(p.name);\r\n      ok = entityAspect._validateProperty(value, context) && ok;\r\n    }\r\n    if (p.isComplexProperty) {\r\n      if (p.isScalar) {\r\n        ok = validateTarget(value) && ok;\r\n      } else {\r\n        ok = value.reduce(function (pv: any, cv: any, ix: number) {\r\n          return validateTarget(cv, ix) && pv;\r\n        }, ok);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  // then target level\r\n  stype.getAllValidators().forEach(function (validator: Validator) {\r\n    ok = validate(entityAspect, validator, target) && ok;\r\n  });\r\n  return ok;\r\n}\r\n\r\n/**\r\nAn ComplexAspect instance is associated with every complex object instance and is accessed via the complex object's 'complexAspect' property.\r\n\r\nThe ComplexAspect itself provides properties to determine the parent object, parent property and original values for the complex object.\r\n\r\nA ComplexAspect will almost never need to be constructed directly. You will usually get an ComplexAspect by accessing\r\nan entities 'complexAspect' property.  This property will be automatically attached when an complex object is created as part of an\r\nentity via either a query, import or EntityManager.createEntity call.\r\n>      // assume address is a complex property on the 'Customer' type\r\n>      var aspect = aCustomer.address.complexAspect;\r\n>      // aCustomer === aspect.parent;\r\n**/\r\nexport class ComplexAspect {\r\n\r\n  /** The complex object that this aspect is associated with. __Read Only__ */\r\n  complexObject: ComplexObject;\r\n  /** The 'original values' of this complex object where they are different from the 'current values'.\r\n  This is a map where the key is a property name and the value is the 'original value' of the property.\r\n  __Read Only__ */\r\n  originalValues: {};\r\n  /** The parent object that to which this aspect belongs; this will either be an entity or another complex object. __Read Only__ */\r\n  parent?: StructuralObject;\r\n  /** The [[DataProperty]] on the 'parent' that contains this complex object. __Read Only__ */\r\n  parentProperty?: DataProperty;\r\n  extraMetadata?: any;\r\n\r\n  /** You will rarely, if ever, create a ComplexAspect directly. */\r\n  constructor(complexObject: ComplexObject, parent: StructuralObject, parentProperty: DataProperty) {\r\n    if (!complexObject) {\r\n      throw new Error(\"The  ComplexAspect ctor requires an entity as its only argument.\");\r\n    }\r\n    if (complexObject.complexAspect) {\r\n      return complexObject.complexAspect;\r\n    }\r\n    // if called without new\r\n    if (!(this instanceof ComplexAspect)) {\r\n      return new ComplexAspect(complexObject, parent, parentProperty);\r\n    }\r\n\r\n    // entityType should already be on the entity from 'watch'\r\n    this.complexObject = complexObject;\r\n    complexObject.complexAspect = this;\r\n\r\n    // TODO: keep public or not?\r\n    this.originalValues = {};\r\n\r\n    // if a standalone complexObject\r\n    if (parent != null) {\r\n      this.parent = parent;\r\n      this.parentProperty = parentProperty;\r\n    }\r\n\r\n    let complexType = complexObject.complexType;\r\n    if (!complexType) {\r\n      let typeName = complexObject.prototype._$typeName;\r\n      if (!typeName) {\r\n        throw new Error(\"This entity is not registered as a valid ComplexType\");\r\n      } else {\r\n        throw new Error(\"Metadata for this complexType has not yet been resolved: \" + typeName);\r\n      }\r\n    }\r\n    let complexCtor = complexType.getCtor();\r\n    config.interfaceRegistry.modelLibrary.getDefaultInstance().startTracking(complexObject, complexCtor.prototype);\r\n\r\n  }\r\n\r\n\r\n  /**\r\n  Returns the EntityAspect for the top level entity that contains this complex object.\r\n  **/\r\n  getEntityAspect() {\r\n    let parent = <any>this.parent;\r\n    if (!parent) return new EntityAspect();\r\n    let entityAspect = parent.entityAspect;\r\n    while (parent && !entityAspect) {\r\n      parent = parent.complexAspect && parent.complexAspect.parent;\r\n      entityAspect = parent && parent.entityAspect;\r\n    }\r\n    return entityAspect || new EntityAspect();\r\n  }\r\n\r\n  /**  @hidden @internal */\r\n  // TODO: rename - and use '_'; used on both EntityAspect and ComplexAspect for polymorphic reasons.\r\n  getPropertyPath(propName: string) {\r\n    let parent = <any>this.parent;\r\n    if (!parent) return null;\r\n    let aspect = parent.complexAspect || parent.entityAspect;\r\n    return aspect.getPropertyPath(this.parentProperty!.name + \".\" + propName);\r\n  }\r\n\r\n}\r\n\r\nfunction clearOriginalValues(target: any) {\r\n  let aspect = target.entityAspect || target.complexAspect;\r\n  aspect.originalValues = {};\r\n  let stype = target.entityType || target.complexType;\r\n  stype.complexProperties.forEach(function (cp: any) {\r\n    let cos = target.getProperty(cp.name);\r\n    if (cp.isScalar) {\r\n      clearOriginalValues(cos);\r\n    } else {\r\n      cos._acceptChanges();\r\n      cos.forEach(clearOriginalValues);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n","import { assertConfig } from './assert-param';\r\nimport { core } from './core';\r\nimport { config } from './config';\r\n\r\n// TODO: strongly type context object passed to naming convention converter fns.\r\n\r\n/** Configuration info to be passed to the [[NamingConvention]] constructor */\r\nexport interface NamingConventionConfig {\r\n  /** The name of this NamingConvention */\r\n  name?: string;\r\n  /** Function that takes a server property name add converts it into a client side property name.  */\r\n  serverPropertyNameToClient?: (nm: string, context?: any) => string;\r\n  /** Function that takes a client property name add converts it into a server side property name. */\r\n  clientPropertyNameToServer?: (nm: string, context?: any) => string;\r\n}\r\n\r\n/**\r\nA NamingConvention instance is used to specify the naming conventions under which a MetadataStore\r\nwill translate property names between the server and the javascript client.\r\n\r\nThe default NamingConvention does not perform any translation, it simply passes property names thru unchanged.\r\n@dynamic\r\n**/\r\nexport class NamingConvention {\r\n  /** @hidden @internal */\r\n  _$typeName: string;\r\n  /** The name of this NamingConvention. __Read Only__ */\r\n  name: string;\r\n  /** Function that takes a server property name add converts it into a client side property name.  __Read Only__ */\r\n  serverPropertyNameToClient: (nm: string, context?: any) => string;\r\n  /** Function that takes a client property name add converts it into a server side property name. __Read Only__ */\r\n  clientPropertyNameToServer: (nm: string, context?: any) => string;\r\n\r\n  /**\r\n  NamingConvention constructor\r\n  >      // A naming convention that converts the first character of every property name to uppercase on the server\r\n  >      // and lowercase on the client.\r\n  >      var namingConv = new NamingConvention({\r\n  >          serverPropertyNameToClient: function(serverPropertyName) {\r\n  >              return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);\r\n  >          },\r\n  >          clientPropertyNameToServer: function(clientPropertyName) {\r\n  >              return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);\r\n  >          }            \r\n  >      });\r\n  >      var ms = new MetadataStore({ namingConvention: namingConv });\r\n  >      var em = new EntityManager( { metadataStore: ms });\r\n  **/\r\n  constructor(ncConfig: NamingConventionConfig ) {\r\n    assertConfig(ncConfig || {})\r\n        .whereParam(\"name\").isOptional().isString()\r\n        .whereParam(\"serverPropertyNameToClient\").isFunction()\r\n        .whereParam(\"clientPropertyNameToServer\").isFunction()\r\n        .applyAll(this);\r\n    if (!this.name) {\r\n      this.name = core.getUuid();\r\n    }\r\n    config._storeObject(this, \"NamingConvention\", this.name);\r\n  }\r\n\r\n  /**\r\n\r\n\r\n  /**\r\n  A noop naming convention - This is the default unless another is specified.\r\n  **/\r\n  static none = new NamingConvention({\r\n    name: \"noChange\",\r\n    serverPropertyNameToClient: (serverPropertyName) => {\r\n      return serverPropertyName;\r\n    },\r\n    clientPropertyNameToServer: (clientPropertyName) => {\r\n      return clientPropertyName;\r\n    }\r\n  });\r\n\r\n  /**\r\n  The \"camelCase\" naming convention - This implementation only lowercases the first character of the server property name\r\n  but leaves the rest of the property name intact.  If a more complicated version is needed then one should be created via the ctor.\r\n  **/\r\n  static camelCase = new NamingConvention({\r\n    name: \"camelCase\",\r\n    serverPropertyNameToClient: (serverPropertyName) => {\r\n      return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);\r\n    },\r\n    clientPropertyNameToServer: (clientPropertyName) => {\r\n      return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);\r\n    }\r\n  });\r\n\r\n  /**\r\n  The default value whenever NamingConventions are not specified.\r\n  **/\r\n  static defaultInstance = new NamingConvention(NamingConvention.none);\r\n\r\n  /**\r\n  Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.\r\n  The current instance is returned unchanged.\r\n  >      var namingConv = new NamingConvention({\r\n  >          serverPropertyNameToClient: function(serverPropertyName) {\r\n  >              return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);\r\n  >          },\r\n  >          clientPropertyNameToServer: function(clientPropertyName) {\r\n  >              return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);\r\n  >          }            \r\n  >      });\r\n  >      namingConv.setAsDefault();\r\n  **/\r\n  setAsDefault() {\r\n    return core.setAsDefault(this, NamingConvention);\r\n  }\r\n\r\n}\r\n\r\nNamingConvention.prototype._$typeName = \"NamingConvention\";\r\n\r\n\r\n\r\n\r\n","import { core } from './core';\r\nimport { MetadataStore, EntityType, ComplexType, DataProperty, NavigationProperty, AutoGeneratedKeyType } from './entity-metadata';\r\nimport { DataType  } from './data-type';\r\nimport { Validator } from './validate';\r\n\r\ninterface IAssociation {\r\n  name: string;\r\n  end: IEnd[];\r\n  referentialConstraint: any;\r\n}\r\n\r\ninterface IEnd {\r\n  multiplicity: string;\r\n  type: string;\r\n  role: string;\r\n}\r\n\r\nfunction parse(metadataStore: MetadataStore, schemas: any, altMetadata: any) {\r\n\r\n  metadataStore._entityTypeResourceMap = {};\r\n  schemas = core.toArray(schemas);\r\n  schemas.forEach(function (schema: any) {\r\n    if (schema.cSpaceOSpaceMapping) {\r\n      // Web api only - not avail in OData.\r\n      // TODO throw informative error if already parsed and converted to map on a previous pass\r\n      let mappings = JSON.parse(schema.cSpaceOSpaceMapping);\r\n      let newMap = {};\r\n      mappings.forEach(function (mapping: any) {\r\n        newMap[mapping[0]] = mapping[1];\r\n      });\r\n      schema.cSpaceOSpaceMapping = newMap;\r\n    }\r\n\r\n    if (schema.entityContainer) {\r\n      core.toArray(schema.entityContainer).forEach(function (container) {\r\n        core.toArray(container.entitySet).forEach(function (entitySet) {\r\n          let entityTypeName = parseTypeNameWithSchema(entitySet.entityType, schema).typeName;\r\n          metadataStore.setEntityTypeForResourceName(entitySet.name, entityTypeName);\r\n          metadataStore._entityTypeResourceMap[entityTypeName] = entitySet.name;\r\n        });\r\n      });\r\n    }\r\n\r\n    // process complextypes before entity types.\r\n    if (schema.complexType) {\r\n      core.toArray(schema.complexType).forEach(function (ct) {\r\n        parseCsdlComplexType(ct, schema, metadataStore);\r\n      });\r\n    }\r\n    if (schema.entityType) {\r\n      core.toArray(schema.entityType).forEach(function (et) {\r\n        parseCsdlEntityType(et, schema, schemas, metadataStore);\r\n\r\n      });\r\n    }\r\n\r\n  });\r\n  let badNavProps = metadataStore.getIncompleteNavigationProperties();\r\n  if (badNavProps.length > 0) {\r\n    let msg = badNavProps.map(function (npa) {\r\n      if (Array.isArray(npa)) {\r\n        return npa.map(function (np) {\r\n          return np.parentType.name + \":\" + np.name;\r\n        }).join(', ');\r\n      }\r\n      return npa.parentType.name + \":\" + npa.name;\r\n    }).join(', ');\r\n    throw new Error(\"Incomplete navigation properties: \" + msg);\r\n  }\r\n  if (altMetadata) {\r\n    metadataStore.importMetadata(altMetadata, true);\r\n  }\r\n  return metadataStore;\r\n}\r\n\r\nfunction parseCsdlEntityType(csdlEntityType: any, schema: any, schemas: any, metadataStore: MetadataStore) {\r\n  let shortName = csdlEntityType.name;\r\n  let ns = getNamespaceFor(shortName, schema);\r\n  let entityType = new EntityType({\r\n    shortName: shortName,\r\n    namespace: ns,\r\n    isAbstract: csdlEntityType.abstract && csdlEntityType.abstract === 'true'\r\n  });\r\n  if (csdlEntityType.baseType) {\r\n    let baseTypeName = parseTypeNameWithSchema(csdlEntityType.baseType, schema).typeName;\r\n    entityType.baseTypeName = baseTypeName;\r\n    let baseEntityType = metadataStore._getStructuralType(baseTypeName, true);\r\n    if (baseEntityType) {\r\n      completeParseCsdlEntityType(entityType, csdlEntityType, schema, schemas, metadataStore);\r\n    } else {\r\n      let deferrals = metadataStore._deferredTypes[baseTypeName];\r\n      if (!deferrals) {\r\n        deferrals = [];\r\n        metadataStore._deferredTypes[baseTypeName] = deferrals;\r\n      }\r\n      deferrals.push({ entityType: entityType, csdlEntityType: csdlEntityType });\r\n    }\r\n  } else {\r\n    completeParseCsdlEntityType(entityType, csdlEntityType, schema, schemas, metadataStore);\r\n  }\r\n  // entityType may or may not have been added to the metadataStore at this point.\r\n  return entityType;\r\n\r\n}\r\n\r\nfunction completeParseCsdlEntityType(entityType: EntityType, csdlEntityType: any, schema: any, schemas: any, metadataStore: MetadataStore) {\r\n  let keyNamesOnServer = csdlEntityType.key ? core.toArray(csdlEntityType.key.propertyRef).map(core.pluck(\"name\")) : [];\r\n\r\n  core.toArray(csdlEntityType.property).forEach(function (prop) {\r\n    parseCsdlDataProperty(entityType, prop, schema, keyNamesOnServer);\r\n  });\r\n\r\n  core.toArray(csdlEntityType.navigationProperty).forEach(function (prop) {\r\n    parseCsdlNavProperty(entityType, prop, schema, schemas);\r\n  });\r\n\r\n  metadataStore.addEntityType(entityType);\r\n  entityType.defaultResourceName = metadataStore._entityTypeResourceMap[entityType.name];\r\n\r\n  let deferredTypes = metadataStore._deferredTypes;\r\n  let deferrals = deferredTypes[entityType.name];\r\n  if (deferrals) {\r\n    deferrals.forEach(function (d: any) {\r\n      completeParseCsdlEntityType(d.entityType, d.csdlEntityType, schema, schemas, metadataStore);\r\n    });\r\n    delete deferredTypes[entityType.name];\r\n  }\r\n\r\n}\r\n\r\nfunction parseCsdlComplexType(csdlComplexType: any, schema: any, metadataStore: MetadataStore) {\r\n  let shortName = csdlComplexType.name;\r\n  let ns = getNamespaceFor(shortName, schema);\r\n  let complexType = new ComplexType({\r\n    shortName: shortName,\r\n    namespace: ns\r\n  });\r\n\r\n  core.toArray(csdlComplexType.property).forEach(function (prop) {\r\n    parseCsdlDataProperty(complexType, prop, schema);\r\n  });\r\n\r\n  metadataStore.addEntityType(complexType);\r\n  return complexType;\r\n}\r\n\r\nfunction parseCsdlDataProperty(parentType: EntityType | ComplexType, csdlProperty: any, schema: any, keyNamesOnServer?: string[]) {\r\n  let dp: DataProperty | undefined;\r\n  let typeParts = csdlProperty.type.split(\".\");\r\n  // Both tests on typeParts are necessary because of differing metadata conventions for OData and Edmx feeds.\r\n  if (typeParts[0] === \"Edm\" && typeParts.length === 2) {\r\n    dp = parseCsdlSimpleProperty(parentType, csdlProperty, keyNamesOnServer);\r\n  } else {\r\n    if (isEnumType(csdlProperty, schema)) {\r\n      dp = parseCsdlSimpleProperty(parentType, csdlProperty, keyNamesOnServer);\r\n      if (dp) {\r\n        dp.enumType = csdlProperty.type;\r\n      }\r\n    } else {\r\n      dp = parseCsdlComplexProperty(parentType, csdlProperty, schema);\r\n    }\r\n  }\r\n  if (dp) {\r\n    parentType._addPropertyCore(dp);\r\n    addValidators(dp);\r\n  }\r\n  return dp;\r\n}\r\n\r\nfunction parseCsdlSimpleProperty(parentType: EntityType | ComplexType, csdlProperty: any, keyNamesOnServer?: string[]) {\r\n  let dataType = DataType.fromEdmDataType(csdlProperty.type);\r\n  if (dataType == null) {\r\n    parentType.warnings.push(\"Unable to recognize DataType for property: \" + csdlProperty.name + \" DateType: \" + csdlProperty.type);\r\n    return undefined;\r\n  }\r\n  let isNullable = csdlProperty.nullable === 'true' || csdlProperty.nullable == null;\r\n  // let fixedLength = csdlProperty.fixedLength ? csdlProperty.fixedLength === true : undefined;\r\n  let isPartOfKey = keyNamesOnServer != null && keyNamesOnServer.indexOf(csdlProperty.name) >= 0;\r\n  if (isPartOfKey && parentType instanceof EntityType && parentType.autoGeneratedKeyType === AutoGeneratedKeyType.None) {\r\n    if (isIdentityProperty(csdlProperty)) {\r\n      parentType.autoGeneratedKeyType = AutoGeneratedKeyType.Identity;\r\n    }\r\n  }\r\n  // TODO: nit - don't set maxLength if null;\r\n  let maxLength = csdlProperty.maxLength;\r\n  maxLength = (maxLength == null || maxLength === \"Max\") ? null : parseInt(maxLength, 10);\r\n  // can't set the name until we go thru namingConventions and these need the dp.\r\n\r\n  let dp = new DataProperty({\r\n    nameOnServer: csdlProperty.name,\r\n    dataType: dataType,\r\n    isNullable: isNullable,\r\n    isPartOfKey: isPartOfKey,\r\n    maxLength: maxLength,\r\n    defaultValue: csdlProperty.defaultValue,\r\n    // fixedLength: fixedLength,\r\n    concurrencyMode: csdlProperty.concurrencyMode\r\n  });\r\n\r\n  if (dataType === DataType.Undefined) {\r\n    dp.rawTypeName = csdlProperty.type;\r\n  }\r\n  return dp;\r\n}\r\n\r\nfunction parseCsdlComplexProperty(parentType: EntityType | ComplexType, csdlProperty: any, schema: any) {\r\n\r\n  // Complex properties are never nullable ( per EF specs)\r\n  // let isNullable = csdlProperty.nullable === 'true' || csdlProperty.nullable == null;\r\n  // let complexTypeName = csdlProperty.type.split(\"Edm.\")[1];\r\n  let complexTypeName = parseTypeNameWithSchema(csdlProperty.type, schema).typeName;\r\n  // can't set the name until we go thru namingConventions and these need the dp.\r\n  let dp = new DataProperty({\r\n    nameOnServer: csdlProperty.name,\r\n    complexTypeName: complexTypeName,\r\n    isNullable: false\r\n  });\r\n\r\n  return dp;\r\n}\r\n\r\nfunction parseCsdlNavProperty(entityType: EntityType, csdlProperty: any, schema: any, schemas: any[]) {\r\n  let association = getAssociation(csdlProperty, schema, schemas);\r\n  if (!association) {\r\n    throw new Error(\"Unable to resolve Foreign Key Association: \" + csdlProperty.relationship);\r\n  }\r\n  let toEnd = core.arrayFirst(association.end, (assocEnd) => {\r\n    return assocEnd.role === csdlProperty.toRole;\r\n  });\r\n\r\n  let isScalar = toEnd!.multiplicity !== \"*\";\r\n  let dataType = parseTypeNameWithSchema(toEnd!.type, schema).typeName;\r\n\r\n  let constraint = association.referentialConstraint;\r\n  if (!constraint) {\r\n    // TODO: Revisit this later - right now we just ignore many-many and assocs with missing constraints.\r\n\r\n    // Think about adding this back later.\r\n    if (association.end[0].multiplicity === \"*\" && association.end[1].multiplicity === \"*\") {\r\n      // ignore many to many relations for now\r\n      return;\r\n    } else {\r\n      // For now assume it will be set later directly on the client.\r\n      // other alternative is to throw an error:\r\n      // throw new Error(\"Foreign Key Associations must be turned on for this model\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  let cfg = {\r\n    nameOnServer: csdlProperty.name,\r\n    entityTypeName: dataType,\r\n    isScalar: isScalar,\r\n    associationName: association.name,\r\n  };\r\n\r\n  if (constraint) {\r\n    let principal = constraint.principal;\r\n    let dependent = constraint.dependent;\r\n\r\n    let propRefs = core.toArray(dependent.propertyRef);\r\n    let fkNames = propRefs.map(core.pluck(\"name\"));\r\n    if (csdlProperty.fromRole === principal.role) {\r\n      (cfg as any).invForeignKeyNamesOnServer = fkNames;\r\n    } else {\r\n      // will be used later by np._update\r\n      (cfg as any).foreignKeyNamesOnServer = fkNames;\r\n    }\r\n  }\r\n\r\n  let np = new NavigationProperty(cfg);\r\n  entityType._addPropertyCore(np);\r\n  return np;\r\n}\r\n\r\n\r\nfunction isEnumType(csdlProperty: any, schema: any) {\r\n  if (schema.enumType) return isEdmxEnumType(csdlProperty, schema);\r\n  else if (schema.extensions) return isODataEnumType(csdlProperty, schema);\r\n  else return false;\r\n}\r\n\r\nfunction isEdmxEnumType(csdlProperty: any, schema: any) {\r\n  let enumTypes = core.toArray(schema.enumType);\r\n  let typeParts = csdlProperty.type.split(\".\");\r\n  let baseTypeName = typeParts[typeParts.length - 1];\r\n  return enumTypes.some(function (enumType) {\r\n    return enumType.name === baseTypeName;\r\n  });\r\n}\r\n\r\nfunction isODataEnumType(csdlProperty: any, schema: any) {\r\n  let enumTypes = schema.extensions.filter((ext: any) => {\r\n    return ext.name === \"EnumType\";\r\n  });\r\n  let typeParts = csdlProperty.type.split(\".\");\r\n  let baseTypeName = typeParts[typeParts.length - 1];\r\n  return enumTypes.some((enumType: any) => {\r\n    return enumType.attributes.some((attr: any) => {\r\n      return attr.name === \"Name\" && attr.value === baseTypeName;\r\n    });\r\n  });\r\n}\r\n\r\nfunction addValidators(dataProperty: DataProperty) {\r\n  let typeValidator: Validator;\r\n  if (!dataProperty.isNullable) {\r\n    dataProperty.validators.push(Validator.required());\r\n  }\r\n\r\n  if (dataProperty.isComplexProperty) return;\r\n\r\n  if (dataProperty.dataType === DataType.String) {\r\n    if (dataProperty.maxLength) {\r\n      let validatorArgs = { maxLength: dataProperty.maxLength };\r\n      typeValidator = Validator.maxLength(validatorArgs);\r\n    } else {\r\n      typeValidator = Validator.string();\r\n    }\r\n  } else {\r\n      let validatorCtor = (dataProperty.dataType as any).validatorCtor;\r\n      if (!validatorCtor) return;\r\n      typeValidator = validatorCtor();\r\n  }\r\n\r\n  dataProperty.validators.push(typeValidator);\r\n\r\n}\r\n\r\nfunction isIdentityProperty(csdlProperty: any) {\r\n  // see if web api feed\r\n  let propName = core.arrayFirst(Object.keys(csdlProperty), (pn) => {\r\n    return pn.indexOf(\"StoreGeneratedPattern\") >= 0;\r\n  });\r\n  if (propName) {\r\n    return (csdlProperty[propName] === \"Identity\");\r\n  } else {\r\n    // see if Odata feed\r\n    let extensions = csdlProperty.extensions;\r\n    if (!extensions) {\r\n      return false;\r\n    }\r\n    let identityExtn = core.arrayFirst(extensions, (extension) => {\r\n      return extension.name === \"StoreGeneratedPattern\" && extension.value === \"Identity\";\r\n    });\r\n    return !!identityExtn;\r\n  }\r\n}\r\n\r\n// Fast version\r\n// np: schema.entityType[].navigationProperty.relationship -> schema.association\r\n//   match( shortName(np.relationship) == schema.association[].name\r\n//      --> association__\r\n\r\n// Correct version\r\n// np: schema.entityType[].navigationProperty.relationship -> schema.association\r\n//   match( np.relationship == schema.entityContainer[0].associationSet[].association )\r\n//      -> associationSet.name\r\n//   match ( associationSet.name == schema.association[].name )\r\n//      -> association\r\n\r\nfunction getAssociation(csdlNavProperty: any, containingSchema: any, schemas: any[]) {\r\n  let assocFullName = parseTypeNameWithSchema(csdlNavProperty.relationship, containingSchema);\r\n  let assocNamespace = assocFullName.namespace;\r\n  let assocSchema = core.arrayFirst(schemas, (schema) => {\r\n    return schema.namespace === assocNamespace;\r\n  });\r\n  if (!assocSchema) return null;\r\n\r\n  let assocName = assocFullName.shortTypeName;\r\n  let assocs = assocSchema.association;\r\n  if (!assocs) return null;\r\n  if (!Array.isArray(assocs)) {\r\n    assocs = [assocs];\r\n  }\r\n  let association = core.arrayFirst(assocs, (assoc) => {\r\n    return assoc.name === assocName;\r\n  });\r\n  return association as IAssociation;\r\n}\r\n\r\n// schema is only needed for navProperty type name\r\nfunction parseTypeNameWithSchema(entityTypeName: string, schema: any) {\r\n  let result = MetadataStore.parseTypeName(entityTypeName);\r\n  if (schema && schema.cSpaceOSpaceMapping) {\r\n    let ns = getNamespaceFor(result!.shortTypeName, schema);\r\n    if (ns) {\r\n      result = MetadataStore.makeTypeHash(result!.shortTypeName, ns);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getNamespaceFor(shortName: string, schema: any) {\r\n  let ns: string;\r\n  let mapping = schema.cSpaceOSpaceMapping;\r\n  if (mapping) {\r\n    let fullName = mapping[schema.namespace + \".\" + shortName];\r\n    ns = fullName && fullName.substr(0, fullName.length - (shortName.length + 1));\r\n    if (ns) return ns;\r\n  }\r\n  // if schema does not also have an entityType node then\r\n  // this is an WebApi2 OData schema which is usually equal to 'Default'; which is useless.\r\n  if (schema.entityType || schema.namespace !== 'Default') {\r\n    return schema.namespace;\r\n  }\r\n  return null;\r\n}\r\n\r\n/** @hidden @internal */\r\nexport const CsdlMetadataParser = {\r\n  parse: parse\r\n};\r\n","import { core } from './core';\r\nimport { assertConfig } from './assert-param';\r\nimport { config } from './config';\r\n\r\n\r\n/** Configuration info to be passed to the [[LocalQueryComparisonOptions]] constructor. */\r\nexport interface LocalQueryComparisonOptionsConfig {\r\n  /** The name of this collection of configuration settings. */\r\n  name?: string;\r\n  /** Whether predicates that involve strings will be interpreted in a \"caseSensitive\" manner. Default is 'false'. */\r\n  isCaseSensitive?: boolean;\r\n  /* Whether or not to enforce the ANSI SQL standard\r\n  of padding strings of unequal lengths before comparison with spaces. Note that per the standard, padding only occurs with equality and\r\n  inequality predicates, and not with operations like 'startsWith', 'endsWith' or 'contains'.  Default is true. */\r\n  usesSql92CompliantStringComparison?: boolean;\r\n}\r\n\r\n/**\r\nA LocalQueryComparisonOptions instance is used to specify the \"comparison rules\" used when performing \"local queries\" in order\r\nto match the semantics of these same queries when executed against a remote service.  These options should be set based on the\r\nmanner in which your remote service interprets certain comparison operations.\r\n\r\nThe default LocalQueryComparisonOptions stipulates 'caseInsensitive\" queries with ANSI SQL rules regarding comparisons of unequal\r\nlength strings.\r\n**/\r\nexport class LocalQueryComparisonOptions {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on prototype\r\n  /** The name for this instance. */\r\n  name: string;\r\n  /** Whether predicates that involve strings will be interpreted in a \"caseSensitive\" manner. (default = false).  */\r\n  isCaseSensitive: boolean;\r\n  /* Whether or not to enforce the ANSI SQL standard\r\n  of padding strings of unequal lengths before comparison with spaces. Note that per the standard, padding only occurs with equality and\r\n  inequality predicates, and not with operations like 'startsWith', 'endsWith' or 'contains'.  Default is true. */\r\n  usesSql92CompliantStringComparison: boolean;\r\n\r\n  /**\r\n  LocalQueryComparisonOptions constructor\r\n  >      // create a 'caseSensitive - non SQL' instance.\r\n  >      var lqco = new LocalQueryComparisonOptions({\r\n  >              name: \"caseSensitive-nonSQL\"\r\n  >              isCaseSensitive: true;\r\n  >              usesSql92CompliantStringComparison: false;\r\n  >          });\r\n  >      // either apply it globally\r\n  >      lqco.setAsDefault();\r\n  >      // or to a specific MetadataStore\r\n  >      var ms = new MetadataStore({ localQueryComparisonOptions: lqco });\r\n  >      var em = new EntityManager( { metadataStore: ms });\r\n  @param config - A configuration object.\r\n  **/\r\n  constructor(lqcoConfig: LocalQueryComparisonOptionsConfig) {\r\n    assertConfig(lqcoConfig || {})\r\n        .whereParam(\"name\").isOptional().isString()\r\n        .whereParam(\"isCaseSensitive\").isOptional().isBoolean()\r\n        .whereParam(\"usesSql92CompliantStringComparison\").isBoolean()\r\n        .applyAll(this);\r\n    if (!this.name) {\r\n      this.name = core.getUuid();\r\n    }\r\n    config._storeObject(this, \"LocalQueryComparisonOptions\", this.name);\r\n  }\r\n\r\n  /**\r\n  Case insensitive SQL compliant options - this is also the default unless otherwise changed.\r\n  **/\r\n  static caseInsensitiveSQL = new LocalQueryComparisonOptions({\r\n    name: \"caseInsensitiveSQL\",\r\n    isCaseSensitive: false,\r\n    usesSql92CompliantStringComparison: true\r\n  });\r\n\r\n  /**\r\n  The default value whenever LocalQueryComparisonOptions are not specified. By default this is 'caseInsensitiveSQL'.\r\n  **/\r\n  static defaultInstance = new LocalQueryComparisonOptions(LocalQueryComparisonOptions.caseInsensitiveSQL);\r\n\r\n  /**\r\n  Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.\r\n  The current instance is returned unchanged.\r\n  >     var lqco = new LocalQueryComparisonOptions({\r\n  >        isCaseSensitive: false;\r\n  >        usesSql92CompliantStringComparison: true;\r\n  >     });\r\n  >     lqco.setAsDefault();\r\n  **/\r\n  setAsDefault() {\r\n    return core.setAsDefault(this, LocalQueryComparisonOptions);\r\n  }\r\n\r\n}\r\nLocalQueryComparisonOptions.prototype._$typeName = \"LocalQueryComparisonOptions\";\r\n","import { core } from './core';\r\nimport { ComplexType, DataProperty, NavigationProperty, EntityProperty } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\nimport { EntityAspect, ComplexAspect, Entity, StructuralObject } from './entity-aspect';\r\nimport { EntityState } from './entity-state';\r\nimport { EntityAction } from './entity-action';\r\n\r\n/** @hidden @internal */\r\nexport function defaultPropertyInterceptor(this: StructuralObject, property: EntityProperty, newValue: any, rawAccessorFn: Function) {\r\n  // 'this' is the entity itself in this context.\r\n\r\n  if (newValue === undefined) newValue = null; // remove? to allow assignment to undefined in Babel constructors?\r\n  let oldValue = rawAccessorFn();\r\n\r\n  let dataType = (property as any).dataType;\r\n  if (dataType && dataType.parse) {\r\n    // attempts to coerce a value to the correct type - if this fails return the value unchanged\r\n    if (Array.isArray(newValue) && !property.isScalar) {\r\n      newValue = newValue.map(function (nv) {\r\n        return dataType.parse(nv, typeof nv);\r\n      });\r\n    } else {\r\n      newValue = dataType.parse(newValue, typeof newValue);\r\n    }\r\n  }\r\n\r\n  // exit if no change - extra cruft is because dateTimes don't compare cleanly.\r\n  if (newValue === oldValue || (dataType && dataType.normalize && newValue && oldValue && dataType.normalize(newValue) === dataType.normalize(oldValue))) {\r\n    return;\r\n  }\r\n\r\n  // CANNOT DO NEXT LINE because it has the possibility of creating a new property\r\n  // 'entityAspect' on 'this'.  - Not permitted by IE inside of a defined property on a prototype.\r\n  // let entityAspect = new EntityAspect(this);\r\n\r\n  let propertyName: string;\r\n  let entityAspect = (this as any).entityAspect as EntityAspect;\r\n  if (entityAspect) {\r\n    propertyName = property.name;\r\n  } else {\r\n    let localAspect = (this as any).complexAspect as ComplexAspect;\r\n    if (localAspect) {\r\n      entityAspect = localAspect.getEntityAspect();\r\n      propertyName = localAspect.getPropertyPath(property.name);\r\n    } else {\r\n      // does not yet have an EntityAspect so just set the prop\r\n      rawAccessorFn(newValue);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Note that we need to handle multiple properties in process, not just one in order to avoid recursion.\r\n  // ( except in the case of null propagation with fks where null -> 0 in some cases.)\r\n  // (this may not be needed because of the newValue === oldValue test above)\r\n  let inProcess = entityAspect._inProcess = entityAspect._inProcess || [];\r\n  // check for recursion\r\n  if (inProcess.indexOf(property) >= 0) return;\r\n  inProcess.push(property);\r\n\r\n  try {\r\n\r\n    let context: IContext = {\r\n      parent: this,\r\n      property: property,\r\n      newValue: newValue,\r\n      oldValue: oldValue,\r\n      propertyName: propertyName,\r\n      entityAspect: entityAspect\r\n    };\r\n\r\n    if ((property as any).isComplexProperty) {\r\n      setDpValueComplex(context, rawAccessorFn);\r\n    } else if (property.isDataProperty) {\r\n      setDpValueSimple(context, rawAccessorFn);\r\n    } else {\r\n      setNpValue(context, rawAccessorFn);\r\n    }\r\n\r\n    postChangeEvents(context);\r\n\r\n  } finally {\r\n    inProcess.pop();\r\n  }\r\n}\r\n\r\ninterface IContext {\r\n  parent: StructuralObject;\r\n  property: EntityProperty;\r\n  propertyName: string;\r\n  entityAspect: EntityAspect;\r\n  oldValue: any;\r\n  newValue: any;\r\n}\r\n\r\nfunction setDpValueSimple(context: IContext, rawAccessorFn: any) {\r\n  let parent = context.parent;\r\n  let property = context.property as DataProperty;\r\n  let entityAspect = context.entityAspect;\r\n  let oldValue = context.oldValue;\r\n  let newValue = context.newValue;\r\n\r\n  let entityManager = entityAspect.entityManager;\r\n\r\n  if (!property.isScalar) {\r\n    throw new Error(\"Nonscalar data properties are readonly - items may be added or removed but the collection may not be changed.\");\r\n  }\r\n\r\n  // store an original value for this property if not already set\r\n  if (entityAspect.entityState.isUnchangedOrModified()) {\r\n    let propName = property.name;\r\n    // localAspect is not the same as entityAspect for complex props\r\n    let localAspect = EntityAspect.isEntity(parent) ? parent.entityAspect : parent.complexAspect;\r\n    if (localAspect.originalValues[propName] === undefined) {\r\n      // otherwise this entry will be skipped during serialization\r\n      localAspect.originalValues[propName] = oldValue !== undefined ? oldValue : property.defaultValue;\r\n    }\r\n  }\r\n\r\n  // if we are changing the key update our internal entityGroup indexes.\r\n  if (property.isPartOfKey && entityManager && !entityManager.isLoading) {\r\n    // 'entityType' on the next line be null for complex properties but it will only be ref'd within this\r\n    // fn when the property is part of the key\r\n    let entityType = (parent as Entity).entityType;\r\n    let keyProps = entityType.keyProperties;\r\n    let values = keyProps.map(function (p) {\r\n      if (p === property) {\r\n        return newValue;\r\n      } else {\r\n        return parent.getProperty(p.name);\r\n      }\r\n    });\r\n    let newKey = new EntityKey(entityType, values);\r\n    if (entityManager.findEntityByKey(newKey)) {\r\n      throw new Error(\"An entity with this key is already in the cache: \" + newKey.toString());\r\n    }\r\n    let oldKey = (parent as Entity).entityAspect.getKey();\r\n    let eg = entityManager._findEntityGroup(entityType);\r\n    eg._replaceKey(oldKey, newKey);\r\n  }\r\n\r\n  // process related updates ( the inverse relationship) first so that collection dups check works properly.\r\n  // update inverse relationship\r\n\r\n  let relatedNavProp = property.relatedNavigationProperty;\r\n  if (relatedNavProp && entityManager) {\r\n    // Example: bidirectional fkDataProperty: 1->n: order -> orderDetails\r\n    // orderDetail.orderId <- newOrderId || null\r\n    //    ==> orderDetail.order = lookupOrder(newOrderId)\r\n    //    ==> (see set navProp above)\r\n    //       and\r\n    // Example: bidirectional fkDataProperty: 1->1: order -> internationalOrder\r\n    // internationalOrder.orderId <- newOrderId || null\r\n    //    ==> internationalOrder.order = lookupOrder(newOrderId)\r\n    //    ==> (see set navProp above)\r\n\r\n    if (newValue != null) {\r\n      let key = new EntityKey(relatedNavProp.entityType, [newValue]);\r\n      let relatedEntity = entityManager.findEntityByKey(key);\r\n\r\n      if (relatedEntity) {\r\n        parent.setProperty(relatedNavProp.name, relatedEntity);\r\n      } else {\r\n        // it may not have been fetched yet in which case we want to add it as an unattachedChild.\r\n        entityManager._unattachedChildrenMap.addChild(key, relatedNavProp, parent as Entity);\r\n        parent.setProperty(relatedNavProp.name, null);\r\n      }\r\n    } else {\r\n      parent.setProperty(relatedNavProp.name, null);\r\n    }\r\n  } else if (property.inverseNavigationProperty && entityManager && !entityManager._inKeyFixup) {\r\n    // Example: unidirectional fkDataProperty: 1->n: region -> territories\r\n    // territory.regionId <- newRegionId\r\n    //    ==> lookupRegion(newRegionId).territories.push(territory)\r\n    //                and\r\n    // Example: unidirectional fkDataProperty: 1->1: order -> internationalOrder\r\n    // internationalOrder.orderId <- newOrderId\r\n    //    ==> lookupOrder(newOrderId).internationalOrder = internationalOrder\r\n    //                and\r\n    // Example: unidirectional fkDataProperty: 1->n: region -> territories\r\n    // territory.regionId <- null\r\n    //    ==> lookupRegion(territory.oldRegionId).territories.remove(oldTerritory);\r\n    //                and\r\n    // Example: unidirectional fkDataProperty: 1->1: order -> internationalOrder\r\n    // internationalOrder.orderId <- null\r\n    //    ==> lookupOrder(internationalOrder.oldOrderId).internationalOrder = null;\r\n\r\n    let invNavProp = property.inverseNavigationProperty;\r\n\r\n    if (oldValue != null) {\r\n      let key = new EntityKey(invNavProp.parentType, [oldValue]);\r\n      let relatedEntity = entityManager.findEntityByKey(key);\r\n      if (relatedEntity) {\r\n        if (invNavProp.isScalar) {\r\n          relatedEntity.setProperty(invNavProp.name, null);\r\n        } else {\r\n          // remove 'this' from old related nav prop\r\n          let relatedArray = relatedEntity.getProperty(invNavProp.name);\r\n          // arr.splice(arr.indexOf(value_to_remove), 1);\r\n          relatedArray.splice(relatedArray.indexOf(parent), 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (newValue != null) {\r\n      let key = new EntityKey(invNavProp.parentType, [newValue]);\r\n      let relatedEntity = entityManager.findEntityByKey(key);\r\n\r\n      if (relatedEntity) {\r\n        if (invNavProp.isScalar) {\r\n          relatedEntity.setProperty(invNavProp.name, parent);\r\n        } else {\r\n          relatedEntity.getProperty(invNavProp.name).push(parent);\r\n        }\r\n      } else {\r\n        // it may not have been fetched yet in which case we want to add it as an unattachedChild.\r\n        entityManager._unattachedChildrenMap.addChild(key, invNavProp, parent as Entity);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  rawAccessorFn(newValue);\r\n\r\n  updateStateAndValidate(context);\r\n\r\n  // if (property.isPartOfKey && (!this.complexAspect)) {\r\n  if (property.isPartOfKey) {\r\n    // propogate pk change to all related entities;\r\n    let entityType = (parent as Entity).entityType;\r\n    let propertyIx = entityType.keyProperties.indexOf(property);\r\n    // this part handles order.orderId => orderDetail.orderId\r\n    // but won't handle product.productId => orderDetail.productId because product\r\n    // doesn't have an orderDetails property.\r\n    entityType.navigationProperties.forEach(function (np) {\r\n      let inverseNp = np.inverse;\r\n      let fkNames = inverseNp ? inverseNp.foreignKeyNames : np.invForeignKeyNames;\r\n\r\n      if (fkNames.length === 0) return;\r\n      let npValue = parent.getProperty(np.name);\r\n      if (!npValue) return;\r\n      let fkName = fkNames[propertyIx];\r\n      if (np.isScalar) {\r\n        npValue.setProperty(fkName, newValue);\r\n      } else {\r\n        npValue.forEach(function (iv: any) {\r\n          iv.setProperty(fkName, newValue);\r\n        });\r\n      }\r\n    });\r\n    // this handles unidirectional problems not covered above.\r\n    if (entityManager) {\r\n      let inverseForeignKeyProperties = entityType.inverseForeignKeyProperties;\r\n      let baseEntityType = entityType.baseEntityType;\r\n      while (baseEntityType) {\r\n        inverseForeignKeyProperties = inverseForeignKeyProperties.concat(baseEntityType.inverseForeignKeyProperties);\r\n        baseEntityType = baseEntityType.baseEntityType;\r\n      }\r\n      inverseForeignKeyProperties.forEach((invFkProp) => {\r\n        if (invFkProp.relatedNavigationProperty!.inverse == null) {\r\n          // this next step may be slow - it iterates over all of the entities in a group;\r\n          // hopefully it doesn't happen often.\r\n          entityManager!._updateFkVal(invFkProp, oldValue, newValue);\r\n        }\r\n        \r\n      });\r\n    }\r\n\r\n    // insure that cached key is updated.\r\n    entityAspect.getKey(true);\r\n  }\r\n}\r\n\r\nfunction setDpValueComplex(context: IContext, rawAccessorFn: Function) {\r\n  let property = context.property as DataProperty;\r\n  let oldValue = context.oldValue;\r\n  let newValue = context.newValue;\r\n\r\n  // To get here it must be a ComplexProperty\r\n  // 'dataType' will be a complexType\r\n  let dataType = property.dataType as ComplexType;\r\n  if (property.isScalar) {\r\n    if (!newValue) {\r\n      throw new Error(core.formatString(\"You cannot set the '%1' property to null because it's datatype is the ComplexType: '%2'\", property.name, property.dataType.name));\r\n    }\r\n\r\n    if (!oldValue) {\r\n      let ctor = dataType.getCtor();\r\n      oldValue = new ctor();\r\n      rawAccessorFn(oldValue);\r\n    }\r\n    dataType.dataProperties.forEach(function (dp) {\r\n      let pn = dp.name;\r\n      let nv = newValue.getProperty(pn);\r\n      oldValue.setProperty(pn, nv);\r\n    });\r\n  } else {\r\n    throw new Error(core.formatString(\"You cannot set the non-scalar complex property: '%1' on the type: '%2'.\" +\r\n            \"Instead get the property and use array functions like 'push' or 'splice' to change its contents.\",\r\n        property.name, property.parentType.name));\r\n  }\r\n}\r\n\r\n\r\nfunction setNpValue(context: IContext, rawAccessorFn: Function) {\r\n\r\n  let parent = context.parent as Entity;\r\n  let property = context.property as NavigationProperty;\r\n  let entityAspect = context.entityAspect;\r\n  let oldValue = context.oldValue;\r\n  let newValue = context.newValue;\r\n\r\n  if (!property.isScalar) {\r\n    throw new Error(\"Nonscalar navigation properties are readonly - entities can be added or removed but the collection may not be changed.\");\r\n  }\r\n\r\n  let entityManager = entityAspect.entityManager;\r\n  let inverseProp = property.inverse;\r\n\r\n  // manage attachment -\r\n  if (newValue != null) {\r\n    let newAspect = newValue.entityAspect;\r\n    if (entityManager) {\r\n      if (newAspect.entityState.isDetached()) {\r\n        if (!entityManager.isLoading) {\r\n          entityManager.attachEntity(newValue, EntityState.Added);\r\n        }\r\n      } else {\r\n        if (newAspect.entityManager !== entityManager) {\r\n          throw new Error(\"An Entity cannot be attached to an entity in another EntityManager. One of the two entities must be detached first.\");\r\n        }\r\n      }\r\n    } else {\r\n      if (newAspect && newAspect.entityManager) {\r\n        entityManager = newAspect.entityManager;\r\n        if (!entityManager!.isLoading) {\r\n          entityManager!.attachEntity(entityAspect.entity!, EntityState.Added);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // process related updates ( the inverse relationship) first so that collection dups check works properly.\r\n  // update inverse relationship\r\n  if (inverseProp) {\r\n    ///\r\n    if (inverseProp.isScalar) {\r\n      // Example: bidirectional navProperty: 1->1: order -> internationalOrder\r\n      // order.internationalOrder <- internationalOrder || null\r\n      //    ==> (oldInternationalOrder.order = null)\r\n      //    ==> internationalOrder.order = order\r\n      if (oldValue != null) {\r\n        // TODO: null -> NullEntity later\r\n        oldValue.setProperty(inverseProp.name, null);\r\n      }\r\n      if (newValue != null) {\r\n        newValue.setProperty(inverseProp.name, parent);\r\n      }\r\n    } else {\r\n      // Example: bidirectional navProperty: 1->n: order -> orderDetails\r\n      // orderDetail.order <- newOrder || null\r\n      //    ==> (oldOrder).orderDetails.remove(orderDetail)\r\n      //    ==> order.orderDetails.push(newOrder)\r\n      if (oldValue != null) {\r\n        let oldSiblings = oldValue.getProperty(inverseProp.name);\r\n        let ix = oldSiblings.indexOf(parent);\r\n        if (ix !== -1) {\r\n          oldSiblings.splice(ix, 1);\r\n        }\r\n      }\r\n      if (newValue != null) {\r\n        let siblings = newValue.getProperty(inverseProp.name);\r\n        // recursion check if already in the collection is performed by the relationArray\r\n        siblings.push(parent);\r\n      }\r\n    }\r\n  } else if (property.invForeignKeyNames && entityManager && !entityManager._inKeyFixup) {\r\n    let invForeignKeyNames = property.invForeignKeyNames;\r\n    if (newValue != null) {\r\n      // Example: unidirectional navProperty: 1->1: order -> internationalOrder\r\n      // order.InternationalOrder <- internationalOrder\r\n      //    ==> internationalOrder.orderId = orderId\r\n      //      and\r\n      // Example: unidirectional navProperty: 1->n: order -> orderDetails\r\n      // orderDetail.order <-xxx newOrder\r\n      //    ==> CAN'T HAPPEN because if unidirectional because orderDetail will not have an order prop\r\n      let pkValues = parent.entityAspect.getKey().values;\r\n      invForeignKeyNames.forEach( (fkName, i) => {\r\n        newValue!.setProperty(fkName, pkValues[i]);\r\n      });\r\n    } else {\r\n      // Example: unidirectional navProperty: 1->1: order -> internationalOrder\r\n      // order.internationalOrder <- null\r\n      //    ==> (old internationalOrder).orderId = null\r\n      //        and\r\n      // Example: unidirectional navProperty: 1->n: order -> orderDetails\r\n      // orderDetail.order <-xxx newOrder\r\n      //    ==> CAN'T HAPPEN because if unidirectional because orderDetail will not have an order prop\r\n      if (oldValue != null) {\r\n        invForeignKeyNames.forEach( (fkName) => {\r\n          let fkProp = oldValue.entityType.getProperty(fkName);\r\n          if (!fkProp.isPartOfKey) {\r\n            // don't update with null if fk is part of the key\r\n            oldValue.setProperty(fkName, null);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  rawAccessorFn(newValue);\r\n\r\n  updateStateAndValidate(context);\r\n\r\n  // update fk data property - this can only occur if this navProperty has\r\n  // a corresponding fk on this entity.\r\n  if (property.relatedDataProperties) {\r\n    let entityState = entityAspect.entityState;\r\n    // if either side of nav prop is detached don't clear fks. Note: oldValue in next line cannot be null so no check is needed.\r\n    if (newValue == null && (entityState.isDetached() || oldValue.entityAspect.entityState.isDetached())) return;\r\n    if (entityState.isDeleted()) return;\r\n    let inverseKeyProps = property.entityType.keyProperties;\r\n    inverseKeyProps.forEach(function (keyProp, i) {\r\n      let relatedDataProp = property.relatedDataProperties[i];\r\n      // Do not trash related property if it is part of that entity's key\r\n      if (newValue || !relatedDataProp.isPartOfKey) {\r\n        let relatedValue = newValue ? newValue.getProperty(keyProp.name) : relatedDataProp.defaultValue;\r\n        parent.setProperty(relatedDataProp.name, relatedValue);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction postChangeEvents(context: IContext) {\r\n  let entityAspect = context.entityAspect;\r\n\r\n  let entityManager = entityAspect.entityManager;\r\n  let entity = entityAspect.entity;\r\n\r\n  let propChangedArgs = { entity: entity!, parent: context.parent, property: context.property, propertyName: context.propertyName, oldValue: context.oldValue, newValue: context.newValue };\r\n  if (entityManager) {\r\n    // propertyChanged will be fired during loading but we only want to fire it once per entity, not once per property.\r\n    // so propertyChanged is fired in the entityManager mergeEntity method if not fired here.\r\n    if ((!entityManager.isLoading) && (!entityManager.isRejectingChanges)) {\r\n      entityAspect.propertyChanged.publish(propChangedArgs);\r\n      // don't fire entityChanged event if propertyChanged is suppressed.\r\n      entityManager.entityChanged.publish({ entityAction: EntityAction.PropertyChange, entity: entity, args: propChangedArgs });\r\n    }\r\n  } else {\r\n    entityAspect.propertyChanged.publish(propChangedArgs);\r\n  }\r\n}\r\n\r\nfunction updateStateAndValidate(context: IContext) {\r\n  let entityAspect = context.entityAspect;\r\n  let entityManager = entityAspect.entityManager;\r\n  if (entityManager == null || entityManager.isLoading) return;\r\n  let property = context.property;\r\n\r\n  if (entityAspect.entityState.isUnchanged() && !property.isUnmapped) {\r\n    entityAspect.setModified();\r\n  }\r\n\r\n  if (entityManager.validationOptions.validateOnPropertyChange) {\r\n    // entityAspect.entity is NOT the same as parent in the code below. It's use is deliberate.\r\n    entityAspect._validateProperty(context.newValue,\r\n        { entity: entityAspect.entity, property: property, propertyName: context.propertyName, oldValue: context.oldValue });\r\n  }\r\n}\r\n","import { core, ErrorCallback } from './core';\r\nimport { config } from './config';\r\nimport { BreezeEvent } from './event';\r\nimport { assertParam, assertConfig, Param } from './assert-param';\r\nimport { DataType } from './data-type';\r\nimport { EntityAspect, ComplexAspect, Entity, ComplexObject, StructuralObject } from './entity-aspect';\r\nimport { EntityKey } from './entity-key';\r\nimport { Validator } from './validate';\r\nimport { BreezeEnum } from './enum';\r\nimport { DataService } from './data-service';\r\nimport { NamingConvention } from './naming-convention';\r\nimport { CsdlMetadataParser } from './csdl-metadata-parser'; // TODO isolate this later;\r\nimport { LocalQueryComparisonOptions } from './local-query-comparison-options';\r\nimport { defaultPropertyInterceptor } from './default-property-interceptor';\r\n\r\nexport type EntityProperty = DataProperty | NavigationProperty;\r\nexport type StructuralType = EntityType | ComplexType;\r\n\r\n/** @hidden @internal */\r\nexport interface IStructuralTypeMap {\r\n  [index: string]: StructuralType;\r\n}\r\n\r\n// TODO: consider exposing later\r\n/** @hidden @internal */\r\nexport interface IMetadataJson {\r\n  metadataVersion: string;\r\n  name: string;\r\n  namingConvention: string;\r\n  localQueryComparisonOptions: string;\r\n  dataServices: Object[]; // IDataServiceJson[]\r\n  structuralTypes: Object[]; // IStructuralTypeJson[]; \r\n  resourceEntityTypeMap: Object[]; // IResourceEntityTypeJson[]\r\n  incompleteTypeMap: Object[];\r\n}\r\n\r\n/** Configuration info to be passed to the [[MetadataStore]] constructor */\r\nexport interface MetadataStoreConfig {\r\n  /** The  [[NamingConvention]] associated with this MetadataStore. */\r\n  namingConvention?: NamingConvention;\r\n  /** The  [[LocalQueryComparisonOptions]] associated with this MetadataStore. */\r\n  localQueryComparisonOptions?: LocalQueryComparisonOptions;\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n  name?: string;\r\n}\r\n\r\nexport interface MetadataFetchedEventArgs {\r\n  metadataStore: MetadataStore;\r\n  dataService: DataService | string;\r\n  rawMetadata: any;\r\n}\r\n\r\n/**\r\nAn instance of the MetadataStore contains all of the metadata about a collection of [[EntityType]]'s.\r\nMetadataStores may be shared across [[EntityManager]]'s.  If an EntityManager is created without an\r\nexplicit MetadataStore, the MetadataStore from the MetadataStore.defaultInstance property will be used.\r\n@dynamic\r\n**/\r\nexport class MetadataStore {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n\r\n  /** @hidden @internal */\r\n  static __id = 0;\r\n  /** @hidden @internal */\r\n  static ANONTYPE_PREFIX = \"_IB_\";\r\n  /** The version of any MetadataStores created by this class */\r\n  static metadataVersion = '1.0.5';\r\n\r\n  name: string;\r\n  dataServices: DataService[];\r\n\r\n  /** The  [[NamingConvention]] associated with this MetadataStore. __Read Only__ */\r\n  namingConvention: NamingConvention;\r\n  /** The  [[LocalQueryComparisonOptions]] associated with this MetadataStore. __Read Only__ */\r\n  localQueryComparisonOptions: LocalQueryComparisonOptions;\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n  /**\r\n  An [[BreezeEvent]] that fires after a MetadataStore has completed fetching metadata from a remote service.\r\n  \r\n  @eventArgs -\r\n    - metadataStore - The MetadataStore into which the metadata was fetched.\r\n    - dataService - The [[DataService]] that metadata was fetched from.\r\n    - rawMetadata - {Object} The raw metadata returned from the service. (It will have already been processed by this point).\r\n  >      let ms = myEntityManager.metadataStore;\r\n  >      ms.metadataFetched.subscribe(function(args) {\r\n  >          let metadataStore = args.metadataStore;\r\n  >          let dataService = args.dataService;\r\n  >      });\r\n  @event\r\n  **/\r\n  metadataFetched: BreezeEvent<MetadataFetchedEventArgs>;\r\n  /** @hidden @internal */\r\n  _resourceEntityTypeMap: {};\r\n  /** @hidden @internal */\r\n  _entityTypeResourceMap: {};\r\n  /** @hidden @internal */\r\n  _structuralTypeMap: IStructuralTypeMap; // key is qualified structuraltype name - value is structuralType. ( structural = entityType or complexType).\r\n  /** @hidden @internal **/\r\n  _shortNameMap: {}; // key is shortName, value is qualified name - does not need to be serialized.\r\n  /** @hidden @internal **/\r\n  _ctorRegistry: {}; // key is either short or qual type name - value is ctor;\r\n  /** @hidden @internal **/\r\n  _incompleteTypeMap: {}; // key is entityTypeName; value is array of nav props\r\n  /** @hidden @internal **/\r\n  _incompleteComplexTypeMap: {}; //\r\n  /** @hidden @internal **/\r\n  _deferredTypes: {};\r\n  /** @hidden @internal **/\r\n  _id: number;\r\n\r\n  /**\r\n  Constructs a new MetadataStore.\r\n  \r\n  >     let ms = new MetadataStore();\r\n\r\n  The store can then be associated with an EntityManager\r\n  >     let entityManager = new EntityManager( {\r\n  >         serviceName: \"breeze/NorthwindIBModel\", \r\n  >         metadataStore: ms \r\n  >     });\r\n\r\n  or for an existing EntityManager\r\n  >    // Assume em1 is an existing EntityManager\r\n  >    em1.setProperties( { metadataStore: ms });\r\n  \r\n  @param config - Configuration settings .\r\n    - namingConvention - (default=NamingConvention.defaultInstance) NamingConvention to be used in mapping property names\r\n  between client and server. Uses the NamingConvention.defaultInstance if not specified.\r\n    - localQueryComparisonOptions - (default=LocalQueryComparisonOptions.defaultInstance) The LocalQueryComparisonOptions to be\r\n  used when performing \"local queries\" in order to match the semantics of queries against a remote service.\r\n    - serializerFn - A function that is used to mediate the serialization of instances of this type.\r\n  **/\r\n  constructor(config?: MetadataStoreConfig) {\r\n    config = config || {};\r\n    assertConfig(config)\r\n      .whereParam(\"namingConvention\").isOptional().isInstanceOf(NamingConvention).withDefault(NamingConvention.defaultInstance)\r\n      .whereParam(\"localQueryComparisonOptions\").isOptional().isInstanceOf(LocalQueryComparisonOptions).withDefault(LocalQueryComparisonOptions.defaultInstance)\r\n      .whereParam(\"serializerFn\").isOptional().isFunction()\r\n      .applyAll(this);\r\n    this.dataServices = []; // array of dataServices;\r\n    this._resourceEntityTypeMap = {}; // key is resource name - value is qualified entityType name\r\n    this._structuralTypeMap = {}; // key is qualified structuraltype name - value is structuralType. ( structural = entityType or complexType).\r\n    this._shortNameMap = {}; // key is shortName, value is qualified name - does not need to be serialized.\r\n    this._ctorRegistry = {}; // key is either short or qual type name - value is ctor;\r\n\r\n    this._incompleteTypeMap = {}; // key is entityTypeName; value is array of nav props\r\n    this._incompleteComplexTypeMap = {}; // key is complexTypeName; value is array of complexType props\r\n    this._id = MetadataStore.__id++;\r\n    this.metadataFetched = new BreezeEvent(\"metadataFetched\", this);\r\n\r\n  }\r\n\r\n  // needs to be made avail to dataService.xxx files\r\n  static normalizeTypeName = core.memoize(function (rawTypeName: string) {\r\n    return rawTypeName && MetadataStore.parseTypeName(rawTypeName).typeName;\r\n  });\r\n  // for debugging use the line below instead.\r\n  //ctor.normalizeTypeName = function (rawTypeName) { return parseTypeName(rawTypeName).typeName; };\r\n\r\n  /**\r\n  General purpose property set method\r\n  \r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     em1.metadataStore.setProperties( {\r\n  >         version: \"6.1.3\",\r\n  >         serializerFn: function(prop, value) {\r\n  >         return (prop.isUnmapped) ? undefined : value;\r\n  >         }\r\n  >     )};\r\n  @param config -  An object containing the selected properties and values to set.\r\n  **/\r\n  setProperties(config: MetadataStoreConfig) {\r\n    assertConfig(config)\r\n      .whereParam(\"name\").isString().isOptional()\r\n      .whereParam(\"serializerFn\").isFunction().isOptional()\r\n      .applyAll(this);\r\n  }\r\n\r\n  /**\r\n  Adds a DataService to this MetadataStore. If a DataService with the same serviceName is already\r\n  in the MetadataStore an exception will be thrown.\r\n  @param dataService - The [[DataService]] to add\r\n  @param shouldOverwrite - (default=false) Permit overwrite of existing DataService rather than throw exception\r\n  **/\r\n  addDataService(dataService: DataService, shouldOverwrite?: boolean) {\r\n    assertParam(dataService, \"dataService\").isInstanceOf(DataService).check();\r\n    assertParam(shouldOverwrite, \"shouldOverwrite\").isBoolean().isOptional().check();\r\n    let ix = this._getDataServiceIndex(dataService.serviceName);\r\n    if (ix >= 0) {\r\n      if (!!shouldOverwrite) {\r\n        this.dataServices[ix] = dataService;\r\n      } else {\r\n        throw new Error(\"A dataService with this name '\" + dataService.serviceName + \"' already exists in this MetadataStore\");\r\n      }\r\n    } else {\r\n      this.dataServices.push(dataService);\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _getDataServiceIndex(serviceName: string) {\r\n    return core.arrayIndexOf(this.dataServices, function (ds) {\r\n      return ds.serviceName === serviceName;\r\n    });\r\n  }\r\n\r\n  /**\r\n  Adds an EntityType to this MetadataStore.  No additional properties may be added to the EntityType after its has\r\n  been added to the MetadataStore.\r\n  @param structuralType - The EntityType or ComplexType to add\r\n  **/\r\n  addEntityType(stype: StructuralType | EntityTypeConfig | ComplexTypeConfig) {\r\n    let structuralType: StructuralType;\r\n    if (stype instanceof EntityType || stype instanceof ComplexType) {\r\n      structuralType = stype;\r\n    } else {\r\n      structuralType = (stype as any).isComplexType ? new ComplexType(stype) : new EntityType(stype);\r\n    }\r\n\r\n    // if (!structuralType.isComplexType) { // same as below but isn't a 'type guard'\r\n    if (structuralType instanceof EntityType) {\r\n      if (structuralType.baseTypeName && !structuralType.baseEntityType) {\r\n        let baseEntityType = this._getStructuralType(structuralType.baseTypeName, true);\r\n        // safe cast because we know that baseEntityType must be an EntityType if the structuralType is an EntityType\r\n        structuralType._updateFromBase(baseEntityType as EntityType);\r\n      }\r\n      if (structuralType.keyProperties.length === 0 && !structuralType.isAbstract) {\r\n        throw new Error(\"Unable to add \" + structuralType.name +\r\n          \" to this MetadataStore.  An EntityType must have at least one property designated as a key property - See the 'DataProperty.isPartOfKey' property.\");\r\n      }\r\n    }\r\n\r\n    structuralType.metadataStore = this;\r\n    // don't register anon types\r\n    if (!(structuralType as any).isAnonymous) {\r\n      if (this._structuralTypeMap[structuralType.name]) {\r\n        throw new Error(\"Type \" + structuralType.name + \" already exists in this MetadataStore.\");\r\n      }\r\n\r\n      this._structuralTypeMap[structuralType.name] = structuralType;\r\n      this._shortNameMap[structuralType.shortName] = structuralType.name;\r\n    }\r\n\r\n    structuralType.getProperties().forEach(p => {\r\n      structuralType._updateNames(p);\r\n      if (!p.isUnmapped) {\r\n        structuralType._mappedPropertiesCount++;\r\n      }\r\n    });\r\n\r\n    structuralType._updateCps();\r\n\r\n    // 'isEntityType' is a type guard\r\n    if (structuralType instanceof EntityType) {\r\n      structuralType._updateNps();\r\n      // give the type it's base's resource name if it doesn't have its own.\r\n      let defResourceName = structuralType.defaultResourceName || (structuralType.baseEntityType && structuralType.baseEntityType.defaultResourceName);\r\n      if (defResourceName && !this.getEntityTypeNameForResourceName(defResourceName)) {\r\n        this.setEntityTypeForResourceName(defResourceName, structuralType.name);\r\n      }\r\n      structuralType.defaultResourceName = defResourceName;\r\n      // check if this structural type's name, short version or qualified version has a registered ctor.\r\n      structuralType.getEntityCtor();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  /**\r\n  Exports this MetadataStore to a serialized string appropriate for local storage.   This operation is also called\r\n  internally when exporting an EntityManager.\r\n  >      // assume ms is a previously created MetadataStore\r\n  >      let metadataAsString = ms.exportMetadata();\r\n  >      window.localStorage.setItem(\"metadata\", metadataAsString);\r\n  >      // and later, usually in a different session imported\r\n  >      let metadataFromStorage = window.localStorage.getItem(\"metadata\");\r\n  >      let newMetadataStore = new MetadataStore();\r\n  >      newMetadataStore.importMetadata(metadataFromStorage);\r\n  @return A serialized version of this MetadataStore that may be stored locally and later restored.\r\n  **/\r\n  exportMetadata() {\r\n    let result = JSON.stringify({\r\n      \"metadataVersion\": MetadataStore.metadataVersion,\r\n      \"name\": this.name,\r\n      \"namingConvention\": this.namingConvention.name,\r\n      \"localQueryComparisonOptions\": this.localQueryComparisonOptions.name,\r\n      \"dataServices\": this.dataServices,\r\n      \"structuralTypes\": core.objectMap(this._structuralTypeMap),\r\n      \"resourceEntityTypeMap\": this._resourceEntityTypeMap\r\n    }, null, config.stringifyPad);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Imports a previously exported serialized MetadataStore into this MetadataStore.\r\n    \r\n  >      // assume ms is a previously created MetadataStore\r\n  >      let metadataAsString = ms.exportMetadata();\r\n  >      window.localStorage.setItem(\"metadata\", metadataAsString);\r\n  >      // and later, usually in a different session\r\n  >      let metadataFromStorage = window.localStorage.getItem(\"metadata\");\r\n  >      let newMetadataStore = new MetadataStore();\r\n  >      newMetadataStore.importMetadata(metadataFromStorage);\r\n  @param exportedMetadata - A previously exported MetadataStore.\r\n  @param allowMerge -  Allows custom metadata to be merged into existing metadata types.\r\n  @return This MetadataStore.\r\n  @chainable\r\n  **/\r\n  importMetadata(exportedMetadata: string | Object, allowMerge: boolean = false) {\r\n    assertParam(allowMerge, \"allowMerge\").isOptional().isBoolean().check();\r\n    this._deferredTypes = {};\r\n    // insure that we don't mutate incoming exportedMetadata ( if its an object)\r\n    let metadataAsString = (typeof (exportedMetadata) === \"string\") ? exportedMetadata : JSON.stringify(exportedMetadata);\r\n    const metadataJson = JSON.parse(metadataAsString);\r\n\r\n    if (metadataJson.schema) {\r\n      return CsdlMetadataParser.parse(this, metadataJson.schema, metadataJson.altMetadata);\r\n    }\r\n\r\n    let json = metadataJson as IMetadataJson;\r\n    if (json.metadataVersion && json.metadataVersion !== MetadataStore.metadataVersion) {\r\n      let msg = core.formatString(\"Cannot import metadata with a different 'metadataVersion' (%1) than the current 'MetadataStore.metadataVersion' (%2) \",\r\n        json.metadataVersion, MetadataStore.metadataVersion);\r\n      throw new Error(msg);\r\n    }\r\n\r\n    let ncName = json.namingConvention;\r\n    let lqcoName = json.localQueryComparisonOptions;\r\n    if (this.isEmpty()) {\r\n      this.namingConvention = config._fetchObject(NamingConvention, ncName) || this.namingConvention;\r\n      this.localQueryComparisonOptions = config._fetchObject(LocalQueryComparisonOptions, lqcoName) || this.localQueryComparisonOptions;\r\n    } else {\r\n      if (ncName && this.namingConvention.name !== ncName) {\r\n        throw new Error(\"Cannot import metadata with a different 'namingConvention' from the current MetadataStore\");\r\n      }\r\n      if (lqcoName && this.localQueryComparisonOptions.name !== lqcoName) {\r\n        throw new Error(\"Cannot import metadata with different 'localQueryComparisonOptions' from the current MetadataStore\");\r\n      }\r\n    }\r\n\r\n    //noinspection JSHint\r\n    json.dataServices && json.dataServices.forEach((ds) => {\r\n      let realDs = DataService.fromJSON(ds);\r\n      this.addDataService(realDs, true);\r\n    });\r\n\r\n    json.structuralTypes && json.structuralTypes.forEach((stype) => {\r\n      structuralTypeFromJson(this, stype, allowMerge);\r\n    });\r\n    core.extend(this._resourceEntityTypeMap, json.resourceEntityTypeMap);\r\n    core.extend(this._incompleteTypeMap, json.incompleteTypeMap);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n  Creates a new MetadataStore from a previously exported serialized MetadataStore\r\n  >      // assume ms is a previously created MetadataStore\r\n  >      let metadataAsString = ms.exportMetadata();\r\n  >      window.localStorage.setItem(\"metadata\", metadataAsString);\r\n  >      // and later, usually in a different session\r\n  >      let metadataFromStorage = window.localStorage.getItem(\"metadata\");\r\n  >      let newMetadataStore = MetadataStore.importMetadata(metadataFromStorage);\r\n  @param exportedString - A previously exported MetadataStore.\r\n  @return A new MetadataStore.\r\n  **/\r\n  static importMetadata(exportedString: string) {\r\n    let ms = new MetadataStore();\r\n    ms.importMetadata(exportedString);\r\n    return ms;\r\n  }\r\n\r\n  /**\r\n  Returns whether Metadata has been retrieved for a specified service name.\r\n  >      // Assume em1 is an existing EntityManager.\r\n  >      if (!em1.metadataStore.hasMetadataFor(\"breeze/NorthwindIBModel\"))) {\r\n  >          // do something interesting\r\n  >      }\r\n  @param serviceName - The service name.\r\n  @return Whether metadata has already been retrieved for the specified service name.\r\n  **/\r\n  hasMetadataFor(serviceName: string) {\r\n    return !!this.getDataService(serviceName);\r\n  }\r\n\r\n  /**\r\n  Returns the DataService for a specified service name\r\n  >      // Assume em1 is an existing EntityManager.\r\n  >      let ds = em1.metadataStore.getDataService(\"breeze/NorthwindIBModel\");\r\n  >      let adapterName = ds.adapterName; // may be null\r\n  @param serviceName - The service name.\r\n  @return The DataService with the specified name.\r\n  **/\r\n  getDataService(serviceName: string) {\r\n    assertParam(serviceName, \"serviceName\").isString().check();\r\n\r\n    serviceName = DataService._normalizeServiceName(serviceName);\r\n    return core.arrayFirst(this.dataServices, function (ds: DataService) {\r\n      return ds.serviceName === serviceName;\r\n    });\r\n  }\r\n\r\n  /**\r\n  Fetches the metadata for a specified 'service'. This method is automatically called\r\n  internally by an EntityManager before its first query against a new service. __Async__\r\n\r\n  Usually you will not actually process the results of a fetchMetadata call directly, but will instead\r\n  ask for the metadata from the EntityManager after the fetchMetadata call returns.\r\n  >      let ms = new MetadataStore();\r\n  >      // or more commonly\r\n  >      // let ms = anEntityManager.metadataStore;\r\n  >      ms.fetchMetadata(\"breeze/NorthwindIBModel\").then(function(rawMetadata) {\r\n  >            // do something with the metadata\r\n  >      }).catch(function(exception) {\r\n  >          // handle exception here\r\n  >      });\r\n  @param dataService -  Either a DataService or just the name of the DataService to fetch metadata for.\r\n  @param callback - Function called on success.\r\n  @param errorCallback - Function called on failure.\r\n  @return Promise\r\n  **/\r\n  fetchMetadata(dataService: string | DataService, callback?: (schema: any) => void, errorCallback?: ErrorCallback) {\r\n    try {\r\n      assertParam(dataService, \"dataService\").isString().or().isInstanceOf(DataService).check();\r\n      assertParam(callback, \"callback\").isFunction().isOptional().check();\r\n      assertParam(errorCallback, \"errorCallback\").isFunction().isOptional().check();\r\n\r\n      if (typeof dataService === \"string\") {\r\n        // use the dataService with a matching name or create a new one.\r\n        dataService = this.getDataService(dataService) || new DataService({ serviceName: dataService });\r\n      }\r\n\r\n      dataService = DataService.resolve([dataService]);\r\n\r\n      if (this.hasMetadataFor(dataService.serviceName)) {\r\n        throw new Error(\"Metadata for a specific serviceName may only be fetched once per MetadataStore. ServiceName: \" + dataService.serviceName);\r\n      }\r\n\r\n      return dataService.adapterInstance!.fetchMetadata(this, dataService).then((rawMetadata: any) => {\r\n        this.metadataFetched.publish({ metadataStore: this, dataService: dataService, rawMetadata: rawMetadata });\r\n        if (callback) callback(rawMetadata);\r\n        return Promise.resolve(rawMetadata);\r\n      }, function (error: any) {\r\n        if (errorCallback) errorCallback(error);\r\n        return Promise.reject(error);\r\n      });\r\n    } catch (e) {\r\n      return Promise.reject(e);\r\n    }\r\n  }\r\n\r\n\r\n  // TODO: strongly type interceptor below.\r\n  /**\r\n  Used to register a constructor for an EntityType that is not known via standard Metadata discovery;\r\n  i.e. an unmapped type.\r\n  @param entityCtor - The constructor function for the 'unmapped' type.\r\n  @param interceptor - An interceptor function\r\n  **/\r\n  trackUnmappedType(entityCtor: any, interceptor: any) {\r\n    assertParam(entityCtor, \"entityCtor\").isFunction().check();\r\n    assertParam(interceptor, \"interceptor\").isFunction().isOptional().check();\r\n    // TODO: think about adding this to the MetadataStore.\r\n    let entityType = new EntityType(this);\r\n    entityType._setCtor(entityCtor, interceptor);\r\n  }\r\n\r\n  /**\r\n  Provides a mechanism to register a 'custom' constructor to be used when creating new instances\r\n  of the specified entity type.  If this call is not made, a default constructor is created for\r\n  the entity as needed.\r\n  This call may be made before or after the corresponding EntityType has been discovered via\r\n  Metadata discovery.\r\n  >      let Customer = function () {\r\n  >              this.miscData = \"asdf\";\r\n  >          };\r\n  >      Customer.prototype.doFoo() {\r\n  >              ...\r\n  >          }\r\n  >      // assume em1 is a preexisting EntityManager;\r\n  >      em1.metadataStore.registerEntityTypeCtor(\"Customer\", Customer);\r\n  >      // any queries or EntityType.create calls from this point on will call the Customer constructor\r\n  >      // registered above.\r\n  @param structuralTypeName - The name of the EntityType or ComplexType.\r\n  @param aCtor - The constructor for this EntityType or ComplexType; may be null if all you want to do is set the next parameter.\r\n  @param initFn - A function or the name of a function on the entity that is to be executed immediately after the entity has been created\r\n  and populated with any initial values. Called with 'initFn(entity)'\r\n  @param noTrackingFn - A function that is executed immediately after a noTracking entity has been created and whose return\r\n  value will be used in place of the noTracking entity.\r\n  **/\r\n  registerEntityTypeCtor(structuralTypeName: string, aCtor?: any, initFn?: Function | string, noTrackingFn?: Function) {\r\n    assertParam(structuralTypeName, \"structuralTypeName\").isString().check();\r\n    assertParam(aCtor, \"aCtor\").isFunction().isOptional().check();\r\n    assertParam(initFn, \"initFn\").isOptional().isFunction().or().isString().check();\r\n    assertParam(noTrackingFn, \"noTrackingFn\").isOptional().isFunction().check();\r\n\r\n    let qualifiedTypeName = getQualifiedTypeName(this, structuralTypeName, false);\r\n    let typeName = qualifiedTypeName || structuralTypeName;\r\n\r\n    if (aCtor) {\r\n      if (aCtor._$typeName && aCtor._$typeName !== typeName) {\r\n        // TODO: wrap this - console and especially console.warn does not exist in all browsers.\r\n        console.warn(\"Registering a constructor for \" + typeName + \" that is already used for \" + aCtor._$typeName + \".\");\r\n      }\r\n      aCtor._$typeName = typeName;\r\n    }\r\n\r\n    this._ctorRegistry[typeName] = { ctor: aCtor, initFn: initFn, noTrackingFn: noTrackingFn };\r\n    if (qualifiedTypeName) {\r\n      let stype = this._structuralTypeMap[qualifiedTypeName];\r\n      stype && stype.getCtor(true); // this will complete the registration if avail now.\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n  Returns whether this MetadataStore contains any metadata yet.\r\n  >      // assume em1 is a preexisting EntityManager;\r\n  >      if (em1.metadataStore.isEmpty()) {\r\n  >          // do something interesting\r\n  >      }\r\n  **/\r\n  isEmpty() {\r\n    return core.isEmpty(this._structuralTypeMap);\r\n  }\r\n\r\n  /**\r\n  Returns an [[EntityType]] or null given its name.\r\n  >      // assume em1 is a preexisting EntityManager\r\n  >      let odType = em1.metadataStore.getAsEntityType(\"OrderDetail\");\r\n\r\n  or to throw an error if the type is not found\r\n  >      let badType = em1.metadataStore.getAsEntityType(\"Foo\", false);\r\n  >      // badType will not get set and an exception will be thrown.\r\n  @param structuralTypeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\r\n  that same short name an exception will be thrown.\r\n  @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.\r\n  @return The EntityType. ComplexType or 'null' if not not found.\r\n  **/\r\n  getAsEntityType(typeName: string, okIfNotFound: boolean = false) {\r\n    const st = this.getStructuralType(typeName, okIfNotFound);\r\n    if (st instanceof EntityType) {\r\n      return st as EntityType;\r\n    } else if (okIfNotFound) {\r\n      return null;\r\n    } else {\r\n      let msg = core.formatString(\"Unable to locate an 'EntityType' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.\", typeName);\r\n      throw new Error(msg);\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns an [[EntityType]] or null given its name.\r\n  >      // assume em1 is a preexisting EntityManager\r\n  >      let locType = em1.metadataStore.getAsComplexType(\"Location\");\r\n\r\n  or to throw an error if the type is not found\r\n  >      let badType = em1.metadataStore.getAsComplexType(\"Foo\", false);\r\n  >      // badType will not get set and an exception will be thrown.\r\n  @param structuralTypeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\r\n  that same short name an exception will be thrown.\r\n  @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.\r\n  @return The EntityType. ComplexType or 'null' if not not found.\r\n  **/\r\n getAsComplexType(typeName: string, okIfNotFound: boolean = false) {\r\n  const st = this.getStructuralType(typeName, okIfNotFound);\r\n  if (st instanceof ComplexType) {\r\n    return st as ComplexType;\r\n  } else if (okIfNotFound) {\r\n    return null;\r\n  } else {\r\n    let msg = core.formatString(\"Unable to locate an 'ComplexType' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.\", typeName);\r\n    throw new Error(msg);\r\n  }\r\n}\r\n\r\n\r\n  /**\r\n  Returns an [[EntityType]] or a [[ComplexType]] given its name.\r\n  @deprecated Replaced by getStructuralType but ... it is probably more usefull to call either getAsEntityType or getAsComplexType instead\r\n  @param typeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\r\n  that same short name an exception will be thrown.\r\n  @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.\r\n  @return The EntityType. ComplexType or 'null' if not not found.\r\n  **/\r\n  getEntityType(typeName: string, okIfNotFound: boolean = false) {\r\n    return this.getStructuralType(typeName, okIfNotFound);\r\n  }\r\n\r\n  /**\r\n  Returns an [[EntityType]] or a [[ComplexType]] given its name.\r\n  >      // assume em1 is a preexisting EntityManager\r\n  >      let odType = em1.metadataStore.getStructuralType(\"OrderDetail\");\r\n\r\n  or to throw an error if the type is not found\r\n  >      let badType = em1.metadataStore.getStructuralType(\"Foo\", false);\r\n  >      // badType will not get set and an exception will be thrown.\r\n  @deprecated Preferably use either getAsEntityType or getAsComplexType.  Get\r\n  @param typeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\r\n  that same short name an exception will be thrown.\r\n  @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.\r\n  @return The EntityType. ComplexType or 'null' if not not found.\r\n  **/\r\n  getStructuralType(typeName: string, okIfNotFound: boolean = false) {\r\n    assertParam(typeName, \"typeName\").isString().check();\r\n    assertParam(okIfNotFound, \"okIfNotFound\").isBoolean().isOptional().check(false);\r\n    return this._getStructuralType(typeName, okIfNotFound);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _getStructuralType(typeName: string, okIfNotFound: boolean = false) {\r\n    let qualTypeName = getQualifiedTypeName(this, typeName, false);\r\n    let type = this._structuralTypeMap[qualTypeName];\r\n    if (!type) {\r\n      if (okIfNotFound) return null;\r\n      let msg = core.formatString(\"Unable to locate a 'Type' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.\", typeName);\r\n      throw new Error(msg);\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /**\r\n  Returns an array containing all of the [[EntityType]]s or [[ComplexType]]s in this MetadataStore.\r\n  >      // assume em1 is a preexisting EntityManager\r\n  >      let allTypes = em1.metadataStore.getEntityTypes();\r\n  **/\r\n  getEntityTypes() {\r\n    return getTypesFromMap(this._structuralTypeMap);\r\n  }\r\n\r\n  getIncompleteNavigationProperties() {\r\n    return core.objectMap(this._incompleteTypeMap, function (key, value) {\r\n      return value;\r\n    });\r\n  }\r\n\r\n  /**\r\n  Returns a fully qualified entityTypeName for a specified resource name.  The reverse of this operation\r\n  can be obtained via the  [[EntityType.defaultResourceName]] property\r\n  **/\r\n  getEntityTypeNameForResourceName(resourceName: string) {\r\n    assertParam(resourceName, \"resourceName\").isString().check();\r\n    return this._resourceEntityTypeMap[resourceName];\r\n  }\r\n\r\n  /**\r\n  Associates a resourceName with an entityType.\r\n\r\n  This method is only needed in those cases where multiple resources return the same\r\n  entityType.  In this case Metadata discovery will only determine a single resource name for\r\n  each entityType.\r\n  @param resourceName - The resource name\r\n  @param entityTypeOrName - If passing a string either the fully qualified name or a short name may be used. If a short name is specified and multiple types share\r\n  that same short name an exception will be thrown. If the entityType has not yet been discovered then a fully qualified name must be used.\r\n  **/\r\n  setEntityTypeForResourceName(resourceName: string, entityTypeOrName: EntityType | string) {\r\n    assertParam(resourceName, \"resourceName\").isString().check();\r\n    assertParam(entityTypeOrName, \"entityTypeOrName\").isInstanceOf(EntityType).or().isString().check();\r\n\r\n    let entityTypeName: string;\r\n    if (entityTypeOrName instanceof EntityType) {\r\n      entityTypeName = entityTypeOrName.name;\r\n    } else {\r\n      entityTypeName = getQualifiedTypeName(this, entityTypeOrName, true);\r\n    }\r\n\r\n    this._resourceEntityTypeMap[resourceName] = entityTypeName;\r\n    let entityType = this._getStructuralType(entityTypeName, true);\r\n    if (entityType && entityType instanceof EntityType && !entityType.defaultResourceName) {\r\n      entityType.defaultResourceName = resourceName;\r\n    }\r\n  }\r\n\r\n  /** __Dev Only__ - for use when creating a new MetadataParserAdapter  */\r\n  static parseTypeName(entityTypeName: string) {\r\n    // TODO: removed \r\n    // if (!entityTypeName) {\r\n    //   return null;\r\n    // }\r\n\r\n    let typeParts = entityTypeName.split(\":#\");\r\n    if (typeParts.length > 1) {\r\n      return MetadataStore.makeTypeHash(typeParts[0], typeParts[1]);\r\n    }\r\n\r\n    if (core.stringStartsWith(entityTypeName, MetadataStore.ANONTYPE_PREFIX)) {\r\n      let typeHash = MetadataStore.makeTypeHash(entityTypeName);\r\n      (typeHash as any).isAnonymous = true;\r\n      return typeHash;\r\n    }\r\n    let entityTypeNameNoAssembly = entityTypeName.split(\",\")[0];\r\n    typeParts = entityTypeNameNoAssembly.split(\".\");\r\n    if (typeParts.length > 1) {\r\n      let shortName = typeParts[typeParts.length - 1];\r\n      let namespaceParts = typeParts.slice(0, typeParts.length - 1);\r\n      let ns = namespaceParts.join(\".\");\r\n      return MetadataStore.makeTypeHash(shortName, ns);\r\n    } else {\r\n      return MetadataStore.makeTypeHash(entityTypeName);\r\n    }\r\n  }\r\n\r\n  /** __Dev Only__ - for use when creating a new MetadataParserAdapter  */\r\n  static makeTypeHash(shortName: string, ns?: string) {\r\n    return {\r\n      shortTypeName: shortName,\r\n      namespace: ns,\r\n      typeName: qualifyTypeName(shortName, ns)\r\n    };\r\n  }\r\n\r\n  // protected methods\r\n  /** @hidden @internal */\r\n  _checkEntityType(entity: Entity) {\r\n    if (entity.entityType) return;\r\n    let typeName = entity.prototype._$typeName;\r\n    if (!typeName) {\r\n      throw new Error(\"This entity has not been registered. See the MetadataStore.registerEntityTypeCtor method\");\r\n    }\r\n    // we know that it is an EntityType ( as opposed to a ComplexType)\r\n    let entityType = this._getStructuralType(typeName) as EntityType;\r\n    if (entityType) {\r\n      entity.entityType = entityType;\r\n    }\r\n  }\r\n\r\n\r\n}\r\nMetadataStore.prototype._$typeName = \"MetadataStore\";\r\n\r\nBreezeEvent.bubbleEvent(MetadataStore.prototype);\r\n\r\nfunction getTypesFromMap(typeMap: IStructuralTypeMap) {\r\n  let types: (StructuralType)[] = [];\r\n  for (let key in typeMap) {\r\n    let value = typeMap[key];\r\n    // skip 'shortName' entries\r\n    if (key === value.name) {\r\n      types.push(typeMap[key]);\r\n    }\r\n  }\r\n  return types;\r\n}\r\n\r\nfunction structuralTypeFromJson(metadataStore: MetadataStore, json: any, allowMerge: boolean) {\r\n  let typeName = qualifyTypeName(json.shortName, json.namespace);\r\n  let stype = metadataStore._getStructuralType(typeName, true);\r\n  if (stype) {\r\n    if (allowMerge) {\r\n      return mergeStructuralType(stype, json);\r\n    } else {\r\n      // allow it but don't replace anything.\r\n      return stype;\r\n    }\r\n  }\r\n  let config = {\r\n    shortName: json.shortName,\r\n    namespace: json.namespace,\r\n    isAbstract: json.isAbstract,\r\n    autoGeneratedKeyType: AutoGeneratedKeyType.fromName(json.autoGeneratedKeyType),\r\n    defaultResourceName: json.defaultResourceName,\r\n    custom: json.custom\r\n  };\r\n\r\n  stype = json.isComplexType ? new ComplexType(config) : new EntityType(config);\r\n\r\n  // baseType may not have been imported yet so we need to defer handling this type until later.\r\n  if (json.baseTypeName && stype instanceof EntityType) {\r\n    stype.baseTypeName = json.baseTypeName;\r\n    let baseEntityType = metadataStore._getStructuralType(json.baseTypeName, true);\r\n    if (baseEntityType) {\r\n      completeStructuralTypeFromJson(metadataStore, json, stype);\r\n    } else {\r\n      core.getArray(metadataStore._deferredTypes, json.baseTypeName).push({ json: json, stype: stype });\r\n\r\n    }\r\n  } else {\r\n    completeStructuralTypeFromJson(metadataStore, json, stype);\r\n  }\r\n\r\n  // stype may or may not have been added to the metadataStore at this point.\r\n  return stype;\r\n}\r\n\r\nfunction mergeStructuralType(stype: StructuralType, json: any) {\r\n  if (json.custom) {\r\n    stype.custom = json.custom;\r\n  }\r\n\r\n  mergeProps(stype, json.dataProperties);\r\n  mergeProps(stype, json.navigationProperties);\r\n  return stype;\r\n}\r\n\r\nfunction mergeProps(stype: StructuralType, jsonProps: any[]) {\r\n  if (!jsonProps) return;\r\n  jsonProps.forEach((jsonProp) => {\r\n    let propName = jsonProp.name;\r\n    if (!propName) {\r\n      if (jsonProp.nameOnServer) {\r\n        propName = stype.metadataStore.namingConvention.serverPropertyNameToClient(jsonProp.nameOnServer, {});\r\n      } else {\r\n        // backslash-quote works around compiler bug\r\n        const msg = \"Unable to complete \\'importMetadata\\' - cannot locate a \\'name\\' or \\'nameOnServer\\' for one of the imported property nodes\";\r\n        throw new Error(msg);\r\n      }\r\n    }\r\n    if (jsonProp.custom) {\r\n      let prop = stype.getProperty(propName, true);\r\n      prop!.custom = jsonProp.custom;\r\n    }\r\n  });\r\n}\r\n\r\nfunction completeStructuralTypeFromJson(metadataStore: MetadataStore, json: any, stype: any) {\r\n\r\n  // validators from baseType work because validation walks thru base types\r\n  // so no need to copy down.\r\n  if (json.validators) {\r\n    stype.validators = json.validators.map(Validator.fromJSON);\r\n  }\r\n\r\n  json.dataProperties.forEach(function (dp: Object) {\r\n    stype._addPropertyCore(DataProperty.fromJSON(dp));\r\n  });\r\n\r\n\r\n  let isEntityType = !json.isComplexType;\r\n  if (isEntityType) {\r\n    //noinspection JSHint\r\n    json.navigationProperties && json.navigationProperties.forEach(function (np: Object) {\r\n      stype._addPropertyCore(NavigationProperty.fromJSON(np));\r\n    });\r\n  }\r\n\r\n  metadataStore.addEntityType(stype);\r\n\r\n  let deferredTypes = metadataStore._deferredTypes;\r\n  let deferrals = deferredTypes[stype.name];\r\n  if (deferrals) {\r\n    deferrals.forEach(function (d: any) {\r\n      completeStructuralTypeFromJson(metadataStore, d.json, d.stype);\r\n    });\r\n    delete deferredTypes[stype.name];\r\n  }\r\n}\r\n\r\nfunction getQualifiedTypeName(metadataStore: MetadataStore, structTypeName: string, throwIfNotFound?: boolean) {\r\n  if (isQualifiedTypeName(structTypeName)) return structTypeName;\r\n  let result = metadataStore._shortNameMap[structTypeName];\r\n  if (!result && throwIfNotFound) {\r\n    throw new Error(\"Unable to locate 'entityTypeName' of: \" + structTypeName);\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Configuration info to be passed to the [[EntityType]] constructor */\r\nexport interface EntityTypeConfig {\r\n  shortName?: string;\r\n  namespace?: string;\r\n  baseTypeName?: string;\r\n  isAbstract?: boolean;\r\n  autoGeneratedKeyType?: AutoGeneratedKeyType;\r\n  defaultResourceName?: string;\r\n  dataProperties?: DataProperty[] | Object[] | Object;  // TODO: see if we can't qualify Object[] a little better.\r\n  navigationProperties?: NavigationProperty[] | Object[] | Object;\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n  custom?: Object;\r\n}\r\n\r\n/** Configuration info to be passed to the [[EntityType.setProperties]] method */\r\nexport interface EntityTypeSetConfig {\r\n  autoGeneratedKeyType?: AutoGeneratedKeyType;\r\n  defaultResourceName?: string;\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n  custom?: Object;\r\n}\r\n\r\n/** Container for all of the metadata about a specific type of Entity.\r\n**/\r\nexport class EntityType {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n  /** @hidden @internal */\r\n  static __nextAnonIx = 0;\r\n  /** Always false for an EntityType. **/\r\n  isComplexType = false;\r\n  /** The [[MetadataStore]] that contains this EntityType. __Read Only__ **/\r\n  metadataStore: MetadataStore;\r\n  /** The DataProperties (see [[DataProperty]] associated with this EntityType. __Read Only__  **/\r\n  dataProperties: DataProperty[];\r\n  /**  The NavigationProperties (see [[NavigationProperty]] associated with this EntityType. __Read Only__  **/\r\n  navigationProperties: NavigationProperty[];\r\n  /**\r\n  The DataProperties associated with this EntityType that make up it's [[EntityKey]]. __Read Only__ **/\r\n  keyProperties: DataProperty[];\r\n  /** The DataProperties associated with this EntityType that are foreign key properties. __Read Only__ **/\r\n  foreignKeyProperties: DataProperty[];\r\n  inverseForeignKeyProperties: DataProperty[];\r\n  /**  The DataProperties associated with this EntityType that are concurrency properties. __Read Only__ **/\r\n  concurrencyProperties: DataProperty[];\r\n  /** The DataProperties for this EntityType that contain instances of a [[ComplexType]]. __Read Only__   **/\r\n  complexProperties: DataProperty[];\r\n  /** The DataProperties associated with this EntityType that are not mapped to any backend datastore. These are effectively free standing\r\n  properties. __Read Only__ **/\r\n  unmappedProperties: DataProperty[];\r\n\r\n  /** The fully qualified name of this EntityType. __Read Only__  **/\r\n  name: string;\r\n  /** The short, unqualified, name for this EntityType. __Read Only__  **/\r\n  shortName: string;\r\n  /** The namespace for this EntityType. __Read Only__  **/\r\n  namespace: string;\r\n  /** The name of this EntityType's base EntityType  (if any) */\r\n  baseTypeName?: string;\r\n  /** The base EntityType (if any) for this EntityType. __Read Only__   **/\r\n  baseEntityType: EntityType;\r\n  subtypes: EntityType[];\r\n\r\n  /**  Whether this EntityType is abstract. __Read Only__ **/\r\n  isAbstract: boolean;\r\n  /**  Whether this EntityType is anonymous. Anonymous types will never be communicated to or from the server. They are purely for\r\n  client side use and are given an automatically generated name.  __Read Only__ **/\r\n  isAnonymous: boolean;\r\n  /** Whether this EntityType has been 'frozen'.  EntityTypes become frozen after the first instance \r\n  of that type has been created and attached to an EntityManager. */\r\n  isFrozen: boolean;\r\n\r\n  /** The [[AutoGeneratedKeyType]] for this EntityType. __Read Only__ **/\r\n  autoGeneratedKeyType: AutoGeneratedKeyType;\r\n  /**   The default resource name associated with this EntityType.  An EntityType may be queried via a variety of 'resource names' but this one\r\n  is used as the default when no resource name is provided.  This will occur when calling [[EntityAspect.loadNavigationProperty]]\r\n  or when executing any [[EntityQuery]] that was created via an [[EntityKey]]. __Read Only__ **/\r\n  defaultResourceName: string;\r\n  /** A function that is used to customize the serialization of any EntityProperties of this type. */\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n  /**  A free form object that can be used to define any custom metadata for this EntityType. __Read Only__  **/\r\n  custom?: Object;\r\n  /** The entity level validators associated with this EntityType. Validators can be added and\r\n  removed from this collection. __Read Only__.   **/\r\n  validators: Validator[];\r\n\r\n  warnings: any[];\r\n  initFn: Function | string;\r\n  noTrackingFn: Function;\r\n\r\n  /** @hidden @internal */\r\n  _extra: any;\r\n  /** @hidden @internal */\r\n  _ctor: { new (): StructuralObject };\r\n  /** @hidden @internal */\r\n  _mappedPropertiesCount: number;\r\n\r\n  /** \r\n  @deprecated Use [[getCtor]] instead.   \r\n  */\r\n  getEntityCtor = this.getCtor;\r\n\r\n  /** @hidden @internal */\r\n  static qualifyTypeName = qualifyTypeName;\r\n\r\n\r\n  /** EntityType constructor  \r\n  >      let entityType = new EntityType( {\r\n  >          shortName: \"person\",\r\n  >          namespace: \"myAppNamespace\"\r\n  >      });\r\n  @param config - Configuration settings or a MetadataStore.  If this parameter is just a MetadataStore\r\n  then what will be created is an 'anonymous' type that will never be communicated to or from the server. It is purely for\r\n  client side use and will be given an automatically generated name. Normally, however, you will use a configuration object.\r\n  **/\r\n  constructor(config: MetadataStore | EntityTypeConfig) {\r\n    if (arguments.length > 1) {\r\n      throw new Error(\"The EntityType ctor has a single argument that is either a 'MetadataStore' or a configuration object.\");\r\n    }\r\n    // let etConfig =  <EntityTypeConfig> <any> undefined;\r\n    let etConfig: EntityTypeConfig | undefined = undefined;\r\n\r\n    if ((config as any)._$typeName === \"MetadataStore\") {\r\n      this.metadataStore = config as MetadataStore;\r\n      this.shortName = \"Anon_\" + (++EntityType.__nextAnonIx);\r\n      this.namespace = \"\";\r\n      this.isAnonymous = true;\r\n      // etConfig = undefined;\r\n    } else {\r\n      etConfig = config as EntityTypeConfig;\r\n      assertConfig(config)\r\n        .whereParam(\"shortName\").isNonEmptyString()\r\n        .whereParam(\"namespace\").isString().isOptional().withDefault(\"\")\r\n        .whereParam(\"baseTypeName\").isString().isOptional()\r\n        .whereParam(\"isAbstract\").isBoolean().isOptional().withDefault(false)\r\n        .whereParam(\"autoGeneratedKeyType\").isEnumOf(AutoGeneratedKeyType).isOptional().withDefault(AutoGeneratedKeyType.None)\r\n        .whereParam(\"defaultResourceName\").isNonEmptyString().isOptional().withDefault(null)\r\n        .whereParam(\"dataProperties\").isOptional()\r\n        .whereParam(\"navigationProperties\").isOptional()\r\n        .whereParam(\"serializerFn\").isOptional().isFunction()\r\n        .whereParam(\"custom\").isOptional()\r\n        .applyAll(this);\r\n    }\r\n\r\n    this.name = qualifyTypeName(this.shortName, this.namespace);\r\n\r\n    // the defaultResourceName may also be set up either via metadata lookup or first query or via the 'setProperties' method\r\n    this.dataProperties = [];\r\n    this.navigationProperties = [];\r\n    this.complexProperties = [];\r\n    this.keyProperties = [];\r\n    this.foreignKeyProperties = [];\r\n    this.inverseForeignKeyProperties = [];\r\n    this.concurrencyProperties = [];\r\n    this.unmappedProperties = []; // will be updated later.\r\n    this.validators = [];\r\n    this.warnings = [];\r\n    this._mappedPropertiesCount = 0;\r\n    this.subtypes = [];\r\n    // now process any data/nav props\r\n    if (etConfig && etConfig.dataProperties) {\r\n      addProperties(this, etConfig.dataProperties, DataProperty);\r\n    }\r\n    if (etConfig && etConfig.navigationProperties) {\r\n      addProperties(this, etConfig.navigationProperties, NavigationProperty);\r\n    }\r\n  }\r\n\r\n  /**\r\n  General purpose property set method\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      custType.setProperties( {\r\n  >          autoGeneratedKeyType: AutoGeneratedKeyType.Identity;\r\n  >          defaultResourceName: \"CustomersAndIncludedOrders\"\r\n  >      )};\r\n  @param config - a configuration object\r\n  **/\r\n  setProperties(config: EntityTypeSetConfig) {\r\n    assertConfig(config)\r\n      .whereParam(\"autoGeneratedKeyType\").isEnumOf(AutoGeneratedKeyType).isOptional()\r\n      .whereParam(\"defaultResourceName\").isString().isOptional()\r\n      .whereParam(\"serializerFn\").isFunction().isOptional()\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n    if (config.defaultResourceName) {\r\n      this.defaultResourceName = config.defaultResourceName;\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns whether this type is a subtype of a specified type.\r\n  **/\r\n  isSubtypeOf(entityType: EntityType) {\r\n    assertParam(entityType, \"entityType\").isInstanceOf(EntityType).check();\r\n    let baseType: EntityType = this;\r\n    do {\r\n      if (baseType === entityType) return true;\r\n      baseType = baseType.baseEntityType;\r\n    } while (baseType);\r\n    return false;\r\n  }\r\n\r\n  /**\r\n  Returns an array containing this type and any/all subtypes of this type down thru the hierarchy.\r\n  **/\r\n  getSelfAndSubtypes() {\r\n    let result = [this];\r\n    this.subtypes.forEach(function (st) {\r\n      let subtypes = st.getSelfAndSubtypes();\r\n      result.push.apply(result, subtypes);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  getAllValidators() {\r\n    let result = this.validators.slice(0);\r\n    let bt = this.baseEntityType;\r\n    while (bt) {\r\n      result.push.apply(result, bt.validators);\r\n      bt = bt.baseEntityType;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Adds a  [[DataProperty]] or a [[NavigationProperty]] to this EntityType.\r\n  >      // assume myEntityType is a newly constructed EntityType.\r\n  >      myEntityType.addProperty(dataProperty1);\r\n  >      myEntityType.addProperty(dataProperty2);\r\n  >      myEntityType.addProperty(navigationProperty1);\r\n  **/\r\n  addProperty(property: EntityProperty) {\r\n    assertParam(property, \"property\").isInstanceOf(DataProperty).or().isInstanceOf(NavigationProperty).check();\r\n\r\n    // true is 2nd arg to force resolve of any navigation properties.\r\n    let newprop = this._addPropertyCore(property, true);\r\n\r\n    if (this.subtypes && this.subtypes.length) {\r\n      let stype = this;\r\n      stype.getSelfAndSubtypes().forEach(function (st) {\r\n        if (st !== stype) {\r\n          if (property.isNavigationProperty) {\r\n            st._addPropertyCore(new NavigationProperty(property), true);\r\n          } else {\r\n            st._addPropertyCore(new DataProperty(property as DataProperty), true);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    return newprop;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateFromBase(baseEntityType: EntityType) {\r\n    this.baseEntityType = baseEntityType;\r\n    if (this.autoGeneratedKeyType === AutoGeneratedKeyType.None) {\r\n      this.autoGeneratedKeyType = baseEntityType.autoGeneratedKeyType;\r\n    }\r\n\r\n    baseEntityType.dataProperties.forEach((dp) => {\r\n      let newDp = new DataProperty(dp);\r\n      // don't need to copy validators becaue we will walk the hierarchy to find them\r\n      newDp.validators = [];\r\n      newDp.baseProperty = dp;\r\n      this._addPropertyCore(newDp);\r\n    }, this);\r\n    baseEntityType.navigationProperties.forEach((np) => {\r\n      let newNp = new NavigationProperty(np);\r\n      // don't need to copy validators becaue we will walk the hierarchy to find them\r\n      newNp.validators = [];\r\n      newNp.baseProperty = np;\r\n      this._addPropertyCore(newNp);\r\n    }, this);\r\n    baseEntityType.subtypes.push(this);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _addPropertyCore(property: EntityProperty, shouldResolve: boolean = false) {\r\n    if (this.isFrozen) {\r\n      throw new Error(\"The '\" + this.name + \"' EntityType/ComplexType has been frozen. You can only add properties to an EntityType/ComplexType before any instances of that type have been created and attached to an entityManager.\");\r\n    }\r\n    let parentType = property.parentType;\r\n    if (parentType) {\r\n      if (parentType !== this) {\r\n        throw new Error(\"This property: \" + property.name + \" has already been added to \" + property.parentType.name);\r\n      } else {\r\n        // adding the same property more than once to the same entityType is just ignored.\r\n        return;\r\n      }\r\n    }\r\n    property.parentType = this;\r\n    let ms = this.metadataStore;\r\n    // if (property.isDataProperty) { // modified because doesn't act as a type guard \r\n    if (property instanceof DataProperty) {\r\n      this._addDataProperty(property);\r\n    } else {\r\n      this._addNavigationProperty(property);\r\n      // metadataStore can be undefined if this entityType has not yet been added to a MetadataStore.\r\n      if (shouldResolve && ms) {\r\n        tryResolveNp(property, ms);\r\n      }\r\n    }\r\n    // unmapped properties can be added AFTER entityType has already resolved all property names.\r\n    if (ms && !(property.name && property.nameOnServer)) {\r\n      updateClientServerNames(ms.namingConvention, property, \"name\");\r\n    }\r\n    // props can be added after entity prototype has already been wrapped.\r\n    if (ms && this._extra) {\r\n      if (this._extra.alreadyWrappedProps) {\r\n        let proto = this._ctor.prototype;\r\n        config.interfaceRegistry.modelLibrary.getDefaultInstance().initializeEntityPrototype(proto);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n  Create a new entity of this type.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getAsEntityType(\"Customer\");\r\n  >      let cust1 = custType.createEntity();\r\n  >      em1.addEntity(cust1);\r\n  @param initialValues- Configuration object of the properties to set immediately after creation.\r\n  @return The new entity.\r\n  **/\r\n  createEntity(initialValues?: any): any {\r\n    // ignore the _$eref once the entity is attached to an entityManager.\r\n    if (initialValues && initialValues._$eref && !initialValues._$eref.entityAspect.entityManager) return initialValues._$eref;\r\n\r\n    let instance = this._createInstanceCore();\r\n\r\n    if (initialValues) {\r\n      // only assign an _eref if the object is fully \"keyed\"\r\n      if (this.keyProperties.every(function (kp) {\r\n        return initialValues[kp.name] != null;\r\n      })) {\r\n        initialValues._$eref = instance;\r\n      }\r\n\r\n      this._updateTargetFromRaw(instance, initialValues, getRawValueFromConfig);\r\n\r\n      this.navigationProperties.forEach(function (np) {\r\n        let relatedEntity: any;\r\n        let val = initialValues[np.name];\r\n        if (val != undefined) {\r\n          let navEntityType = np.entityType;\r\n          if (np.isScalar) {\r\n            relatedEntity = val.entityAspect ? val : navEntityType.createEntity(val);\r\n            instance.setProperty(np.name, relatedEntity);\r\n          } else {\r\n            let relatedEntities = instance.getProperty(np.name);\r\n            val.forEach((v: any) => {\r\n              relatedEntity = v.entityAspect ? v : navEntityType.createEntity(v);\r\n              relatedEntities.push(relatedEntity);\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    this._initializeInstance(instance);\r\n    return instance;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _createInstanceCore() {\r\n    let aCtor = this.getCtor();\r\n    let instance = new aCtor();\r\n    new EntityAspect(instance as Entity);\r\n    return instance;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _initializeInstance(instance: any) {\r\n    if (this.baseEntityType) {\r\n      this.baseEntityType._initializeInstance(instance);\r\n    }\r\n    let initFn = this.initFn;\r\n    if (initFn) {\r\n      let fn = (typeof initFn === \"string\") ? instance[initFn] : initFn;\r\n      fn(instance);\r\n    }\r\n    this.complexProperties && this.complexProperties.forEach(function (cp) {\r\n      let complexType = cp.dataType as ComplexType;\r\n      let ctInstance = instance.getProperty(cp.name);\r\n      if (Array.isArray(ctInstance)) {\r\n        ctInstance.forEach((ctInst) => {\r\n          complexType._initializeInstance(ctInst);\r\n        });\r\n      } else {\r\n        complexType._initializeInstance(ctInstance);\r\n      }\r\n    });\r\n    // not needed for complexObjects\r\n    if (instance.entityAspect) {\r\n      instance.entityAspect._initialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns the constructor for this EntityType.\r\n  @param forceRefresh - Whether to ignore any cached version of this constructor. (default == false)\r\n  @return The constructor for this EntityType.\r\n  **/\r\n  getCtor(forceRefresh: boolean = false): { new (): StructuralObject } {\r\n    if (this._ctor && !forceRefresh) return this._ctor;\r\n\r\n    let ctorRegistry = this.metadataStore._ctorRegistry;\r\n    let r = ctorRegistry[this.name] || ctorRegistry[this.shortName] || {};\r\n    let aCtor = r.ctor || this._ctor;\r\n\r\n    let ctorType = aCtor && aCtor.prototype && (aCtor.prototype.entityType || aCtor.prototype.complexType);\r\n    if (ctorType && ctorType.metadataStore !== this.metadataStore) {\r\n      // We can't risk a mismatch between the ctor and the type info in a specific metadatastore\r\n      // because modelLibraries rely on type info to intercept ctor properties\r\n      throw new Error(\"Cannot register the same constructor for \" + this.name + \" in different metadata stores.  Please define a separate constructor for each metadata store.\");\r\n    }\r\n\r\n\r\n    if (r.ctor && forceRefresh) {\r\n      this._extra = undefined;\r\n    }\r\n\r\n    if (!aCtor) {\r\n      let createCtor = config.interfaceRegistry.modelLibrary.getDefaultInstance().createCtor;\r\n      aCtor = createCtor ? createCtor(this) : createEmptyCtor(this);\r\n    }\r\n\r\n    this.initFn = r.initFn;\r\n    this.noTrackingFn = r.noTrackingFn;\r\n\r\n    aCtor.prototype._$typeName = this.name;\r\n    this._setCtor(aCtor);\r\n    return aCtor;\r\n  }\r\n\r\n\r\n  /** @hidden @internal */\r\n  // May make public later.\r\n  _setCtor(aCtor: { new (): StructuralObject }, interceptor?: any) {\r\n\r\n    let instanceProto = aCtor.prototype;\r\n\r\n    // place for extra breeze related data\r\n    this._extra = this._extra || {};\r\n\r\n    let instance = new aCtor();\r\n    calcUnmappedProperties(this, instance);\r\n\r\n    if (this._$typeName === \"EntityType\") {\r\n      // insure that all of the properties are on the 'template' instance before watching the class.\r\n      instanceProto.entityType = this;\r\n    } else {\r\n      instanceProto.complexType = this;\r\n    }\r\n\r\n    // defaultPropertyInterceptor is a 'global' (but internal to breeze) function;\r\n    (instanceProto as any)._$interceptor = interceptor || defaultPropertyInterceptor;\r\n    config.interfaceRegistry.modelLibrary.getDefaultInstance().initializeEntityPrototype(instanceProto);\r\n    this._ctor = aCtor;\r\n  }\r\n\r\n  /**\r\n  Adds either an entity or property level validator to this EntityType.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let countryProp = custType.getProperty(\"Country\");\r\n  >      let valFn = function (v) {\r\n  >              if (v == null) return true;\r\n  >              return (core.stringStartsWith(v, \"US\"));\r\n  >          };\r\n  >      let countryValidator = new Validator(\"countryIsUS\", valFn,\r\n  >      { displayName: \"Country\", messageTemplate: \"'%displayName%' must start with 'US'\" });\r\n  >      custType.addValidator(countryValidator, countryProp);\r\n\r\n  This is the same as adding an entity level validator via the 'validators' property of DataProperty or NavigationProperty\r\n  >      countryProp.validators.push(countryValidator);\r\n\r\n  Entity level validators can also be added by omitting the 'property' parameter.\r\n  >      custType.addValidator(someEntityLevelValidator);\r\n\r\n  or\r\n  >      custType.validators.push(someEntityLevelValidator);\r\n  @param validator - Validator to add.\r\n  @param property - Property to add this validator to.  If omitted, the validator is assumed to be an\r\n  entity level validator and is added to the EntityType's 'validators'.\r\n  **/\r\n  addValidator(validator: Validator, property?: EntityProperty | string) {\r\n    assertParam(validator, \"validator\").isInstanceOf(Validator).check();\r\n    assertParam(property, \"property\").isOptional().isString().or().isEntityProperty().check();\r\n    if (property != null) {\r\n      let prop = (typeof property === 'string') ? this.getProperty(property, true) : property;\r\n      prop!.validators.push(validator);\r\n    } else {\r\n      this.validators.push(validator);\r\n    }\r\n  }\r\n\r\n  /**\r\n  Returns all of the properties ( dataProperties and navigationProperties) for this EntityType.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let arrayOfProps = custType.getProperties();\r\n  @return An array of Data and Navigation properties.\r\n  **/\r\n  getProperties(): EntityProperty[] {\r\n    return (this.dataProperties as EntityProperty[]).concat(this.navigationProperties);\r\n  }\r\n\r\n  /**\r\n  Returns all of the property names ( for both dataProperties and navigationProperties) for this EntityType.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let arrayOfPropNames = custType.getPropertyNames();\r\n  **/\r\n  getPropertyNames() {\r\n    return this.getProperties().map(core.pluck('name'));\r\n  }\r\n\r\n  /**\r\n  Returns a data property with the specified name or null.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let customerNameDataProp = custType.getDataProperty(\"CustomerName\");\r\n  @return A DataProperty or null if not found.\r\n  **/\r\n  getDataProperty(propertyName: string) {\r\n    return core.arrayFirst(this.dataProperties, core.propEq('name', propertyName));\r\n  }\r\n\r\n  /**\r\n  Returns a navigation property with the specified name or null.\r\n  >      // assume em1 is an EntityManager containing a number of existing entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let customerOrdersNavProp = custType.getDataProperty(\"Orders\");\r\n  @return A NavigationProperty or null if not found.\r\n  **/\r\n  getNavigationProperty(propertyName: string) {\r\n    return core.arrayFirst(this.navigationProperties, core.propEq('name', propertyName));\r\n  }\r\n\r\n  /**\r\n  Returns either a DataProperty or a NavigationProperty with the specified name or null.\r\n  \r\n  This method also accepts a '.' delimited property path and will return the 'property' at the\r\n  end of the path.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let companyNameProp = custType.getProperty(\"CompanyName\");\r\n\r\n  This method can also walk a property path to return a property\r\n  >      let orderDetailType = em1.metadataStore.getEntityType(\"OrderDetail\");\r\n  >      let companyNameProp2 = orderDetailType.getProperty(\"Order.Customer.CompanyName\");\r\n  >      // companyNameProp === companyNameProp2\r\n  @param [throwIfNotFound=false] {Boolean} Whether to throw an exception if not found.\r\n  @return A DataProperty or NavigationProperty or null if not found.\r\n  **/\r\n  getProperty(propertyPath: string, throwIfNotFound: boolean = false) {\r\n    let props = this.getPropertiesOnPath(propertyPath, false, throwIfNotFound);\r\n    return (props && props.length > 0) ? props[props.length - 1] : null;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  // TODO: have this return empty array instead of null and fix consumers.\r\n  // TODO: think about renaming with '_' prefix.\r\n  getPropertiesOnPath(propertyPath: string, useServerName: boolean | null, throwIfNotFound: boolean = false) {\r\n    let propertyNames: string[] = (Array.isArray(propertyPath)) ? propertyPath : propertyPath.trim().split('.');\r\n\r\n    let ok = true;\r\n    let key = useServerName === true ? \"nameOnServer\" : useServerName === false ? \"name\" : null;\r\n    let parentType = this as StructuralType;\r\n    \r\n    const getProps = (propName: string) => { \r\n      const fn = key === null ? core.propsEq(\"name\", \"nameOnServer\", propName) : core.propEq(key, propName);\r\n      let prop = core.arrayFirst(parentType.getProperties(), fn);\r\n      if (prop) {\r\n        parentType = (prop instanceof NavigationProperty) ? prop.entityType : prop.dataType as ComplexType;\r\n        // parentType = prop.isNavigationProperty ? prop.entityType : prop.dataType;\r\n      } else if (throwIfNotFound) {\r\n        throw new Error(\"unable to locate property: \" + propName + \" on entityType: \" + parentType.name);\r\n      } else {\r\n        ok = false;\r\n      }\r\n      return prop;\r\n    };\r\n\r\n    let props = propertyNames.map(getProps) as EntityProperty[];\r\n    return ok ? props : null;\r\n  }\r\n\r\n  /** For use in pluggable adapters. */\r\n  // TODO: document use\r\n  clientPropertyPathToServer(propertyPath: string, delimiter: string = '.') {\r\n    let propNames: string[];\r\n    if (this.isAnonymous) {\r\n      let fn = this.metadataStore.namingConvention.clientPropertyNameToServer;\r\n      propNames = propertyPath.split(\".\").map(function (propName) {\r\n        return fn(propName);\r\n      });\r\n    } else {\r\n      let props = this.getPropertiesOnPath(propertyPath, false, true);\r\n      propNames = props!.map((prop: EntityProperty) => prop.nameOnServer);\r\n    }\r\n    return propNames.join(delimiter);\r\n  }\r\n\r\n  /** For use in pluggable adapters. */\r\n  // TODO: document use\r\n  getEntityKeyFromRawEntity(rawEntity: any, rawValueFn: Function) {\r\n    let keyValues = this.keyProperties.map((dp) => {\r\n      let val = rawValueFn(rawEntity, dp);\r\n      return DataType.parseRawValue(val, dp.dataType as DataType);\r\n    });\r\n    return new EntityKey(this, keyValues);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateTargetFromRaw(target: StructuralObject, raw: any, rawValueFn: Function) {\r\n    // called recursively for complex properties\r\n    this.dataProperties.forEach((dp) => {\r\n      if (!dp.isSettable) return;\r\n      let rawVal = rawValueFn(raw, dp);\r\n      if (rawVal === undefined) return;\r\n      let dataType = dp.dataType; // this will be a complexType when dp is a complexProperty\r\n      let oldVal: any;\r\n      if (dp.isComplexProperty) {\r\n        let complexType = dp.dataType as ComplexType;\r\n        if (rawVal === null) return; // rawVal may be null in nosql dbs where it was never defined for the given row.\r\n        oldVal = target.getProperty(dp.name);\r\n        if (dp.isScalar) {\r\n          complexType._updateTargetFromRaw(oldVal, rawVal, rawValueFn);\r\n        } else {\r\n          if (Array.isArray(rawVal)) {\r\n            let newVal = rawVal.map(function (rawCo) {\r\n              let newCo = complexType._createInstanceCore(target, dp);\r\n              complexType._updateTargetFromRaw(newCo, rawCo, rawValueFn);\r\n              complexType._initializeInstance(newCo);\r\n              return newCo;\r\n            });\r\n            if (!core.arrayEquals(oldVal, newVal, coEquals)) {\r\n              // clear the old array and push new objects into it.\r\n              oldVal.length = 0;\r\n              newVal.forEach(function (nv) {\r\n                oldVal.push(nv);\r\n              });\r\n            }\r\n          } else {\r\n            oldVal.length = 0;\r\n          }\r\n        }\r\n      } else {\r\n        if (dp.isScalar) {\r\n          let newVal = DataType.parseRawValue(rawVal, dataType as DataType);\r\n          target.setProperty(dp.name, newVal);\r\n        } else {\r\n          oldVal = target.getProperty(dp.name);\r\n          if (Array.isArray(rawVal)) {\r\n            // need to compare values\r\n            let newVal = rawVal.map((rv) => {\r\n              return DataType.parseRawValue(rv, dataType as DataType);\r\n            });\r\n            if (!core.arrayEquals(oldVal, newVal)) {\r\n              // clear the old array and push new objects into it.\r\n              oldVal.length = 0;\r\n              newVal.forEach(function (nv) {\r\n                oldVal.push(nv);\r\n              });\r\n            }\r\n          } else {\r\n            oldVal.length = 0;\r\n          }\r\n\r\n        }\r\n      }\r\n    });\r\n\r\n    // if merging from an import then raw will have an entityAspect or a complexAspect\r\n    let rawAspect = raw.entityAspect || raw.complexAspect;\r\n    if (rawAspect) {\r\n\r\n      let targetAspect = EntityAspect.isEntity(target) ? target.entityAspect : target.complexAspect;\r\n      if (rawAspect.originalValuesMap) {\r\n        targetAspect.originalValues = rawAspect.originalValuesMap;\r\n      }\r\n      if (rawAspect.extraMetadata) {\r\n        targetAspect.extraMetadata = rawAspect.extraMetadata;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  Returns a string representation of this EntityType.\r\n  **/\r\n  toString() {\r\n    return this.name;\r\n  }\r\n\r\n  toJSON() {\r\n    return core.toJson(this, {\r\n      shortName: null,\r\n      namespace: null,\r\n      baseTypeName: null,\r\n      isAbstract: false,\r\n      autoGeneratedKeyType: null, // do not suppress default value\r\n      defaultResourceName: null,\r\n      dataProperties: localPropsOnly,\r\n      navigationProperties: localPropsOnly,\r\n      validators: null,\r\n      custom: null\r\n    });\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateNames(property: EntityProperty) {\r\n    let nc = this.metadataStore.namingConvention;\r\n    updateClientServerNames(nc, property, \"name\");\r\n\r\n    if (property.isNavigationProperty) {\r\n      updateClientServerNames(nc, property, \"foreignKeyNames\");\r\n      updateClientServerNames(nc, property, \"invForeignKeyNames\");\r\n\r\n      // these will get set later via _updateNps\r\n      // this.inverse\r\n      // this.entityType\r\n      // this.relatedDataProperties\r\n      //    dataProperty.relatedNavigationProperty\r\n      //    dataProperty.inverseNavigationProperty\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _checkNavProperty(navigationProperty: NavigationProperty | string) {\r\n    // if (navigationProperty.isNavigationProperty) {\r\n    if (navigationProperty instanceof NavigationProperty) {\r\n      if (navigationProperty.parentType !== this) {\r\n        throw new Error(core.formatString(\"The navigationProperty '%1' is not a property of entity type '%2'\",\r\n          navigationProperty.name, this.name));\r\n      }\r\n      return navigationProperty;\r\n    }\r\n\r\n    if (typeof (navigationProperty) === 'string') {\r\n      let np = this.getProperty(navigationProperty);\r\n      // if (np && np.isNavigationProperty) return np;\r\n      if (np && np instanceof NavigationProperty) return np;\r\n    }\r\n    throw new Error(\"The 'navigationProperty' parameter must either be a NavigationProperty or the name of a NavigationProperty\");\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _addDataProperty(dp: DataProperty) {\r\n\r\n    this.dataProperties.push(dp);\r\n\r\n    if (dp.isPartOfKey) {\r\n      this.keyProperties.push(dp);\r\n    }\r\n\r\n    if (dp.isComplexProperty) {\r\n      this.complexProperties.push(dp);\r\n    }\r\n\r\n    if (dp.concurrencyMode && dp.concurrencyMode !== \"None\") {\r\n      this.concurrencyProperties.push(dp);\r\n    }\r\n\r\n    if (dp.isUnmapped) {\r\n      this.unmappedProperties.push(dp);\r\n    }\r\n\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _addNavigationProperty(np: NavigationProperty) {\r\n\r\n    this.navigationProperties.push(np);\r\n\r\n    if (!isQualifiedTypeName(np.entityTypeName)) {\r\n      np.entityTypeName = qualifyTypeName(np.entityTypeName, this.namespace);\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateCps() {\r\n    let metadataStore = this.metadataStore;\r\n    let incompleteTypeMap = metadataStore._incompleteComplexTypeMap;\r\n    this.complexProperties.forEach(function (cp) {\r\n      if (cp.complexType) return;\r\n      if (!resolveCp(cp, metadataStore)) {\r\n        core.getArray(incompleteTypeMap, cp.complexTypeName).push(cp);\r\n      }\r\n    });\r\n\r\n    if (this.isComplexType) {\r\n      (incompleteTypeMap[this.name] || []).forEach(function (cp: DataProperty) {\r\n        resolveCp(cp, metadataStore);\r\n      });\r\n      delete incompleteTypeMap[this.name];\r\n    }\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateNps() {\r\n    let metadataStore = this.metadataStore;\r\n\r\n    // resolve all navProps for this entityType\r\n    this.navigationProperties.forEach(function (np) {\r\n      tryResolveNp(np, metadataStore);\r\n    });\r\n    let incompleteTypeMap = metadataStore._incompleteTypeMap;\r\n    // next resolve all navProp that point to this entityType.\r\n    (incompleteTypeMap[this.name] || []).forEach(function (np: NavigationProperty) {\r\n      tryResolveNp(np, metadataStore);\r\n    });\r\n    // every navProp that pointed to this type should now be resolved\r\n    delete incompleteTypeMap[this.name];\r\n  }\r\n}\r\n\r\nEntityType.prototype._$typeName = \"EntityType\";\r\n\r\nfunction getRawValueFromConfig(rawEntity: any, dp: DataProperty) {\r\n  // 'true' fork can happen if an initializer contains an actaul instance of an already created complex object.\r\n  return (rawEntity.entityAspect || rawEntity.complexAspect) ? rawEntity.getProperty(dp.name) : rawEntity[dp.name];\r\n}\r\n\r\nfunction updateClientServerNames(nc: NamingConvention, parent: any, clientPropName: string) {\r\n  let serverPropName = clientPropName + \"OnServer\";\r\n  let clientName = parent[clientPropName];\r\n  if (clientName && clientName.length) {\r\n    // if (parent.isUnmapped) return;\r\n    let serverNames = core.toArray(clientName).map(function (cName) {\r\n      let sName = nc.clientPropertyNameToServer(cName, parent);\r\n      let testName = nc.serverPropertyNameToClient(sName, parent);\r\n      if (cName !== testName) {\r\n        throw new Error(\"NamingConvention for this client property name does not roundtrip properly:\" + cName + \"-->\" + testName);\r\n      }\r\n      return sName;\r\n    });\r\n    parent[serverPropName] = Array.isArray(clientName) ? serverNames : serverNames[0];\r\n  } else {\r\n    let serverName = parent[serverPropName];\r\n    if ((!serverName) || serverName.length === 0) return;\r\n    let clientNames = core.toArray(serverName).map(function (sName) {\r\n      let cName = nc.serverPropertyNameToClient(sName, parent);\r\n      let testName = nc.clientPropertyNameToServer(cName, parent);\r\n      if (sName !== testName) {\r\n        throw new Error(\"NamingConvention for this server property name does not roundtrip properly:\" + sName + \"-->\" + testName);\r\n      }\r\n      return cName;\r\n    });\r\n    parent[clientPropName] = Array.isArray(serverName) ? clientNames : clientNames[0];\r\n  }\r\n}\r\n\r\nfunction createEmptyCtor(type: any) {\r\n  if (config.noEval) {\r\n    let Entity = function() {};\r\n    return Entity;\r\n  } else {\r\n    let name = type.name.replace(/\\W/g, '_');\r\n    return Function('return function ' + name + '(){}')();\r\n  }\r\n}\r\n\r\nfunction coEquals(co1: ComplexObject, co2: ComplexObject): boolean {\r\n  let complexType = co1.complexAspect!.parentProperty!.dataType as ComplexType;\r\n  let dataProps = complexType.dataProperties;\r\n  let areEqual = dataProps.every(function (dp) {\r\n    if (!dp.isSettable) return true;\r\n    let v1 = co1.getProperty(dp.name);\r\n    let v2 = co2.getProperty(dp.name);\r\n    if (dp.isComplexProperty && dp.isScalar) {\r\n      return coEquals(v1, v2);\r\n    }\r\n    else if (dp.isComplexProperty && !dp.isScalar) {\r\n      return core.arrayEquals(v1, v2, coEquals);\r\n    } else {\r\n      let dataType = <any>dp.dataType; // this will be a complexType when dp is a complexProperty\r\n      return (v1 === v2 || (dataType && dataType.normalize && v1 && v2 && dataType.normalize(v1) === dataType.normalize(v2)));\r\n    }\r\n  });\r\n  return areEqual;\r\n}\r\n\r\nfunction localPropsOnly(props: EntityProperty[]) {\r\n  return props.filter(function (prop) {\r\n    return prop.baseProperty == null;\r\n  });\r\n}\r\n\r\n\r\nfunction resolveCp(cp: DataProperty, metadataStore: MetadataStore) {\r\n  let complexType = metadataStore._getStructuralType(cp.complexTypeName, true);\r\n  if (!complexType) return false;\r\n  if (!(complexType instanceof ComplexType)) {\r\n    throw new Error(\"Unable to resolve ComplexType with the name: \" + cp.complexTypeName + \" for the property: \" + cp.name);\r\n  }\r\n  cp.dataType = complexType;\r\n  cp.defaultValue = null;\r\n  return true;\r\n}\r\n\r\nfunction tryResolveNp(np: NavigationProperty, metadataStore: MetadataStore) {\r\n  if (np.entityType) return true;\r\n\r\n  let entityType = metadataStore._getStructuralType(np.entityTypeName, true) as EntityType;\r\n  if (entityType) {\r\n    np.entityType = entityType;\r\n    np._resolveNp();\r\n    // don't bother removing - _updateNps will do it later.\r\n    // __arrayRemoveItem(incompleteNps, np, false);\r\n  } else {\r\n    let incompleteNps = core.getArray(metadataStore._incompleteTypeMap, np.entityTypeName);\r\n    core.arrayAddItemUnique(incompleteNps, np);\r\n  }\r\n  return !!entityType;\r\n}\r\n\r\nfunction calcUnmappedProperties(stype: StructuralType, instance: any) {\r\n  let metadataPropNames = stype.getPropertyNames();\r\n  let modelLib = config.interfaceRegistry.modelLibrary.getDefaultInstance();\r\n  let trackablePropNames = modelLib.getTrackablePropertyNames(instance);\r\n  trackablePropNames.forEach(function (pn: string) {\r\n    if (metadataPropNames.indexOf(pn) === -1) {\r\n      let val = instance[pn];\r\n      try {\r\n        if (typeof val === \"function\") val = val();\r\n      } catch (e) {\r\n      }\r\n      let dt = DataType.fromValue(val);\r\n      let newProp = new DataProperty({\r\n        name: pn,\r\n        dataType: dt,\r\n        isNullable: true,\r\n        isUnmapped: true\r\n      });\r\n      newProp.isSettable = core.isSettable(instance, pn);\r\n      if (stype instanceof EntityType && stype.subtypes != null && stype.subtypes.length) {\r\n        stype.getSelfAndSubtypes().forEach((st) => {\r\n          st._addPropertyCore(new DataProperty(newProp));\r\n        });\r\n      } else {\r\n        stype._addPropertyCore(newProp);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nexport interface ComplexTypeConfig {\r\n  shortName?: string;\r\n  namespace?: string;\r\n  dataProperties?: DataProperty[] | Object[] | Object;\r\n  isComplexType?: boolean;  // needed because this ctor can get called from the addEntityType method which needs the isComplexType prop\r\n  custom?: Object;\r\n}\r\n\r\n/**  Container for all of the metadata about a specific type of Complex object.\r\n>     let complexType = new ComplexType( {\r\n>         shortName: \"address\",\r\n>         namespace: \"myAppNamespace\"\r\n>     });\r\n@param config - Configuration settings\r\n**/\r\nexport class ComplexType {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n  /** For polymorphic purpose only - always true here */\r\n  isComplexType = true;\r\n\r\n  /** The [[MetadataStore]] containing this ComplexType. */\r\n  metadataStore: MetadataStore;\r\n\r\n  /**  The fully qualifed name of this ComplexType. __Read Only__  **/\r\n  name: string;\r\n  /**  The short, unqualified, name for this ComplexType. __Read Only__ **/\r\n  shortName: string;\r\n\r\n  /** The namespace for this ComplexType. __Read Only__ **/\r\n  namespace: string;\r\n  /** The DataProperties (see [[DataProperty]] associated with this ComplexType. __Read Only__ */\r\n  dataProperties: DataProperty[];\r\n  /** The DataProperties for this ComplexType that contain instances of a [[ComplexType]]. __Read Only__ */\r\n  complexProperties: DataProperty[];\r\n\r\n  /**\r\n  The entity level validators associated with this ComplexType. Validators can be added and\r\n  removed from this collection. __Read Only__  **/\r\n  validators: Validator[];\r\n  /** For polymorphic purpose only - always empty here */\r\n  concurrencyProperties: DataProperty[];\r\n  /** The DataProperties associated with this ComplexType that are not mapped to any backend datastore. These are effectively free standing\r\n  properties. __Read Only__   **/\r\n  unmappedProperties: DataProperty[];\r\n\r\n  // keyProperties and navigationProperties are not used on complexTypes - but here to allow sharing of code between EntityType and ComplexType.\r\n  navigationProperties: DataProperty[];\r\n  // and may be used later to enforce uniqueness on arrays of complextypes.\r\n  keyProperties: DataProperty[];\r\n  warnings: any[];\r\n  serializerFn?: (prop: EntityProperty, val: any) => any;\r\n\r\n  /** A free form object that can be used to define any custom metadata for this ComplexType. ***/\r\n  custom?: any;\r\n  /** @hidden @internal */\r\n  _mappedPropertiesCount: number;\r\n  /** @hidden @internal */\r\n  _extra?: any;\r\n\r\n  // copy entityType methods onto complexType\r\n  /** See [[EntityType.getCtor]] */\r\n  getCtor = EntityType.prototype.getCtor;\r\n  // note the name change.\r\n  createInstance = EntityType.prototype.createEntity;\r\n  /** See [EntityType.addValidator] */\r\n  addValidator = EntityType.prototype.addValidator;\r\n  getProperty = EntityType.prototype.getProperty;\r\n  getPropertiesOnPath = EntityType.prototype.getPropertiesOnPath;\r\n  getPropertyNames = EntityType.prototype.getPropertyNames;\r\n  /** @hidden @internal */\r\n  _addPropertyCore = EntityType.prototype._addPropertyCore;\r\n  /** @hidden @internal */\r\n  _addDataProperty = EntityType.prototype._addDataProperty;\r\n  /** @hidden @internal */\r\n  _updateNames = EntityType.prototype._updateNames;\r\n  /** @hidden @internal */\r\n  _updateCps = EntityType.prototype._updateCps;\r\n  /** @hidden @internal */\r\n  _initializeInstance = EntityType.prototype._initializeInstance;\r\n  /** @hidden @internal */\r\n  _updateTargetFromRaw = EntityType.prototype._updateTargetFromRaw;\r\n  /** @hidden @internal */\r\n  _setCtor = EntityType.prototype._setCtor;\r\n\r\n  constructor(config: ComplexTypeConfig) {\r\n    if (arguments.length > 1) {\r\n      throw new Error(\"The ComplexType ctor has a single argument that is a configuration object.\");\r\n    }\r\n\r\n    assertConfig(config)\r\n      .whereParam(\"shortName\").isNonEmptyString()\r\n      .whereParam(\"namespace\").isString().isOptional().withDefault(\"\")\r\n      .whereParam(\"dataProperties\").isOptional()\r\n      .whereParam(\"isComplexType\").isOptional().isBoolean()   // needed because this ctor can get called from the addEntityType method which needs the isComplexType prop\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n\r\n    this.name = qualifyTypeName(this.shortName, this.namespace);\r\n    this.isComplexType = true;\r\n    this.dataProperties = [];\r\n    this.complexProperties = [];\r\n    this.validators = [];\r\n    this.concurrencyProperties = [];\r\n    this.unmappedProperties = [];\r\n    this._mappedPropertiesCount = 0;\r\n    // keyProperties and navigationProperties are not used on complexTypes - but here to allow sharing of code between EntityType and ComplexType.\r\n    this.navigationProperties = [];\r\n    this.keyProperties = []; // may be used later to enforce uniqueness on arrays of complextypes.\r\n    if (config.dataProperties) {\r\n      addProperties(this, config.dataProperties, DataProperty);\r\n    }\r\n  }\r\n\r\n  /**\r\n  General purpose property set method\r\n  >      // assume em1 is an EntityManager\r\n  >      let addresstType = em1.metadataStore.getEntityType(\"Address\");\r\n  >      addressType.setProperties( {\r\n  >          custom: { foo: 7, bar: \"test\" }\r\n  >      });\r\n  @param config - Custom config object\r\n  @param config.custom - {Object}\r\n  **/\r\n  setProperties(config: { custom?: Object }) {\r\n    assertConfig(config)\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n  }\r\n\r\n\r\n  getAllValidators() {\r\n    // ComplexType inheritance is not YET supported.\r\n    return this.validators;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _createInstanceCore(parent: StructuralObject, parentProperty: DataProperty) {\r\n    let aCtor = this.getCtor();\r\n    let instance = new aCtor() as ComplexObject;\r\n    new ComplexAspect(instance, parent, parentProperty);\r\n    // initialization occurs during either attach or in createInstance call.\r\n    return instance;\r\n  }\r\n\r\n\r\n  addProperty(dataProperty: DataProperty) {\r\n    assertParam(dataProperty, \"dataProperty\").isInstanceOf(DataProperty).check();\r\n    return this._addPropertyCore(dataProperty);\r\n  }\r\n\r\n  getProperties(): EntityProperty[] {\r\n    return this.dataProperties;\r\n  }\r\n\r\n  toJSON() {\r\n    return core.toJson(this, {\r\n      shortName: null,\r\n      namespace: null,\r\n      isComplexType: null,\r\n      dataProperties: null,\r\n      validators: null,\r\n      custom: null\r\n    });\r\n  }\r\n\r\n}\r\nComplexType.prototype._$typeName = \"ComplexType\";\r\n/** Creates an instance of this complexType */\r\nComplexType.prototype.createInstance = EntityType.prototype.createEntity;\r\n\r\nexport interface DataPropertyConfig {\r\n  name?: string;\r\n  nameOnServer?: string;\r\n  dataType?: DataType | string | ComplexType;\r\n  complexTypeName?: string;\r\n  isNullable?: boolean;\r\n  isScalar?: boolean; // will be false for some NoSQL databases.\r\n  defaultValue?: any;\r\n  isPartOfKey?: boolean;\r\n  isUnmapped?: boolean;\r\n  isSettable?: boolean;\r\n  concurrencyMode?: string;\r\n  maxLength?: number;\r\n  validators?: Validator[];\r\n  displayName?: string;\r\n  enumType?: any;\r\n  rawTypeName?: string;  // occurs with undefined datatypes\r\n  custom?: Object;\r\n}\r\n\r\n/**\r\nA DataProperty describes the metadata for a single property of an  [[EntityType]] that contains simple data.\r\n\r\nInstances of the DataProperty class are constructed automatically during Metadata retrieval. However it is also possible to construct them\r\ndirectly via the constructor.\r\n**/\r\nexport class DataProperty {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n  /** Is this a DataProperty? - always true here. Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */\r\n  isDataProperty = true;\r\n  /** Is this a NavigationProperty? - always false here.  Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */\r\n  isNavigationProperty = false;\r\n  /** The name of this property. __Read Only__  **/\r\n  name: string;\r\n  /** The name of this property on the server. __Read Only__ **/\r\n  nameOnServer: string;\r\n  /** The [[DataType]] of this property. __Read Only__ */\r\n  dataType: DataType | ComplexType; // this will be a complexType when dp is a complexProperty\r\n  /** The name of the [[ComplexType]] associated with this property; may be null. __Read Only__ */\r\n  complexTypeName: string;\r\n  /** The [[ComplexType]] associated with this property; may be undefined. __Read Only__ */\r\n  complexType?: ComplexType;\r\n  /**  Whether the contents of this property is an instance of a [[ComplexType]]. __Read Only__ */\r\n  isComplexProperty: boolean;\r\n  /** Whether this property is nullable. __Read Only__ */\r\n  isNullable: boolean;\r\n  /**  Whether this property is scalar (i.e., returns a single value as opposed to an array). __Read Only__ */\r\n  isScalar: boolean; // will be false for some NoSQL databases.\r\n  /** The default value for this property. __Read Only__ */\r\n  defaultValue: any;\r\n  /**  Whether this property is a 'key' property. __Read Only__ */\r\n  isPartOfKey: boolean;\r\n  /** Whether this property is an 'unmapped' property. __Read Only__ */\r\n  isUnmapped: boolean;\r\n  /** Whether this property is 'settable'. __Read Only__ */\r\n  isSettable: boolean;\r\n  // TODO: doc this\r\n  concurrencyMode: string;\r\n  /**  The maximum length for the value of this property. Only meaningful for strings. __Read Only__ */\r\n  maxLength?: number;\r\n  /** The [[Validator]] instances that are associated with this property. Validators can be added and\r\n  removed from this collection. __Read Only__ */\r\n  validators: Validator[];\r\n  /** The display name of this property. __Read Only__ */\r\n  displayName: string;\r\n  // TODO: doc this\r\n  enumType?: any;\r\n  /** The raw type name of this property. will only be defined for properties with a DataType of 'Undefined' */\r\n  rawTypeName?: string;  // occurs with undefined datatypes\r\n  /**  A free form object that can be used to define any custom metadata for this DataProperty. __Read Only__ */\r\n  custom?: Object;\r\n  // TODO: doc this\r\n  inverseNavigationProperty?: NavigationProperty;\r\n  /**\r\n  The navigation property related to this property.  Will only be set if this is a foreign key property. __Read Only__ */\r\n  relatedNavigationProperty?: NavigationProperty;\r\n  /** The parent type that this property belongs to - will be either a [[EntityType]] or a [[ComplexType]]. __Read Only__ */\r\n  parentType: StructuralType;\r\n  /** Property on the base type that this property is inherited from. Will be null if the property is not on the base type. __Read Only__ */\r\n  baseProperty?: DataProperty;\r\n\r\n  /** DataProperty constructor\r\n  >      let lastNameProp = new DataProperty( {\r\n  >          name: \"lastName\",\r\n  >          dataType: DataType.String,\r\n  >          isNullable: true,\r\n  >          maxLength: 20\r\n  >      });\r\n  >      // assuming personEntityType is a newly constructed EntityType\r\n  >      personEntityType.addProperty(lastNameProperty);\r\n  @param config - A configuration Object or a DataProperty\r\n  */\r\n  constructor(config: DataPropertyConfig | DataProperty) {\r\n    assertConfig(config)\r\n      .whereParam(\"name\").isString().isOptional()\r\n      .whereParam(\"nameOnServer\").isString().isOptional()\r\n      .whereParam(\"dataType\").isEnumOf(DataType).isOptional().or().isString().or().isInstanceOf(ComplexType)\r\n      .whereParam(\"complexTypeName\").isOptional()\r\n      .whereParam(\"isNullable\").isBoolean().isOptional().withDefault(true)\r\n      .whereParam(\"isScalar\").isOptional().withDefault(true)// will be false for some NoSQL databases.\r\n      .whereParam(\"defaultValue\").isOptional()\r\n      .whereParam(\"isPartOfKey\").isBoolean().isOptional()\r\n      .whereParam(\"isUnmapped\").isBoolean().isOptional()\r\n      .whereParam(\"isSettable\").isBoolean().isOptional().withDefault(true)\r\n      .whereParam(\"concurrencyMode\").isString().isOptional()\r\n      .whereParam(\"maxLength\").isNumber().isOptional()\r\n      .whereParam(\"validators\").isInstanceOf(Validator).isArray().isOptional().withDefault([])\r\n      .whereParam(\"displayName\").isOptional()\r\n      .whereParam(\"enumType\").isOptional()\r\n      .whereParam(\"rawTypeName\").isOptional() // occurs with undefined datatypes\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n    let hasName = !!(this.name || this.nameOnServer);\r\n    if (!hasName) {\r\n      throw new Error(\"A DataProperty must be instantiated with either a 'name' or a 'nameOnServer' property\");\r\n    }\r\n    // name/nameOnServer is resolved later when a metadataStore is available.\r\n\r\n    if (this.complexTypeName) {\r\n      this.isComplexProperty = true;\r\n      // this.dataType = null; // TODO: would like to remove this line because dataType will be set later.\r\n    } else if (typeof (this.dataType) === \"string\") {\r\n      let dt = DataType.fromName(this.dataType);\r\n      if (!dt) {\r\n        throw new Error(\"Unable to find a DataType enumeration by the name of: \" + this.dataType);\r\n      }\r\n      this.dataType = dt;\r\n    } else if (!this.dataType) {\r\n      this.dataType = DataType.String;\r\n    }\r\n\r\n    // == as opposed to === is deliberate here.\r\n    if (this.defaultValue == null) {\r\n      if (this.isNullable) {\r\n        this.defaultValue = null;\r\n      } else {\r\n        if (this.isComplexProperty) {\r\n          // what to do? - shouldn't happen from EF - but otherwise ???\r\n        } else if (this.dataType === DataType.Binary) {\r\n          this.defaultValue = \"AAAAAAAAJ3U=\"; // hack for all binary fields but value is specifically valid for timestamp fields - arbitrary valid 8 byte base64 value.\r\n        } else {\r\n          this.defaultValue = (this.dataType as any).defaultValue;\r\n          if (this.defaultValue == null) {\r\n            throw new Error(\"A nonnullable DataProperty cannot have a null defaultValue. Name: \" + (this.name || this.nameOnServer));\r\n          }\r\n        }\r\n      }\r\n    } else if ((this.dataType as any).isNumeric) {\r\n      // in case the defaultValue comes in as a string ( which it does in EF6).\r\n      if (typeof (this.defaultValue) === \"string\") {\r\n        this.defaultValue = parseFloat(this.defaultValue);\r\n      }\r\n    }\r\n\r\n    if (this.isComplexProperty) {\r\n      this.isScalar = this.isScalar == null || this.isScalar === true;\r\n    }\r\n\r\n  }\r\n\r\n  static getRawValueFromServer(rawEntity: Object, dp: DataProperty) {\r\n    if (dp.isUnmapped) {\r\n      return rawEntity[dp.nameOnServer || dp.name];\r\n    } else {\r\n      let val = rawEntity[dp.nameOnServer];\r\n      return val !== undefined ? val : dp.defaultValue;\r\n    }\r\n  }\r\n\r\n  static getRawValueFromClient(rawEntity: Object, dp: DataProperty) {\r\n    let val = rawEntity[dp.name];\r\n    return val !== undefined ? val : dp.defaultValue;\r\n  }\r\n\r\n  resolveProperty(propName: string) {\r\n    let result = this[propName];\r\n    let baseProp = this.baseProperty;\r\n    while (result == undefined && baseProp != null) {\r\n      result = baseProp[propName];\r\n      baseProp = baseProp.baseProperty;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  formatName() {\r\n    return this.parentType.name + \"--\" + this.name;\r\n  }\r\n\r\n\r\n  /**\r\n  General purpose property set method\r\n  >      // assume em1 is an EntityManager\r\n  >      let prop = myEntityType.getProperty(\"myProperty\");\r\n  >      prop.setProperties( {\r\n  >          custom: { foo: 7, bar: \"test\" }\r\n  >      });\r\n  @param config - A configuration object.\r\n  **/\r\n  setProperties(config: { displayName?: string, custom?: Object }) {\r\n    assertConfig(config)\r\n      .whereParam(\"displayName\").isOptional()\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n  }\r\n\r\n  getAllValidators() {\r\n    let validators = this.validators.slice(0);\r\n    let baseProp = this.baseProperty;\r\n    while (baseProp) {\r\n      validators.push.apply(validators, baseProp.validators);\r\n      baseProp = baseProp.baseProperty;\r\n    }\r\n    return validators;\r\n  }\r\n\r\n  toJSON() {\r\n    // do not serialize dataTypes that are complexTypes\r\n    return core.toJson(this, {\r\n      name: null,\r\n      dataType: function (v: any) {\r\n        return (v && v instanceof DataType) ? v.name : undefined;\r\n      }, // do not serialize dataTypes that are complexTypes\r\n      complexTypeName: null,\r\n      isNullable: true,\r\n      defaultValue: null,\r\n      isPartOfKey: false,\r\n      isUnmapped: false,\r\n      isSettable: true,\r\n      concurrencyMode: null,\r\n      maxLength: null,\r\n      validators: null,\r\n      displayName: null,\r\n      enumType: null,\r\n      rawTypeName: null,\r\n      isScalar: true,\r\n      custom: null\r\n    });\r\n  }\r\n\r\n  static fromJSON(json: any) {\r\n    json.dataType = DataType.fromName(json.dataType);\r\n    // Parse default value into correct data type. (dateTime instances require extra work to deserialize properly.)\r\n    if (json.defaultValue && json.dataType && json.dataType.parse) {\r\n      json.defaultValue = json.dataType.parse(json.defaultValue, typeof json.defaultValue);\r\n    }\r\n\r\n    if (json.validators) {\r\n      json.validators = json.validators.map(Validator.fromJSON);\r\n    }\r\n\r\n    return new DataProperty(json);\r\n  }\r\n\r\n}\r\nDataProperty.prototype._$typeName = \"DataProperty\";\r\n\r\nexport interface NavigationPropertyConfig {\r\n  name?: string;\r\n  nameOnServer?: string;\r\n  entityTypeName?: string;\r\n  isScalar?: boolean;\r\n  associationName?: string;\r\n  foreignKeyNames?: string[];\r\n  foreignKeyNamesOnServer?: string[];\r\n  invForeignKeyNames?: string[];\r\n  invForeignKeyNamesOnServer?: string[];\r\n  validators?: Validator[];\r\n  displayName?: string;\r\n  custom?: Object;\r\n}\r\n\r\n/**   A NavigationProperty describes the metadata for a single property of an [[EntityType]] that return instances of other EntityTypes.\r\n\r\nInstances of the NavigationProperty class are constructed automatically during Metadata retrieval.   However it is also possible to construct them\r\ndirectly via the constructor.\r\n**/\r\nexport class NavigationProperty {\r\n  /** @hidden @internal */\r\n  _$typeName: string;\r\n  /** Is this a DataProperty? - always false here \r\n  Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */\r\n  isDataProperty = false;\r\n  /** Is this a NavigationProperty? - always true here\r\n  Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */\r\n  isNavigationProperty = true;\r\n\r\n  formatName = DataProperty.prototype.formatName;\r\n  getAllValidators = DataProperty.prototype.getAllValidators;\r\n  resolveProperty = DataProperty.prototype.resolveProperty;\r\n\r\n  /** The [[EntityType]] returned by this property. __Read Only__ */\r\n  entityType: EntityType;\r\n  /** The name of the [[EntityType]] returned by this property. __Read Only__ */\r\n  entityTypeName: string;\r\n  /** The [[EntityType]] that this property belongs to. ( same as entityType). __Read Only__ */\r\n  parentType: EntityType; // ?? same as entityType\r\n  /** The [[EntityType]] that this property belongs to. ( same as entityType). __Read Only__ */\r\n  parentEntityType: EntityType; // ?? same as above\r\n  /** Property on the base type that this property is inherited from. Will be null if the property is not on the base type. __Read Only__ */\r\n  baseProperty?: NavigationProperty;\r\n  /** The inverse of this NavigationProperty.  The NavigationProperty that represents a navigation in the opposite direction\r\n  to this NavigationProperty. May be undefined for a undirectional NavigationProperty. __Read Only__ */\r\n  private _inverse?: NavigationProperty;\r\n  /** The name of this property. __Read Only__ */\r\n  name: string;\r\n  /** The name of this property on the server. __Read Only__ */\r\n  nameOnServer: string;\r\n  /**\r\n  Whether this property returns a single entity as opposed to  an array of entities. __Read Only__ */\r\n  isScalar: boolean;\r\n  /** The name of the association to which that this property belongs.  This associationName will be shared with this\r\n  properties 'inverse'. __Read Only__ */\r\n  associationName: string;\r\n  /** The names of the foreign key DataProperties associated with this NavigationProperty. There will usually only be a single DataProperty associated\r\n  with a Navigation property except in the case of entities with multipart keys. __Read Only__ */\r\n  foreignKeyNames: string[];\r\n  /** The server side names of the foreign key DataProperties associated with this NavigationProperty. There will usually only be a single DataProperty associated\r\n  with a Navigation property except in the case of entities with multipart keys. __Read Only__ */\r\n  foreignKeyNamesOnServer: string[];\r\n  invForeignKeyNames: string[];\r\n  invForeignKeyNamesOnServer: string[];\r\n  /** The 'foreign key' DataProperties associated with this NavigationProperty. There will usually only be a single DataProperty associated\r\n  with a Navigation property except in the case of entities with multipart keys. __Read Only__ */\r\n  relatedDataProperties: DataProperty[];\r\n  /** The [[Validator]] instances that are associated with this property. Validators can be added and\r\n  removed from this collection. __Read Only__ */\r\n  validators: Validator[];\r\n  /** The display name of this property. __Read Only__ */\r\n  displayName: string;\r\n  isUnmapped: boolean;\r\n  /** A free form object that can be used to define any custom metadata for this NavigationProperty.   **/\r\n  custom: Object;\r\n\r\n  /** NavigationProperty constructor\r\n  >      let homeAddressProp = new NavigationProperty( {\r\n  >          name: \"homeAddress\",\r\n  >          entityTypeName: \"Address:#myNamespace\",\r\n  >          isScalar: true,\r\n  >          associationName: \"address_person\",\r\n  >          foreignKeyNames: [\"homeAddressId\"]\r\n  >      });\r\n  >      let homeAddressIdProp = new DataProperty( {\r\n  >          name: \"homeAddressId\"\r\n  >          dataType: DataType.Integer\r\n  >      });\r\n  >      // assuming personEntityType is a newly constructed EntityType\r\n  >      personEntityType.addProperty(homeAddressProp);\r\n  >      personEntityType.addProperty(homeAddressIdProp);\r\n  @param config - A configuration object.\r\n  **/\r\n  constructor(config: NavigationPropertyConfig) {\r\n    assertConfig(config)\r\n      .whereParam(\"name\").isString().isOptional()\r\n      .whereParam(\"nameOnServer\").isString().isOptional()\r\n      .whereParam(\"entityTypeName\").isString()\r\n      .whereParam(\"isScalar\").isBoolean().isOptional().withDefault(true)\r\n      .whereParam(\"associationName\").isString().isOptional()\r\n      .whereParam(\"foreignKeyNames\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"foreignKeyNamesOnServer\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"invForeignKeyNames\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"invForeignKeyNamesOnServer\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"validators\").isInstanceOf(Validator).isArray().isOptional().withDefault([])\r\n      .whereParam(\"displayName\").isOptional()\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n    let hasName = !!(this.name || this.nameOnServer);\r\n\r\n    if (!hasName) {\r\n      throw new Error(\"A Navigation property must be instantiated with either a 'name' or a 'nameOnServer' property\");\r\n    }\r\n  }\r\n\r\n  /**\r\n  General purpose property set method\r\n  >      // assume myEntityType is an EntityType\r\n  >      let prop = myEntityType.getProperty(\"myProperty\");\r\n  >      prop.setProperties( {\r\n  >          custom: { foo: 7, bar: \"test\" }\r\n  >      });\r\n  @param config - A config object\r\n  **/\r\n  // TODO: create an interface for this.\r\n  setProperties(config: {\r\n    displayName?: string,\r\n    foreignKeyNames?: string[],\r\n    invForeignKeyNames?: string[],\r\n    inverse?: NavigationProperty | string,\r\n    custom?: Object\r\n  }) {\r\n    if (!this.parentType) {\r\n      throw new Error(\"Cannot call NavigationProperty.setProperties until the parent EntityType of the NavigationProperty has been set.\");\r\n    }\r\n    let inverse = config.inverse;\r\n    if (inverse) delete config.inverse;\r\n    assertConfig(config)\r\n      .whereParam(\"displayName\").isOptional()\r\n      .whereParam(\"foreignKeyNames\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"invForeignKeyNames\").isArray().isString().isOptional().withDefault([])\r\n      .whereParam(\"custom\").isOptional()\r\n      .applyAll(this);\r\n    this.parentType._updateNames(this);\r\n\r\n    this._resolveNp();\r\n    if (inverse) {\r\n      this.setInverse(inverse);\r\n    }\r\n\r\n  }\r\n\r\n  /** The inverse of this NavigationProperty.  The NavigationProperty that represents a navigation in the opposite direction\r\n  to this NavigationProperty. May be undefined for a undirectional NavigationProperty. __Read Only__ */\r\n  get inverse(): NavigationProperty | undefined {\r\n    return this.getInverse();\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  getInverse(): NavigationProperty | undefined {\r\n    let np: NavigationProperty = this;\r\n    while (!np._inverse && np.baseProperty) {\r\n      np = np.baseProperty;\r\n    }\r\n    return np._inverse;\r\n  }\r\n\r\n  setInverse(inverseNp: NavigationProperty | string) {\r\n    // let invNp: NavigationProperty;\r\n    let invNp = (inverseNp instanceof NavigationProperty) ? inverseNp : this.entityType.getNavigationProperty(inverseNp);\r\n\r\n    if (!invNp) {\r\n      throw throwSetInverseError(this, \"Unable to find inverse property: \" + inverseNp);\r\n    }\r\n\r\n    if (this._inverse || invNp._inverse) {\r\n      throwSetInverseError(this, \"It has already been set on one side or the other.\");\r\n    }\r\n    if (invNp.entityType !== this.parentType) {\r\n      throwSetInverseError(this, invNp.formatName + \" is not a valid inverse property for this.\");\r\n    }\r\n    if (this.associationName) {\r\n      invNp.associationName = this.associationName;\r\n    } else {\r\n      if (!invNp.associationName) {\r\n        invNp.associationName = this.formatName() + \"_\" + invNp.formatName();\r\n      }\r\n      this.associationName = invNp.associationName;\r\n    }\r\n    this._resolveNp();\r\n    invNp._resolveNp();\r\n  }\r\n\r\n  // // In progress - will be used for manual metadata config\r\n  // createInverse(config: any) {\r\n\r\n  //   if (!this.entityType) {\r\n  //     throwCreateInverseError(this, \"has not yet been defined.\");\r\n  //   }\r\n  //   if (this.entityType.isFrozen) {\r\n  //     throwCreateInverseError(this, \"is frozen.\");\r\n  //   }\r\n  //   let metadataStore = this.entityType.metadataStore;\r\n  //   if (metadataStore == null) {\r\n  //     throwCreateInverseError(this, \"has not yet been added to the metadataStore.\");\r\n  //   }\r\n\r\n  //   config.entityTypeName = this.parentEntityType.name;\r\n  //   config.associationName = this.associationName;\r\n  //   let invNp = new NavigationProperty(config);\r\n  //   this.parentEntityType.addNavigationProperty(invNp);\r\n  //   return invNp;\r\n  // };\r\n\r\n\r\n\r\n  toJSON() {\r\n    return core.toJson(this, {\r\n      name: null,\r\n      entityTypeName: null,\r\n      isScalar: null,\r\n      associationName: null,\r\n      validators: null,\r\n      displayName: null,\r\n      foreignKeyNames: null,\r\n      invForeignKeyNames: null,\r\n      custom: null\r\n    });\r\n  }\r\n\r\n  static fromJSON(json: any) {\r\n    if (json.validators) {\r\n      json.validators = json.validators.map(Validator.fromJSON);\r\n    }\r\n    return new NavigationProperty(json);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _resolveNp() {\r\n    let np = this;\r\n    let entityType = np.entityType;\r\n    let invNp = core.arrayFirst(entityType.navigationProperties, (altNp) => {\r\n      // Can't do this because of possibility of comparing a base class np with a subclass altNp.\r\n      // return altNp.associationName === np.associationName\r\n      //    && altNp !== np;\r\n      // So use this instead.\r\n      return altNp.associationName === np.associationName &&\r\n        (altNp.name !== np.name || altNp.entityTypeName !== np.entityTypeName);\r\n    });\r\n    np._inverse = invNp || undefined;\r\n    //if (invNp && invNp.inverse == null) {\r\n    //    invNp._resolveNp();\r\n    //}\r\n    if (!invNp) {\r\n      // unidirectional 1-n relationship\r\n      np.invForeignKeyNames.forEach(function (invFkName) {\r\n        let fkProp = entityType.getDataProperty(invFkName);\r\n        if (fkProp == null) {\r\n          throw new Error(\"EntityType '\" + np.entityTypeName + \"' has no foreign key matching '\" + invFkName + \"'\");\r\n        }\r\n        let invEntityType = np.parentType;\r\n        invNp = core.arrayFirst(invEntityType.navigationProperties, (np2) => {\r\n          return np2.invForeignKeyNames && np2.invForeignKeyNames.indexOf(fkProp!.name) >= 0 && np2.entityType === fkProp!.parentType;\r\n        });\r\n        fkProp.inverseNavigationProperty = invNp || undefined;\r\n        core.arrayAddItemUnique(entityType.foreignKeyProperties, fkProp);\r\n      });\r\n    }\r\n\r\n    resolveRelated(np);\r\n  }\r\n\r\n}\r\nNavigationProperty.prototype._$typeName = \"NavigationProperty\";\r\n\r\nfunction throwSetInverseError(np: NavigationProperty, message: string) {\r\n  throw new Error(\"Cannot set the inverse property for: \" + np.formatName() + \". \" + message);\r\n}\r\n\r\n// Not current used.\r\n// function throwCreateInverseError(np: NavigationProperty, message: string) {\r\n//   throw new Error(\"Cannot create inverse for: \" + np.formatName() + \". The entityType for this navigation property \" + message);\r\n// }\r\n\r\n// sets navigation property: relatedDataProperties and dataProperty: relatedNavigationProperty\r\nfunction resolveRelated(np: NavigationProperty) {\r\n\r\n  let fkNames = np.foreignKeyNames;\r\n  if (fkNames.length === 0) return;\r\n\r\n  let parentEntityType = np.parentType;\r\n  let fkProps = fkNames.map(function (fkName) {\r\n    return parentEntityType.getDataProperty(fkName);\r\n  });\r\n  let fkPropCollection = parentEntityType.foreignKeyProperties;\r\n\r\n  fkProps.forEach((dp: DataProperty) => {\r\n    core.arrayAddItemUnique(fkPropCollection, dp);\r\n    dp.relatedNavigationProperty = np;\r\n    // now update the inverse\r\n    core.arrayAddItemUnique(np.entityType.inverseForeignKeyProperties, dp);\r\n    if (np.relatedDataProperties) {\r\n      core.arrayAddItemUnique(np.relatedDataProperties, dp);\r\n    } else {\r\n      np.relatedDataProperties = [dp];\r\n    }\r\n  });\r\n}\r\n\r\n\r\n/**\r\nAutoGeneratedKeyType is an 'Enum' containing all of the valid states for an automatically generated key.\r\n**/\r\nexport class AutoGeneratedKeyType extends BreezeEnum {\r\n\r\n  /**\r\n  This entity does not have an autogenerated key.\r\n  The client must set the key before adding the entity to the EntityManager\r\n  **/\r\n  static None = new AutoGeneratedKeyType();\r\n  /** \r\n  This entity's key is an Identity column and is set by the backend database.\r\n  Keys for new entities will be temporary until the entities are saved at which point the keys will\r\n  be converted to their 'real' versions.\r\n  **/\r\n  static Identity = new AutoGeneratedKeyType();\r\n  /**\r\n  This entity's key is generated by a KeyGenerator and is set by the backend database.\r\n  Keys for new entities will be temporary until the entities are saved at which point the keys will\r\n  be converted to their 'real' versions.\r\n  **/\r\n  static KeyGenerator = new AutoGeneratedKeyType();\r\n\r\n}\r\nAutoGeneratedKeyType.prototype._$typeName = \"AutoGeneratedKeyType\";\r\nError['x'] = AutoGeneratedKeyType.resolveSymbols();\r\n\r\n\r\n// mixin methods\r\n/** @hidden @internal */\r\ndeclare module \"./assert-param\" {\r\n  interface Param {\r\n    isEntity(): Param;\r\n    isEntityProperty(): Param;\r\n  }\r\n}\r\n\r\nlet proto = Param.prototype;\r\n\r\n// 'this' below is TS annotation \r\nproto.isEntity = function (this: Param) {\r\n  return this._addContext({\r\n    fn: isEntity,\r\n    msg: \" must be an entity\"\r\n  });\r\n};\r\n\r\nfunction isEntity(context: any, v: any) {\r\n  if (v == null) return false;\r\n  return (v.entityType !== undefined);\r\n}\r\n\r\nproto.isEntityProperty = function (this: Param) {\r\n  return this._addContext({\r\n    fn: isEntityProperty,\r\n    msg: \" must be either a DataProperty or a NavigationProperty\"\r\n  });\r\n};\r\n\r\nfunction isEntityProperty(context: any, v: any) {\r\n  if (v == null) return false;\r\n  return (v.isDataProperty || v.isNavigationProperty);\r\n}\r\n\r\n// functions shared between classes related to Metadata\r\n\r\nfunction isQualifiedTypeName(entityTypeName: string) {\r\n  return entityTypeName.indexOf(\":#\") >= 0;\r\n}\r\n\r\nexport function qualifyTypeName(shortName: string, ns?: string) {\r\n  if (ns && ns.length > 0) {\r\n    return shortName + \":#\" + ns;\r\n  } else {\r\n    return shortName;\r\n  }\r\n}\r\n\r\n// Used by both ComplexType and EntityType\r\nfunction addProperties(entityType: StructuralType, propObj: Object | undefined, ctor: any) {\r\n  if (propObj == null) return;\r\n  if (Array.isArray(propObj)) {\r\n    propObj.forEach(entityType._addPropertyCore.bind(entityType));\r\n  } else if (typeof (propObj) === 'object') {\r\n    for (let key in propObj) {\r\n      if (core.hasOwnProperty(propObj, key)) {\r\n        let value = propObj[key];\r\n        value.name = key;\r\n        let prop = new ctor(value);\r\n        entityType._addPropertyCore(prop);\r\n      }\r\n    }\r\n  } else {\r\n    throw new Error(\"The 'dataProperties' or 'navigationProperties' values must be either an array of data/nav properties or an object where each property defines a data/nav property\");\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { core } from './core';\r\nimport { config } from './config';\r\nimport { EntityQuery } from './entity-query';\r\nimport { DataServiceAdapter, AjaxAdapter, ChangeRequestInterceptorCtor, ChangeRequestInterceptor } from './interface-registry';\r\nimport { Entity } from './entity-aspect';\r\nimport { MappingContext } from './mapping-context';\r\nimport { DataService, JsonResultsAdapter } from './data-service';\r\nimport { HttpResponse, SaveContext, SaveBundle, ServerError, SaveResult, SaveErrorFromServer, QueryResult } from './entity-manager';\r\nimport { MetadataStore } from './entity-metadata';\r\n\r\n/** For use by breeze plugin authors only.  The class is used as the base class for most [[IDataServiceAdapter]] implementations\r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden\r\n*/\r\nexport abstract class AbstractDataServiceAdapter implements DataServiceAdapter {\r\n  /** @hidden @internal */\r\n  _$impl?: any;\r\n  /** The name of this adapter. */\r\n  name: string;\r\n  /** The [[IAjaxAdapter]] used by this [[IDataServiceAdapter]]. */\r\n  ajaxImpl: AjaxAdapter;\r\n\r\n  constructor() {\r\n  }\r\n\r\n\r\n  // TODO use interface\r\n  checkForRecomposition(interfaceInitializedArgs: any) {\r\n    if (interfaceInitializedArgs.interfaceName === \"ajax\" && interfaceInitializedArgs.isDefault) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    this.ajaxImpl = config.getAdapterInstance<AjaxAdapter>(\"ajax\") !;\r\n\r\n    // don't cache 'ajax' because then we would need to \".bind\" it, and don't want to because of brower support issues.\r\n    if (this.ajaxImpl && this.ajaxImpl.ajax) {\r\n      return;\r\n    }\r\n    throw new Error(\"Unable to find ajax adapter for dataservice adapter '\" + (this.name || '') + \"'.\");\r\n  }\r\n\r\n  fetchMetadata(metadataStore: MetadataStore, dataService: DataService) {\r\n    let serviceName = dataService.serviceName;\r\n    let url = dataService.qualifyUrl(\"Metadata\");\r\n\r\n    let promise = new Promise((resolve, reject) => {\r\n\r\n      this.ajaxImpl.ajax({\r\n        type: \"GET\",\r\n        url: url,\r\n        dataType: 'json',\r\n        success: (httpResponse: HttpResponse) => {\r\n\r\n          // might have been fetched by another query\r\n          if (metadataStore.hasMetadataFor(serviceName)) {\r\n            return resolve(\"already fetched\");\r\n          }\r\n          let data = httpResponse.data;\r\n          let metadata: any;\r\n          try {\r\n            metadata = typeof (data) === \"string\" ? JSON.parse(data) : data;\r\n            metadataStore.importMetadata(metadata);\r\n          } catch (e) {\r\n            let errMsg = \"Unable to either parse or import metadata: \" + e.message;\r\n            handleHttpError(reject, httpResponse, \"Metadata query failed for: \" + url + \". \" + errMsg);\r\n          }\r\n\r\n          // import may have brought in the service.\r\n          if (!metadataStore.hasMetadataFor(serviceName)) {\r\n            metadataStore.addDataService(dataService);\r\n          }\r\n\r\n          resolve(metadata);\r\n\r\n        },\r\n        error: (httpResponse: HttpResponse) => {\r\n          handleHttpError(reject, httpResponse, \"Metadata query failed for: \" + url);\r\n        }\r\n      });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  executeQuery(mappingContext: MappingContext) {\r\n    mappingContext.adapter = this;\r\n    let promise = new Promise<QueryResult>((resolve, reject) => {\r\n      let url = mappingContext.getUrl();\r\n\r\n      let params = {\r\n        type: \"GET\",\r\n        url: url,\r\n        params: (mappingContext.query as EntityQuery).parameters,\r\n        dataType: 'json',\r\n        success: function (httpResponse: HttpResponse) {\r\n          let data = httpResponse.data;\r\n          try {\r\n            let rData: QueryResult;\r\n            let results = data && (data.results || data.Results);\r\n            if (results) {\r\n              rData = { results: results, inlineCount: data.inlineCount || data.InlineCount, \r\n                httpResponse: httpResponse, query: mappingContext.query };\r\n            } else {\r\n              rData = { results: data, httpResponse: httpResponse, query: mappingContext.query };\r\n            }\r\n\r\n            resolve(rData);\r\n          } catch (e) {\r\n            if (e instanceof Error) {\r\n              reject(e);\r\n            } else {\r\n              handleHttpError(reject, httpResponse);\r\n            }\r\n          }\r\n\r\n        },\r\n        error: function (httpResponse: HttpResponse) {\r\n          handleHttpError(reject, httpResponse);\r\n        },\r\n        crossDomain: false\r\n      };\r\n      if (mappingContext.dataService.useJsonp) {\r\n        params.dataType = 'jsonp';\r\n        params.crossDomain = true;\r\n      }\r\n      this.ajaxImpl.ajax(params);\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  saveChanges(saveContext: SaveContext, saveBundle: SaveBundle) {\r\n    let adapter = saveContext.adapter = this;\r\n\r\n    let saveBundleSer = adapter._prepareSaveBundle(saveContext, saveBundle);\r\n    let bundle = JSON.stringify(saveBundleSer);\r\n\r\n    let url = saveContext.dataService.qualifyUrl(saveContext.resourceName);\r\n    let promise = new Promise<SaveResult>((resolve, reject) => {\r\n      this.ajaxImpl.ajax({\r\n        type: \"POST\",\r\n        url: url,\r\n        dataType: 'json',\r\n        contentType: \"application/json\",\r\n        data: bundle,\r\n        success: function (httpResponse: HttpResponse) {\r\n          httpResponse.saveContext = saveContext;\r\n          let data = httpResponse.data;\r\n          if (data.Errors || data.errors) {\r\n            handleHttpError(reject, httpResponse);\r\n          } else {\r\n            let saveResult = adapter._prepareSaveResult(saveContext, data);\r\n            saveResult.httpResponse = httpResponse;\r\n            resolve(saveResult);\r\n          }\r\n        },\r\n        error: function (httpResponse: HttpResponse) {\r\n          httpResponse.saveContext = saveContext;\r\n          handleHttpError(reject, httpResponse);\r\n        }\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /** Abstract method that needs to be overwritten in any concrete DataServiceAdapter subclass. \r\n  The return value from this method should be a serializable object that will be sent to the server after calling JSON.stringify on it.\r\n  */\r\n  _prepareSaveBundle(saveContext: SaveContext, saveBundle: SaveBundle): any {\r\n    // The implementor should call _createChangeRequestInterceptor\r\n    throw new Error(\"Need a concrete implementation of _prepareSaveBundle\");\r\n  }\r\n\r\n  /**\r\n  Returns a constructor function for a \"ChangeRequestInterceptor\"\r\n  that can tweak the saveBundle both as it is built and when it is completed\r\n  by a concrete DataServiceAdapater.\r\n\r\n  Initialized with a default, no-op implementation that developers can replace with a\r\n  substantive implementation that changes the individual entity change requests\r\n  or aspects of the entire 'saveBundle' without having to write their own DataService adapters.\r\n  >     let adapter = breeze.config.getAdapterInstance('dataService');\r\n  >     adapter.changeRequestInterceptor = function (saveContext, saveBundle) {\r\n  >         this.getRequest = function (request, entity, index) {\r\n  >            // alter the request that the adapter prepared for this entity\r\n  >            // based on the entity, saveContext, and saveBundle\r\n  >            // e.g., add a custom header or prune the originalValuesMap\r\n  >            return request;\r\n  >        };\r\n  >        this.done = function (requests) {\r\n  >            // alter the array of requests representing the entire change-set\r\n  >            // based on the saveContext and saveBundle\r\n  >        };\r\n  >     }\r\n\r\n  @param saveContext - The BreezeJS \"context\" for the save operation.\r\n  @param saveBundle - Contains the array of entities-to-be-saved (AKA, the entity change-set).\r\n  @return Constructor for a \"ChangeRequestInterceptor\".\r\n  **/\r\n  changeRequestInterceptor: ChangeRequestInterceptorCtor = DefaultChangeRequestInterceptor;\r\n\r\n  /** @hidden @internal */\r\n  _createChangeRequestInterceptor(saveContext: SaveContext, saveBundle: SaveBundle) {\r\n    let adapter = saveContext.adapter!;\r\n    let cri = adapter.changeRequestInterceptor;\r\n    let isFn = core.isFunction;\r\n\r\n    if (isFn(cri)) {\r\n      let pre = adapter.name + \" DataServiceAdapter's ChangeRequestInterceptor\";\r\n      let post = \" is missing or not a function.\";\r\n      let interceptor = new cri(saveContext, saveBundle);\r\n      if (!isFn(interceptor.getRequest)) {\r\n        throw new Error(pre + '.getRequest' + post);\r\n      }\r\n      if (!isFn(interceptor.done)) {\r\n        throw new Error(pre + '.done' + post);\r\n      }\r\n      return interceptor;\r\n    } else {\r\n      return new DefaultChangeRequestInterceptor(saveContext, saveBundle) as ChangeRequestInterceptor;\r\n    }\r\n  }\r\n\r\n  /** Abstract method that needs to be overwritten in any concrete DataServiceAdapter sublclass. \r\n  This method needs to take the result returned the server and convert it into an ISaveResult. \r\n  */\r\n  _prepareSaveResult(saveContext: SaveContext, data: any): SaveResult {\r\n    throw new Error(\"Need a concrete implementation of _prepareSaveResult\");\r\n  }\r\n\r\n\r\n  /** Utility method that may be used in any concrete DataServiceAdapter sublclass to handle any \r\n  http connection issues. \r\n  */\r\n  // Put this at the bottom of your http error analysis\r\n  static _catchNoConnectionError(err: ServerError) {\r\n    if (err.status === 0 && err.message == null) {\r\n      err.message = \"HTTP response status 0 and no message.  \" +\r\n        \"Likely did not or could not reach server. Is the server running?\";\r\n    }\r\n  }\r\n\r\n  jsonResultsAdapter = new JsonResultsAdapter({\r\n    name: \"noop\",\r\n\r\n    visitNode: function (/* node, mappingContext, nodeContext */) {\r\n      return {};\r\n    }\r\n  });\r\n}\r\n\r\nfunction handleHttpError(reject: (reason?: any) => void, httpResponse: HttpResponse, messagePrefix?: string) {\r\n  let err = createError(httpResponse);\r\n  AbstractDataServiceAdapter._catchNoConnectionError(err);\r\n  if (messagePrefix) {\r\n    err.message = messagePrefix + \"; \" + err.message;\r\n  }\r\n  reject(err);\r\n}\r\n\r\nfunction createError(httpResponse: HttpResponse) {\r\n  let err = new Error() as ServerError;\r\n  err.httpResponse = httpResponse;\r\n  err.status = httpResponse.status;\r\n\r\n  let errObj = httpResponse.data;\r\n\r\n  if (!errObj) {\r\n    err.message = httpResponse.error && httpResponse.error.toString();\r\n    return err;\r\n  }\r\n\r\n  // some ajax providers will convert errant result into an object (angularjs), others will not (jQuery)\r\n  // if not do it here.\r\n  if (typeof errObj === \"string\") {\r\n    try {\r\n      errObj = JSON.parse(errObj);\r\n    } catch (e) {\r\n      // sometimes httpResponse.data is just the error message itself\r\n      err.message = errObj;\r\n      return err;\r\n    }\r\n  }\r\n\r\n  let saveContext = httpResponse.saveContext;\r\n\r\n  // if any of the follow properties exist the source is .NET\r\n  let tmp = errObj.Message || errObj.ExceptionMessage || errObj.EntityErrors || errObj.Errors;\r\n  let isDotNet = !!tmp;\r\n  let message: string, entityErrors: any[];\r\n  if (!isDotNet) {\r\n    message = errObj.message;\r\n    entityErrors = errObj.errors || errObj.entityErrors;\r\n  } else {\r\n    let tmp = errObj;\r\n    do {\r\n      // .NET exceptions can provide both ExceptionMessage and Message but ExceptionMethod if it\r\n      // exists has a more detailed message.\r\n      message = tmp.ExceptionMessage || tmp.Message;\r\n      tmp = tmp.InnerException;\r\n    } while (tmp);\r\n    // .EntityErrors will only occur as a result of an EntityErrorsException being deliberately thrown on the server\r\n    entityErrors = errObj.Errors || errObj.EntityErrors;\r\n    entityErrors = entityErrors && entityErrors.map(function (e) {\r\n      return {\r\n        errorName: e.ErrorName,\r\n        entityTypeName: MetadataStore.normalizeTypeName(e.EntityTypeName),\r\n        keyValues: e.KeyValues,\r\n        propertyName: e.PropertyName,\r\n        errorMessage: e.ErrorMessage\r\n      };\r\n    });\r\n  }\r\n\r\n  if (saveContext && entityErrors) {\r\n\r\n    let propNameFn = saveContext.entityManager.metadataStore.namingConvention.serverPropertyNameToClient;\r\n    entityErrors.forEach(function (e) {\r\n      e.propertyName = e.propertyName && propNameFn(e.propertyName);\r\n    });\r\n    (err as SaveErrorFromServer).entityErrors = entityErrors;\r\n  }\r\n\r\n  err.message = message || \"Server side errors encountered - see the entityErrors collection on this object for more detail\";\r\n  return err;\r\n}\r\n\r\n\r\n/** This is a default, no-op implementation that developers can replace. */\r\nclass DefaultChangeRequestInterceptor {\r\n  constructor(saveContext: SaveContext, saveBundle: SaveBundle) {\r\n\r\n  }\r\n\r\n  getRequest(request: any, entity: Entity, index: number) {\r\n    return request;\r\n  }\r\n\r\n  done(requests: Object[]) {\r\n  }\r\n}\r\n","import { core  } from './core';\r\nimport { assertConfig } from './assert-param';\r\n\r\n/** Configuration info to be passed to the [[ValidationOptions]] constructor */\r\nexport interface ValidationOptionsConfig {\r\n  /** Whether entity and property level validation should occur when entities are attached to the EntityManager \r\n  other than via a query. (default = true) */\r\n  validateOnAttach?: boolean;\r\n  /**  Whether entity and property level validation should occur before entities are saved. \r\n  A failed validation will force the save to fail early. (default = true)  */\r\n  validateOnSave?: boolean;\r\n  /** Whether entity and property level validation should occur after entities are queried from a remote server.\r\n  (default = false)  **/\r\n  validateOnQuery?: boolean;\r\n  /** Whether property level validation should occur after entities are modified.\r\n  (default = true)  **/\r\n  validateOnPropertyChange?: boolean;\r\n}\r\n\r\n/**\r\nA ValidationOptions instance is used to specify the conditions under which validation will be executed.\r\n\r\n*/\r\nexport class ValidationOptions implements ValidationOptionsConfig {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n  /** Whether entity and property level validation should occur when entities are attached to the EntityManager \r\n  other than via a query. (default = true) __Read Only__ */\r\n  validateOnAttach: boolean;\r\n  /** Whether entity and property level validation should occur before entities are saved. \r\n  A failed validation will force the save to fail early. (default = true) __Read Only__ */\r\n  validateOnSave: boolean;\r\n  /** Whether entity and property level validation should occur after entities are queried from a remote server.\r\n  (default = false) __Read Only__  **/\r\n  validateOnQuery: boolean;\r\n  /** Whether property level validation should occur after entities are modified.\r\n  (default = true) __Read Only__ **/\r\n  validateOnPropertyChange: boolean;\r\n\r\n\r\n\r\n  /** \r\n  ValidationOptions constructor\r\n  >     var newVo = new ValidationOptions( { validateOnSave: false, validateOnAttach: false });\r\n  >     // assume em1 is a preexisting EntityManager\r\n  >     em1.setProperties( { validationOptions: newVo });\r\n  @param config - A configuration object.\r\n  **/\r\n  constructor(config?: ValidationOptionsConfig) {\r\n    updateWithConfig(this, config);\r\n  }\r\n\r\n\r\n  /**\r\n  Returns a copy of this ValidationOptions with changes to the specified config properties.\r\n  >     var validationOptions = new ValidationOptions();\r\n  >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );\r\n  @param config - A configuration object\r\n  @return A new ValidationOptions instance.\r\n  **/\r\n  using(config: ValidationOptionsConfig) {\r\n    if (!config) return this;\r\n    let result = new ValidationOptions(this);\r\n    updateWithConfig(result, config);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n  Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.\r\n  The current instance is returned unchanged.\r\n  >     var validationOptions = new ValidationOptions()\r\n  >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );\r\n  >     var newOptions.setAsDefault();\r\n  **/\r\n  setAsDefault() {\r\n    return core.setAsDefault(this, ValidationOptions);\r\n  }\r\n\r\n  /**\r\n  The default instance for use whenever ValidationOptions are not specified.\r\n  **/\r\n  static defaultInstance = new ValidationOptions({\r\n    validateOnAttach: true,\r\n    validateOnSave: true,\r\n    validateOnQuery: false,\r\n    validateOnPropertyChange: true\r\n  });\r\n}\r\nValidationOptions.prototype._$typeName = \"ValidationOptions\";\r\n\r\nfunction updateWithConfig(options: ValidationOptions, config: ValidationOptionsConfig) {\r\n  if (config) {\r\n    assertConfig(config)\r\n        .whereParam(\"validateOnAttach\").isBoolean().isOptional()\r\n        .whereParam(\"validateOnSave\").isBoolean().isOptional()\r\n        .whereParam(\"validateOnQuery\").isBoolean().isOptional()\r\n        .whereParam(\"validateOnPropertyChange\").isBoolean().isOptional()\r\n        .applyAll(options);\r\n  }\r\n  return options;\r\n}\r\n","import { core } from './core';\r\nimport { assertConfig } from './assert-param';\r\nimport { DataService } from './data-service';\r\n\r\n/** Configuration info to be passed to the [[SaveOptions]] constructor */\r\nexport interface SaveOptionsConfig {\r\n  /** Resource name to be used during the save - this defaults to \"SaveChanges\" */\r\n  resourceName?: string;\r\n  /** The DataService to be used for this save. */\r\n  dataService?: DataService;\r\n  /** Whether multiple saves can be in-flight at the same time. The default is false. */\r\n  allowConcurrentSaves?: boolean;\r\n  /** Free form value that will be sent to the server during the save. */\r\n  tag?: any;\r\n}\r\n\r\n/**\r\nA SaveOptions instance is used to specify the 'options' under which a save will occur.\r\n**/\r\nexport class SaveOptions {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on proto\r\n  /** Resource name to be used during the save - this defaults to \"SaveChanges\". __Read Only__ */\r\n  resourceName: string;\r\n  /** The DataService to be used for this save. __Read Only__ */\r\n  dataService: DataService;\r\n  /** Whether multiple saves can be in-flight at the same time. The default is false. __Read Only__ */\r\n  allowConcurrentSaves: boolean;\r\n  /** Free form value that will be sent to the server during the save. __Read Only__ */\r\n  tag: any;\r\n\r\n  /** The default value whenever SaveOptions are not specified. */\r\n  static defaultInstance = new SaveOptions({ allowConcurrentSaves: false});\r\n\r\n  constructor(config?: SaveOptionsConfig) {\r\n    SaveOptions._updateWithConfig(this, config);\r\n  }\r\n\r\n\r\n  /**\r\n  Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.\r\n  The current instance is returned unchanged.\r\n  **/\r\n  setAsDefault() {\r\n    return core.setAsDefault(this, SaveOptions);\r\n  }\r\n\r\n  /**\r\n  Returns a copy of this SaveOptions with the specified config options applied.\r\n  >     var saveOptions = em1.saveOptions.using( {resourceName: \"anotherResource\" });\r\n  **/\r\n  using(config: SaveOptionsConfig) {\r\n    return SaveOptions._updateWithConfig(this, config);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  private static _updateWithConfig(obj: SaveOptions, config: SaveOptionsConfig) {\r\n    if (config) {\r\n      assertConfig(config)\r\n          .whereParam(\"resourceName\").isOptional().isString()\r\n          .whereParam(\"dataService\").isOptional().isInstanceOf(DataService)\r\n          .whereParam(\"allowConcurrentSaves\").isBoolean().isOptional()\r\n          .whereParam(\"tag\").isOptional()\r\n          .applyAll(obj);\r\n    }\r\n    return obj;\r\n  }\r\n\r\n}\r\nSaveOptions.prototype._$typeName = \"SaveOptions\";\r\n\r\n\r\n\r\n","import { EntityType, DataProperty } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\nimport { config } from './config';\r\n\r\ninterface IPropEntry {\r\n  entityType: EntityType;\r\n  propertyName: string;\r\n  keyMap: Object;\r\n}\r\n\r\ninterface ITempIdMap {\r\n  [index: string]: IPropEntry;\r\n}\r\n\r\n/*\r\n  @class KeyGenerator\r\n  */\r\nexport class KeyGenerator {\r\n  /** @hidden @internal */\r\n  private _tempIdMap: ITempIdMap;\r\n\r\n\r\n  constructor() {\r\n    // key is dataProperty.name + || + entityType.name, value is propEntry\r\n    // propEntry = { entityType, propertyName, keyMap }\r\n    // keyMap has key of the actual value ( as a string) and a value of null or the real id.\r\n    this._tempIdMap = {};\r\n  }\r\n\r\n\r\n  /*\r\n  Returns a unique 'temporary' id for the specified [[EntityType]].\r\n  Uniqueness is defined for this purpose as being unique within each instance of a KeyGenerator. This is sufficient\r\n  because each EntityManager will have its own instance of a KeyGenerator and any entities imported into\r\n  the EntityManager with temporary keys will have them regenerated and remapped on import.\r\n\r\n  The return value of this method must be of the correct type as determined by the keyProperties of the\r\n  specified EntityType\r\n  @example\r\n      // Assume em1 is a preexisting EntityManager\r\n      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n      let cust1 = custType.createEntity();\r\n      // next line both sets cust1's 'CustomerId' property but also returns the value\r\n      let cid1 = em1.generateTempKeyValue(cust1);\r\n      em1.saveChanges().then( function( data) {\r\n        let sameCust1 = data.results[0];\r\n        // cust1 === sameCust1;\r\n        // but cust1.getProperty(\"CustomerId\") != cid1\r\n        // because the server will have generated a new id\r\n        // and the client will have been updated with this\r\n        // new id.\r\n      });\r\n  @method generateTempKeyValue\r\n  @param entityType {EntityType}\r\n  */\r\n  generateTempKeyValue(entityType: EntityType, valueIfAvail?: boolean) {\r\n    let keyProps = entityType.keyProperties;\r\n    if (keyProps.length > 1) {\r\n      throw new Error(\"Ids can not be autogenerated for entities with multipart keys\");\r\n    }\r\n    let keyProp = keyProps[0];\r\n    let propEntry = this._getPropEntry(keyProp, true);\r\n    let nextId: any;\r\n    if (valueIfAvail != null) {\r\n      if (!propEntry.keyMap[valueIfAvail.toString()]) {\r\n        nextId = valueIfAvail;\r\n      }\r\n    }\r\n\r\n    if (nextId === undefined) {\r\n      let dataType = keyProp.dataType;\r\n      let getNextFn = (dataType as any).getNext;\r\n      if (getNextFn) {\r\n        nextId = getNextFn(this);\r\n        // need to watch out for collision with previously imported ids that might also get generated.\r\n        while (propEntry.keyMap[nextId.toString()] != null) {\r\n          nextId = getNextFn(this);\r\n        }\r\n      } else {\r\n        throw new Error(\"Cannot use a property with a dataType of: \" + dataType.toString() + \" for id generation\");\r\n      }\r\n    }\r\n\r\n    propEntry.keyMap[nextId.toString()] = true;\r\n    return nextId;\r\n  }\r\n\r\n  getTempKeys() {\r\n    let results: EntityKey[] = [];\r\n    //noinspection JSHint\r\n    for (let key in this._tempIdMap) {\r\n      let propEntry = this._tempIdMap[key];\r\n      let entityType = propEntry.entityType;\r\n      // let propName = propEntry.propertyName;\r\n      //noinspection JSHint\r\n      for (let keyValue in propEntry.keyMap) {\r\n        results.push(new EntityKey(entityType, [keyValue]));\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n\r\n  // proto methods below are not part of the KeyGenerator interface.\r\n\r\n  isTempKey(entityKey: EntityKey) {\r\n    let keyProps = entityKey.entityType.keyProperties;\r\n    if (keyProps.length > 1) return false;\r\n    let keyProp = keyProps[0];\r\n    let propEntry = this._getPropEntry(keyProp);\r\n    if (!propEntry) {\r\n      return false;\r\n    }\r\n    return (propEntry.keyMap[entityKey.values[0].toString()] !== undefined);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  private _getPropEntry(keyProp: DataProperty, createIfMissing = false) {\r\n    let key = keyProp.name + \"..\" + keyProp.parentType.name;\r\n    let propEntry = this._tempIdMap[key];\r\n    if (!propEntry) {\r\n      if (createIfMissing) {\r\n        propEntry = { entityType: keyProp.parentType as EntityType, propertyName: keyProp.name, keyMap: {} };\r\n        this._tempIdMap[key] = propEntry;\r\n      }\r\n    }\r\n    return propEntry;\r\n  }\r\n\r\n}\r\n\r\nconfig.registerType(KeyGenerator, \"KeyGenerator\");\r\n\r\n","import { Entity } from './entity-aspect';\r\nimport { EntityType, DataProperty  } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\nimport { EntityState } from './entity-state';\r\nimport { EntityManager } from './entity-manager';\r\nimport { MergeStrategy } from './query-options';\r\n\r\n/** @hidden @internal */\r\nexport class EntityGroup {\r\n  entityManager: EntityManager;\r\n  entityType: EntityType;\r\n  _indexMap: { [index: string]: number };\r\n  _entities: (Entity | null)[];\r\n  _emptyIndexes: number[];\r\n\r\n  constructor(entityManager: EntityManager, entityType: EntityType) {\r\n    this.entityManager = entityManager;\r\n    this.entityType = entityType;\r\n    // freeze the entityType after the first instance of this type is either created or queried.\r\n    this.entityType.isFrozen = true;\r\n    this._indexMap = {};\r\n    this._entities = [];\r\n    this._emptyIndexes = [];\r\n  }\r\n\r\n\r\n  attachEntity(entity: Entity, entityState: EntityState, mergeStrategy?: MergeStrategy) {\r\n    // entity should already have an aspect.\r\n    let aspect = entity.entityAspect;\r\n\r\n    if (!aspect._initialized) {\r\n      this.entityType._initializeInstance(entity);\r\n    }\r\n    delete aspect._initialized;\r\n\r\n    let keyInGroup = aspect.getKey()._keyInGroup;\r\n    let ix = this._indexMap[keyInGroup];\r\n    if (ix >= 0) {\r\n      // safecast because key was found not ix will not return a null\r\n      let targetEntity = this._entities[ix] as Entity;\r\n      let targetEntityState = targetEntity.entityAspect.entityState;\r\n      let wasUnchanged = targetEntityState.isUnchanged();\r\n      if (targetEntity === entity) {\r\n        aspect.entityState = entityState;\r\n      } else if (mergeStrategy === MergeStrategy.Disallowed) {\r\n        throw new Error(\"A MergeStrategy of 'Disallowed' does not allow you to attach an entity when an entity with the same key is already attached: \" + aspect.getKey());\r\n      } else if (mergeStrategy === MergeStrategy.OverwriteChanges || (mergeStrategy === MergeStrategy.PreserveChanges && wasUnchanged)) {\r\n        // unwrapInstance returns an entity with server side property names - so we need to use DataProperty.getRawValueFromServer these when we apply\r\n        // the property values back to the target.\r\n        let rawServerEntity = this.entityManager.helper.unwrapInstance(entity);\r\n        this.entityType._updateTargetFromRaw(targetEntity, rawServerEntity, DataProperty.getRawValueFromServer);\r\n        targetEntity.entityAspect.setEntityState(entityState);\r\n      }\r\n      return targetEntity;\r\n    } else {\r\n      if (this._emptyIndexes.length === 0) {\r\n        ix = this._entities.push(entity) - 1;\r\n      } else {\r\n        ix = this._emptyIndexes.pop();\r\n        this._entities[ix] = entity;\r\n      }\r\n      this._indexMap[keyInGroup] = ix;\r\n      aspect.entityState = entityState;\r\n      aspect.entityGroup = this;\r\n      aspect.entityManager = this.entityManager;\r\n      return entity;\r\n    }\r\n  }\r\n\r\n  detachEntity(entity: Entity) {\r\n    // by this point we have already determined that this entity\r\n    // belongs to this group.\r\n    let aspect = entity.entityAspect;\r\n    let keyInGroup = aspect.getKey()._keyInGroup;\r\n    let ix = this._indexMap[keyInGroup];\r\n    if (ix === undefined) {\r\n      // shouldn't happen.\r\n      throw new Error(\"internal error - entity cannot be found in group\");\r\n    }\r\n    delete this._indexMap[keyInGroup];\r\n    this._emptyIndexes.push(ix);\r\n    this._entities[ix] = null;\r\n    return entity;\r\n  }\r\n\r\n\r\n  // returns entity based on an entity key defined either as an array of key values or an EntityKey\r\n  findEntityByKey(entityKey: EntityKey) {\r\n    let keyInGroup: string;\r\n    if (entityKey instanceof EntityKey) {\r\n      keyInGroup = entityKey._keyInGroup;\r\n    } else {\r\n      keyInGroup = EntityKey.createKeyString(entityKey);\r\n    }\r\n    let ix = this._indexMap[keyInGroup];\r\n    // can't use just (ix) below because 0 is valid\r\n    let r = (ix !== undefined) ? this._entities[ix] : undefined;\r\n    // coerce null to undefined\r\n    return r == null ? undefined : r;\r\n  }\r\n\r\n  hasChanges() {\r\n    let entities = this._entities;\r\n    let unchanged = EntityState.Unchanged;\r\n    for (let i = 0, len = entities.length; i < len; i++) {\r\n      let e = entities[i];\r\n      if (e && e.entityAspect.entityState !== unchanged) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getChanges() {\r\n    let entities = this._entities;\r\n    let unchanged = EntityState.Unchanged;\r\n    let changes: Entity[] = [];\r\n    for (let i = 0, len = entities.length; i < len; i++) {\r\n      let e = entities[i];\r\n      if (e && e.entityAspect.entityState !== unchanged) {\r\n        changes.push(e);\r\n      }\r\n    }\r\n    return changes;\r\n  }\r\n\r\n  getEntities(entityStates: EntityState[]) {\r\n    let filter = getFilter(entityStates);\r\n    return this._entities.filter(filter) as Entity[];\r\n  }\r\n\r\n  _checkOperation(operationName: string) {\r\n    this._entities.forEach(function (entity) {\r\n      entity && entity.entityAspect._checkOperation(operationName);\r\n    });\r\n    // for chaining;\r\n    return this;\r\n  }\r\n\r\n  // do not expose this method. It is doing a special purpose INCOMPLETE fast detach operation\r\n  // just for the entityManager clear method - the entityGroup will be in an inconsistent state\r\n  // after this op, which is ok because it will be thrown away.\r\n  // TODO: rename this to be clear that it is UNSAFE...\r\n  _clear() {\r\n    this._entities.forEach(function (entity) {\r\n      if (entity != null) {\r\n        entity.entityAspect._detach();\r\n      }\r\n    });\r\n    (this as any)._entities = null;\r\n    (this as any)._indexMap = null;\r\n    (this as any)._emptyIndexes = null;\r\n  }\r\n\r\n  _updateFkVal(fkProp: DataProperty, oldValue: any, newValue: any) {\r\n    let fkPropName = fkProp.name;\r\n    this._entities.forEach(function (entity) {\r\n      if (entity != null) {\r\n        if (entity.getProperty(fkPropName) === oldValue) {\r\n          entity.setProperty(fkPropName, newValue);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  _fixupKey(tempValue: any, realValue: any) {\r\n    // single part keys appear directly in map\r\n    let ix = this._indexMap[tempValue];\r\n    if (ix === undefined) {\r\n      throw new Error(\"Internal Error in key fixup - unable to locate entity\");\r\n    }\r\n    let entity = this._entities[ix] as Entity;\r\n    let keyPropName = entity.entityType.keyProperties[0].name;\r\n    // fks on related entities will automatically get updated by this as well\r\n    entity.setProperty(keyPropName, realValue);\r\n    delete entity.entityAspect.hasTempKey;\r\n    delete this._indexMap[tempValue];\r\n    this._indexMap[realValue] = ix;\r\n  }\r\n\r\n  _replaceKey(oldKey: EntityKey, newKey: EntityKey) {\r\n    let ix = this._indexMap[oldKey._keyInGroup];\r\n    delete this._indexMap[oldKey._keyInGroup];\r\n    this._indexMap[newKey._keyInGroup] = ix;\r\n  }\r\n\r\n}\r\n\r\nfunction getFilter(entityStates: EntityState[]) {\r\n  if (entityStates.length === 0) {\r\n    return function (e: Entity) {\r\n      return !!e;\r\n    };\r\n  } else if (entityStates.length === 1) {\r\n    let entityState = entityStates[0];\r\n    return function (e: Entity) {\r\n      return !!e && e.entityAspect.entityState === entityState;\r\n    };\r\n  } else {\r\n    return function (e: Entity) {\r\n      return !!e && -1 !== entityStates.indexOf(e.entityAspect.entityState);\r\n    };\r\n  }\r\n}\r\n\r\n\r\n// do not expose EntityGroup - internal only\r\n\r\n\r\n","import { DataServiceAdapter } from './interface-registry';\r\nimport { core } from './core';\r\nimport { DataType  } from './data-type';\r\nimport { DataService, JsonResultsAdapter, NodeContext, NodeMeta } from './data-service';\r\nimport { EntityState  } from './entity-state';\r\nimport { EntityAction } from './entity-action';\r\nimport { MetadataStore, EntityType, StructuralType, DataProperty, NavigationProperty } from './entity-metadata';\r\nimport { EntityManager } from './entity-manager';\r\nimport { MergeStrategy } from './query-options';\r\nimport { Entity } from './entity-aspect';\r\nimport { EntityQuery } from './entity-query';\r\n\r\n\r\n/**\r\nFor use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden \r\n*/\r\nexport interface MergeOptions {\r\n  mergeStrategy: MergeStrategy;\r\n  includeDeleted?: boolean;\r\n  noTracking?: boolean;\r\n}\r\n\r\n/** @hidden */\r\nexport interface MappingContextConfig {\r\n  dataService: DataService;\r\n  query?: EntityQuery | string;\r\n  entityManager: EntityManager;\r\n  mergeOptions: MergeOptions;\r\n}\r\n\r\n/**\r\nFor use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden \r\n*/\r\nexport class MappingContext {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // on prototype\r\n\r\n  rawValueFn = DataProperty.getRawValueFromServer; // think about passing this in later.\r\n\r\n  dataService: DataService;\r\n  query: EntityQuery | string;\r\n  entityManager: EntityManager;\r\n  mergeOptions: MergeOptions;\r\n  adapter: DataServiceAdapter;  // assigned in the AbstractDataServiceAdapter.\r\n\r\n  refMap: Object; // TODO\r\n  deferredFns: Function[]; // TODO\r\n  jsonResultsAdapter: JsonResultsAdapter;\r\n  metadataStore: MetadataStore;\r\n\r\n  constructor(config: MappingContextConfig) {\r\n\r\n    core.extend(this, config, [\r\n      \"query\", \"entityManager\", \"dataService\", \"mergeOptions\"\r\n    ]);\r\n\r\n    // calc'd props\r\n    this.refMap = {};\r\n    this.deferredFns = [];\r\n    this.jsonResultsAdapter = this.dataService.jsonResultsAdapter;\r\n    this.metadataStore = this.entityManager.metadataStore;\r\n    this.rawValueFn = DataProperty.getRawValueFromServer; // think about passing this in later.\r\n  }\r\n\r\n  getUrl() {\r\n    let query = this.query;\r\n    if (!query) {\r\n      throw new Error(\"query cannot be empty\");\r\n    }\r\n    let uriString: string;\r\n    if (typeof query === 'string') {\r\n      uriString = query;\r\n    } else if (query instanceof EntityQuery) {\r\n      uriString = this.dataService.uriBuilder!.buildUri(query, this.metadataStore);\r\n    } else {\r\n      throw new Error(\"unable to recognize query parameter as either a string or an EntityQuery\");\r\n    }\r\n    return this.dataService.qualifyUrl(uriString);\r\n  }\r\n\r\n  visitAndMerge(nodes: any[], nodeContext: any) {\r\n    let query = this.query;\r\n    let jra = this.jsonResultsAdapter;\r\n    nodeContext = nodeContext || {};\r\n    let that = this;\r\n    return core.map(nodes, function (node) {\r\n      if (query == null && node.entityAspect) {\r\n        // don't bother merging a result from a save that was not returned from the server.\r\n        if (node.entityAspect.entityState.isDeleted()) {\r\n          that.entityManager.detachEntity(node);\r\n        } else {\r\n          node.entityAspect.acceptChanges();\r\n        }\r\n        return node;\r\n      }\r\n\r\n      let meta = jra.visitNode(node, that, nodeContext) || {};\r\n      node = meta.node || node;\r\n      if (query && nodeContext.nodeType === \"root\" && !meta.entityType) {\r\n        meta.entityType = query instanceof EntityQuery &&  query._getToEntityType && query._getToEntityType(that.metadataStore);\r\n      }\r\n      return processMeta(that, node, meta);\r\n    }, this.mergeOptions.includeDeleted);\r\n  }\r\n\r\n  processDeferred() {\r\n    if (this.deferredFns.length > 0) {\r\n      this.deferredFns.forEach((fn) => {\r\n        fn();\r\n      });\r\n    }\r\n  }\r\n}\r\nMappingContext.prototype._$typeName = \"MappingContext\";\r\n\r\n\r\nfunction processMeta(mc: MappingContext, node: any, meta: NodeMeta, assignFn?: (val: any) => void) {\r\n  // == is deliberate here instead of ===\r\n  if (meta.ignore || node == null) {\r\n    return null;\r\n  } else if (meta.nodeRefId) {\r\n    let refValue = resolveEntityRef(mc, meta.nodeRefId);\r\n    if (typeof refValue === \"function\" && assignFn != null) {\r\n      mc.deferredFns.push(function () {\r\n        assignFn(refValue);\r\n      });\r\n      return undefined; // deferred and will be set later;\r\n    }\r\n    return refValue;\r\n  } else if (meta.entityType) {\r\n    let entityType = meta.entityType;\r\n    if (mc.mergeOptions.noTracking) {\r\n      node = processNoMerge(mc, entityType, node);\r\n      if (entityType.noTrackingFn) {\r\n        node = entityType.noTrackingFn(node, entityType);\r\n      }\r\n      if (meta.nodeId) {\r\n        mc.refMap[meta.nodeId] = node;\r\n      }\r\n      return node;\r\n    } else {\r\n      if (entityType.isComplexType) {\r\n        // because we still need to do serverName to client name processing\r\n        return processNoMerge(mc, entityType, node);\r\n      } else {\r\n        return mergeEntity(mc, node, meta);\r\n      }\r\n    }\r\n  } else {\r\n\r\n    if ((!meta.passThru) && typeof node === 'object' && ! core.isDate(node)) {\r\n      node = processAnonType(mc, node);\r\n    }\r\n\r\n    // updating the refMap for entities is handled by updateEntityRef for entities.\r\n    if (meta.nodeId) {\r\n      mc.refMap[meta.nodeId] = node;\r\n    }\r\n    return node;\r\n  }\r\n}\r\n\r\nfunction processNoMerge(mc: MappingContext, stype: StructuralType, node: any) {\r\n  let result = {};\r\n\r\n  stype.dataProperties.forEach(function (dp) {\r\n    if (dp.isComplexProperty) {\r\n      result[dp.name] = core.map(node[dp.nameOnServer], (v: any) => {\r\n        return processNoMerge(mc, dp.dataType as any, v);\r\n      });\r\n    } else {\r\n      result[dp.name] = DataType.parseRawValue(node[dp.nameOnServer], dp.dataType as DataType);\r\n    }\r\n  });\r\n\r\n  (stype instanceof EntityType) && stype.navigationProperties.forEach( (np) => {\r\n    let nodeContext = { nodeType: \"navProp\", navigationProperty: np };\r\n    visitNode(node[np.nameOnServer], mc, nodeContext, result, np.name);\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nfunction processAnonType(mc: MappingContext, node: any) {\r\n  // node is guaranteed to be an object by this point, i.e. not a scalar\r\n  let keyFn = mc.metadataStore.namingConvention.serverPropertyNameToClient;\r\n  let result = {};\r\n\r\n  core.objectForEach(node, function (key, value) {\r\n    let newKey = keyFn(key);\r\n    let nodeContext = { nodeType: \"anonProp\", propertyName: newKey };\r\n    visitNode(value, mc, nodeContext, result, newKey);\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction visitNode(node: any, mc: MappingContext, nodeContext: NodeContext, result: Object, key: string) {\r\n  let jra = mc.jsonResultsAdapter;\r\n  let meta = jra.visitNode(node, mc, nodeContext) || {};\r\n  // allows visitNode to change the value;\r\n  node = meta.node || node;\r\n\r\n  if (meta.ignore) return;\r\n  if (meta.passThru) return node;\r\n  if (Array.isArray(node)) {\r\n    nodeContext.nodeType = nodeContext.nodeType + \"Item\";\r\n    result[key] = node.map(function (v, ix) {\r\n      meta = jra.visitNode(v, mc, nodeContext) || {};\r\n      v = meta.node || v;\r\n      return processMeta(mc, v, meta, function (refValue) {\r\n        result[key][ix] = refValue();\r\n      });\r\n    });\r\n  } else {\r\n    result[key] = processMeta(mc, node, meta, function (refValue) {\r\n      result[key] = refValue();\r\n    });\r\n  }\r\n}\r\n\r\nfunction resolveEntityRef(mc: MappingContext, nodeRefId: string) {\r\n  let entity = mc.refMap[nodeRefId];\r\n  if (entity === undefined) {\r\n    return function () {\r\n      return mc.refMap[nodeRefId];\r\n    };\r\n  } else {\r\n    return entity;\r\n  }\r\n}\r\n\r\nfunction updateEntityRef(mc: MappingContext, targetEntity: any, node: any) {\r\n  let nodeId = node._$meta.nodeId;\r\n  if (!nodeId && node._$meta.extraMetadata) {\r\n    // odata case.  refMap isn't really used, but is returned as data.retrievedEntities, so we populated it anyway.\r\n    nodeId = node._$meta.extraMetadata.uriKey;\r\n  }\r\n  if (nodeId != null) {\r\n    mc.refMap[nodeId] = targetEntity;\r\n  }\r\n}\r\n\r\n// can return null for a deleted entity if includeDeleted == false\r\nfunction mergeEntity(mc: MappingContext, node: any, meta: NodeMeta) {\r\n  node._$meta = meta;\r\n  let em = mc.entityManager;\r\n\r\n  let entityType = meta.entityType as EntityType;\r\n  if (typeof (entityType) === 'string') {\r\n    entityType = mc.metadataStore._getStructuralType(entityType, false) as EntityType;\r\n  }\r\n  node.entityType = entityType;\r\n\r\n  let mergeStrategy = mc.mergeOptions.mergeStrategy;\r\n  let isSaving = mc.query == null;\r\n\r\n  let entityKey = entityType.getEntityKeyFromRawEntity(node, mc.rawValueFn);\r\n  let targetEntity = em.findEntityByKey(entityKey);\r\n  if (targetEntity) {\r\n    if (isSaving && targetEntity.entityAspect.entityState.isDeleted()) {\r\n      em.detachEntity(targetEntity);\r\n      return targetEntity;\r\n    }\r\n    let targetEntityState = targetEntity.entityAspect.entityState;\r\n    if (mergeStrategy === MergeStrategy.Disallowed) {\r\n      throw new Error(\"A MergeStrategy of 'Disallowed' prevents \" + entityKey.toString() + \" from being merged\");\r\n    } else if (mergeStrategy === MergeStrategy.SkipMerge) {\r\n      updateEntityNoMerge(mc, targetEntity, node);\r\n    } else {\r\n      if (mergeStrategy === MergeStrategy.OverwriteChanges\r\n        || targetEntityState.isUnchanged()) {\r\n        updateEntity(mc, targetEntity, node);\r\n        targetEntity.entityAspect.wasLoaded = true;\r\n        if (meta.extraMetadata) {\r\n          targetEntity.entityAspect.extraMetadata = meta.extraMetadata;\r\n        }\r\n        targetEntity.entityAspect.entityState = EntityState.Unchanged;\r\n        clearOriginalValues(targetEntity);\r\n        // propertyName not specified because multiple props EntityChangedEventArgs\r\n        targetEntity.entityAspect.propertyChanged.publish({ entity: targetEntity, propertyName: null });\r\n        let action = isSaving ? EntityAction.MergeOnSave : EntityAction.MergeOnQuery;\r\n        em.entityChanged.publish({ entityAction: action, entity: targetEntity });\r\n        // this is needed to handle an overwrite of a modified entity with an unchanged entity\r\n        // which might in turn cause _hasChanges to change.\r\n        if (!targetEntityState.isUnchanged()) {\r\n          em._notifyStateChange(targetEntity, false);\r\n        }\r\n      } else {\r\n        if (targetEntityState === EntityState.Deleted && !mc.mergeOptions.includeDeleted) {\r\n          return null;\r\n        }\r\n        updateEntityNoMerge(mc, targetEntity, node);\r\n      }\r\n    }\r\n  } else {\r\n    targetEntity = entityType._createInstanceCore() as Entity;\r\n\r\n    updateEntity(mc, targetEntity, node);\r\n\r\n    if (meta.extraMetadata) {\r\n      targetEntity.entityAspect.extraMetadata = meta.extraMetadata;\r\n    }\r\n    // em._attachEntityCore(targetEntity, EntityState.Unchanged, MergeStrategy.Disallowed);\r\n    em._attachEntityCore(targetEntity, EntityState.Unchanged, mergeStrategy);\r\n    targetEntity.entityAspect.wasLoaded = true;\r\n    em.entityChanged.publish({ entityAction: EntityAction.AttachOnQuery, entity: targetEntity });\r\n  }\r\n  return targetEntity;\r\n}\r\n\r\n// copied from entityAspect\r\nfunction clearOriginalValues(target: any) {\r\n  let aspect = target.entityAspect || target.complexAspect;\r\n  aspect.originalValues = {};\r\n  let stype = target.entityType || target.complexType;\r\n  stype.complexProperties.forEach(function (cp: any) {\r\n    let cos = target.getProperty(cp.name);\r\n    if (cp.isScalar) {\r\n      clearOriginalValues(cos);\r\n    } else {\r\n      cos._acceptChanges();\r\n      cos.forEach(clearOriginalValues);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nfunction updateEntityNoMerge(mc: MappingContext, targetEntity: Entity, node: any) {\r\n  updateEntityRef(mc, targetEntity, node);\r\n  // we still need to merge related entities even if top level entity wasn't modified.\r\n  node.entityType.navigationProperties.forEach(function (np: NavigationProperty) {\r\n    if (np.isScalar) {\r\n      mergeRelatedEntityCore(mc, node, np);\r\n    } else {\r\n      mergeRelatedEntitiesCore(mc, node, np);\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateEntity(mc: MappingContext, targetEntity: Entity, node: any) {\r\n  updateEntityRef(mc, targetEntity, node);\r\n  let entityType = targetEntity.entityType;\r\n  entityType._updateTargetFromRaw(targetEntity, node, mc.rawValueFn);\r\n\r\n  entityType.navigationProperties.forEach(function (np) {\r\n    if (np.isScalar) {\r\n      mergeRelatedEntity(mc, np, targetEntity, node);\r\n    } else {\r\n      mergeRelatedEntities(mc, np, targetEntity, node);\r\n    }\r\n  });\r\n}\r\n\r\nfunction mergeRelatedEntity(mc: MappingContext, navigationProperty: NavigationProperty, targetEntity: Entity, rawEntity: any) {\r\n\r\n  let relatedEntity = mergeRelatedEntityCore(mc, rawEntity, navigationProperty);\r\n  if (relatedEntity == null) return;\r\n  if (typeof relatedEntity === 'function') {\r\n    mc.deferredFns.push(function () {\r\n      relatedEntity = relatedEntity();\r\n      updateRelatedEntity(relatedEntity, targetEntity, navigationProperty);\r\n    });\r\n  } else {\r\n    updateRelatedEntity(relatedEntity, targetEntity, navigationProperty);\r\n  }\r\n}\r\n\r\nfunction mergeRelatedEntities(mc: MappingContext, navigationProperty: NavigationProperty, targetEntity: Entity, rawEntity: any) {\r\n  let relatedEntities = mergeRelatedEntitiesCore(mc, rawEntity, navigationProperty);\r\n  if (relatedEntities == null) return;\r\n\r\n  let inverseProperty = navigationProperty.inverse;\r\n  if (!inverseProperty) return;\r\n\r\n  let originalRelatedEntities = targetEntity.getProperty(navigationProperty.name);\r\n  originalRelatedEntities.wasLoaded = true;\r\n\r\n  relatedEntities.forEach(function (relatedEntity: any) {\r\n    if (typeof relatedEntity === 'function') {\r\n      mc.deferredFns.push(function () {\r\n        relatedEntity = relatedEntity();\r\n        updateRelatedEntityInCollection(mc, relatedEntity, originalRelatedEntities, targetEntity, inverseProperty as NavigationProperty);\r\n      });\r\n    } else {\r\n      updateRelatedEntityInCollection(mc, relatedEntity, originalRelatedEntities, targetEntity, inverseProperty as NavigationProperty);\r\n    }\r\n  });\r\n}\r\n\r\nfunction mergeRelatedEntityCore(mc: MappingContext, rawEntity: any, navigationProperty: NavigationProperty) {\r\n  let relatedRawEntity = rawEntity[navigationProperty.nameOnServer];\r\n  if (!relatedRawEntity) return null;\r\n\r\n  let relatedEntity = mc.visitAndMerge(relatedRawEntity, { nodeType: \"navProp\", navigationProperty: navigationProperty });\r\n  return relatedEntity;\r\n}\r\n\r\nfunction mergeRelatedEntitiesCore(mc: MappingContext, rawEntity: any, navigationProperty: NavigationProperty) {\r\n  let relatedRawEntities = rawEntity[navigationProperty.nameOnServer];\r\n  if (!relatedRawEntities) return null;\r\n\r\n  // needed if what is returned is not an array and we expect one - this happens with __deferred in OData.\r\n  if (!Array.isArray(relatedRawEntities)) {\r\n    // return null;\r\n    relatedRawEntities = relatedRawEntities.results; // OData v3 will look like this with an expand\r\n    if (!relatedRawEntities) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  let relatedEntities = mc.visitAndMerge(relatedRawEntities, { nodeType: \"navPropItem\", navigationProperty: navigationProperty });\r\n  return relatedEntities;\r\n}\r\n\r\nfunction updateRelatedEntity(relatedEntity: Entity, targetEntity: Entity, navigationProperty: NavigationProperty) {\r\n  if (!relatedEntity) return;\r\n  let propName = navigationProperty.name;\r\n  let currentRelatedEntity = targetEntity.getProperty(propName);\r\n\r\n  // check if the related entity is already hooked up\r\n  if (currentRelatedEntity !== relatedEntity) {\r\n    // if not hook up both directions.\r\n    targetEntity.setProperty(propName, relatedEntity);\r\n    let inverseProperty = navigationProperty.inverse;\r\n    if (!inverseProperty) return;\r\n    if (inverseProperty.isScalar) {\r\n      relatedEntity.setProperty(inverseProperty.name, targetEntity);\r\n    } else {\r\n      let collection = relatedEntity.getProperty(inverseProperty.name);\r\n      collection.push(targetEntity);\r\n\r\n    }\r\n  }\r\n}\r\n\r\nfunction updateRelatedEntityInCollection(mc: MappingContext, relatedEntity: Entity | undefined,\r\n    relatedEntities: Entity[], targetEntity: Entity, inverseProperty: NavigationProperty) {\r\n  if (!relatedEntity) return;\r\n\r\n  // don't update relatedCollection if preserveChanges & relatedEntity has an fkChange.\r\n  if (relatedEntity.entityAspect.entityState === EntityState.Modified\r\n    && mc.mergeOptions.mergeStrategy === MergeStrategy.PreserveChanges) {\r\n    let origValues = relatedEntity.entityAspect.originalValues;\r\n    let fkWasModified = inverseProperty.relatedDataProperties.some(function (dp) {\r\n      return origValues[dp.name] != undefined;\r\n    });\r\n    if (fkWasModified) return;\r\n  }\r\n  // check if the related entity is already hooked up\r\n  let thisEntity = relatedEntity.getProperty(inverseProperty.name);\r\n\r\n  if (thisEntity !== targetEntity) {\r\n    // if not - hook it up.\r\n    relatedEntities.push(relatedEntity);\r\n    relatedEntity.setProperty(inverseProperty.name, targetEntity);\r\n  }\r\n}\r\n\r\n\r\n","import { core } from './core';\r\nimport { Entity } from './entity-aspect';\r\nimport { NavigationProperty } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\n\r\n/** @hidden @internal */\r\nexport interface INavTuple {\r\n  navigationProperty: NavigationProperty;\r\n  children: Entity[];\r\n}\r\n\r\n/** @hidden @internal */\r\n// Represents entities not yet attached to navigationProperties. \r\nexport class UnattachedChildrenMap {\r\n  // key is EntityKey.toString(), value is array of { navigationProperty, children }\r\n  map: { [index: string]: INavTuple[] } = {};\r\n\r\n\r\n  addChild(parentEntityKey: EntityKey, navigationProperty: NavigationProperty, child: Entity) {\r\n    let tuple = this.getTuple(parentEntityKey, navigationProperty);\r\n    if (!tuple) {\r\n      tuple = { navigationProperty: navigationProperty, children: [] };\r\n      core.getArray(this.map, parentEntityKey.toString()).push(tuple);\r\n    }\r\n    tuple.children.push(child);\r\n  }\r\n\r\n  removeChildren(parentEntityKeyString: string, navigationProperty: NavigationProperty) {\r\n    let tuples = this.map[parentEntityKeyString];\r\n    if (!tuples) return;\r\n    core.arrayRemoveItem(tuples, (t: any) => {\r\n      return t.navigationProperty === navigationProperty;\r\n    });\r\n    if (!tuples.length) {\r\n      delete this.map[parentEntityKeyString];\r\n    }\r\n  }\r\n\r\n  getTuple(parentEntityKey: EntityKey, navigationProperty: NavigationProperty) {\r\n    let tuples = this.getTuples(parentEntityKey);\r\n    if (!tuples) return null;\r\n    let tuple = core.arrayFirst(tuples, function (t) {\r\n      return t.navigationProperty === navigationProperty;\r\n    });\r\n    return tuple;\r\n  }\r\n\r\n  getTuples(parentEntityKey: EntityKey) {\r\n    let allTuples: INavTuple[] = [];\r\n    let tuples = this.map[parentEntityKey.toString()];\r\n    if (tuples) {\r\n      allTuples = allTuples.concat(tuples);\r\n    }\r\n    let entityType = parentEntityKey.entityType;\r\n    while (entityType.baseEntityType) {\r\n      entityType = entityType.baseEntityType;\r\n      let baseKey = parentEntityKey.toString(entityType);\r\n      tuples = this.map[baseKey];\r\n      if (tuples) {\r\n        allTuples = allTuples.concat(tuples);\r\n      }\r\n    }\r\n    return (allTuples.length) ? allTuples : undefined;\r\n  }\r\n\r\n  getTuplesByString(parentEntityKeyString: string) {\r\n    return this.map[parentEntityKeyString];\r\n  }\r\n\r\n}\r\n","import { DataServiceAdapter } from './interface-registry';\r\nimport { core, Callback, ErrorCallback } from './core';\r\nimport { assertParam, assertConfig } from './assert-param';\r\nimport { config } from './config';\r\nimport { BreezeEvent } from './event';\r\nimport { EntityAspect, Entity, ComplexObject, StructuralObject, PropertyChangedEventArgs } from './entity-aspect';\r\nimport { MetadataStore, EntityType, ComplexType, DataProperty, NavigationProperty, AutoGeneratedKeyType } from './entity-metadata';\r\nimport { EntityKey } from './entity-key';\r\nimport { EntityAction  } from './entity-action';\r\nimport { EntityState } from './entity-state';\r\nimport { DataService } from './data-service';\r\nimport { DataType } from './data-type';\r\nimport { ValidationError } from './validate';\r\nimport { ValidationOptions } from './validation-options';\r\nimport { QueryOptions, MergeStrategy, FetchStrategy } from './query-options';\r\nimport { SaveOptions } from './save-options';\r\nimport { KeyGenerator } from './key-generator';\r\nimport { EntityGroup } from './entity-group';\r\nimport { MappingContext } from './mapping-context';\r\nimport { EntityQuery } from './entity-query';\r\nimport { UnattachedChildrenMap } from './unattached-children-map';\r\n\r\nexport interface HttpResponse {\r\n  config: any;\r\n  data: any;\r\n  error?: any;\r\n  saveContext?: any;\r\n  status: number;\r\n  getHeaders(headerName: string): string;\r\n}\r\n\r\nexport interface ImportResult {\r\n  entities: Entity[];\r\n  tempKeyMapping: ITempKeyMap;\r\n}\r\n\r\n// subclasses of Error\r\n\r\n/** Base shape of any errors returned from the server. */\r\nexport interface ServerError extends Error {\r\n  httpResponse: HttpResponse;\r\n  status: number;\r\n  message: string;\r\n  statusText?: string;\r\n  body?: any;\r\n  url?: string;\r\n}\r\n\r\n/** Shape of a save error returned from the server. \r\nFor use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden @internal \r\n*/\r\nexport interface SaveErrorFromServer extends ServerError {\r\n  entityErrors: EntityErrorFromServer[];\r\n}\r\n\r\n/** Shape of a save error when returned to the client. */\r\nexport interface SaveError extends ServerError {\r\n  entityErrors: EntityError[];\r\n}\r\n\r\n// not subclasses of Error\r\n/** \r\nFor use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden @internal \r\n*/\r\nexport interface EntityErrorFromServer {\r\n  entityTypeName: string;\r\n  keyValues: any[];\r\n\r\n  errorName: string;\r\n  errorMessage: string;\r\n  propertyName: string;\r\n}\r\n\r\n/** Shape of an error on a specific entity.  Part of a [[ISaveError]] */\r\nexport interface EntityError {\r\n  entity: Entity;\r\n  errorName: string;\r\n  errorMessage: string;\r\n  propertyName: string;\r\n  isServerError: boolean;\r\n}\r\n\r\n/** The shape of the Promise returned by an [[EntityManager.executeQuery]] call. */\r\nexport interface QueryResult {\r\n  /** Top level entities returned */\r\n  results: any[];\r\n  /** Query that was executed */\r\n  query: EntityQuery | string;\r\n  /** EntityManager that executed the query */\r\n  entityManager?: EntityManager;\r\n  /** Total number of results available on the server */\r\n  inlineCount?: number;\r\n  /** All entities returned by the query.  Differs from results when an expand is used. */\r\n  retrievedEntities?: Entity[];\r\n    /** Raw response from the server */\r\n  httpResponse?: HttpResponse;\r\n}\r\n\r\nexport interface QuerySuccessCallback {\r\n  (data: QueryResult): void;\r\n}\r\n\r\nexport interface QueryErrorCallback {\r\n  (error: { query: EntityQuery; httpResponse: HttpResponse; entityManager: EntityManager; message?: string; stack?: string }): void;\r\n}\r\n\r\n/** Key mapping information returned as part of an [[ISaveResult]]. */\r\nexport interface KeyMapping {\r\n  entityTypeName: string;\r\n  tempValue: any;\r\n  realValue: any;\r\n}\r\n\r\ninterface ITempKeyMap {\r\n  [index: string]: EntityKey;\r\n}\r\n\r\n/** Configuration info to be passed to the [[EntityManager.importEntities]] method */\r\nexport interface ImportConfig {\r\n  /** If true, merge Added entities (with temp keys) as well.  This can be dangerous. */\r\n  mergeAdds?: boolean;\r\n  mergeStrategy?: MergeStrategy;  \r\n  metadataVersionFn?: (arg: { metadataVersion: any, metadataStoreName: any }) => void;\r\n}\r\n\r\ninterface ImportConfigExt extends ImportConfig {\r\n  tempKeyMap?: ITempKeyMap;\r\n}\r\n\r\n/** The shape of the Promise returned by an [[EntityManager.saveChanges]] call. */\r\nexport interface SaveResult {\r\n  entities: Entity[];\r\n  keyMappings: KeyMapping[];\r\n  deletedKeys?: { entityTypeName: string, keyValues: any[]}[];\r\n  httpResponse?: HttpResponse;\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden \r\n*/\r\nexport interface SaveContext {\r\n  entityManager: EntityManager;\r\n  dataService: DataService;\r\n  processSavedEntities: (saveResult: SaveResult) => Entity[];\r\n  resourceName: string;\r\n  adapter?: DataServiceAdapter;\r\n  routePrefix?: string;\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IDataServiceAdapter]] implementation. \r\n@adapter (see [[IDataServiceAdapter]])    \r\n@hidden \r\n*/\r\nexport interface SaveBundle {\r\n  entities: Entity[];\r\n  saveOptions: SaveOptions;\r\n}\r\n\r\n/** Configuration info to be passed to the [[EntityManager]] constructor */\r\nexport interface EntityManagerConfig {\r\n  /** The service name associated with this EntityManager.  **/\r\n  serviceName?: string;\r\n  /** The DataService associated with this EntityManager. **/\r\n  dataService?: DataService;\r\n  /** The [[QueryOptions]] associated with this EntityManager.  **/\r\n  queryOptions?: QueryOptions;\r\n  /** The [[SaveOptions]] associated with this EntityManager. **/\r\n  saveOptions?: SaveOptions;\r\n  /** The [[ValidationOptions]] associated with this EntityManager.  **/\r\n  validationOptions?: ValidationOptions;\r\n  /** The [[KeyGenerator]] associated with this EntityManager. **/\r\n  keyGenerator?: KeyGenerator;\r\n  /** The [[KeyGenerator]] constructor associated with this EntityManager. **/\r\n  keyGeneratorCtor?: { new (): KeyGenerator }; // TODO: review this\r\n  /** The [[MetadataStore]] associated with this EntityManager. **/\r\n  metadataStore?: MetadataStore;\r\n}\r\n\r\n/** The shape returned by callbacks registered with [[EntityManager.entityChanged]] event */\r\nexport interface EntityChangedEventArgs {\r\n  entityAction: EntityAction;\r\n  entity?: Entity;\r\n  args?: PropertyChangedEventArgs;\r\n}\r\n\r\nexport interface ValidationErrorsChangedEventArgs {\r\n  entity: Entity; \r\n  added: ValidationError[]; \r\n  removed: ValidationError[];\r\n}\r\n\r\nexport interface HasChangesChangedEventArgs {\r\n  entityManager: EntityManager; \r\n  hasChanges: boolean;\r\n}\r\n\r\n/**\r\nInstances of the EntityManager contain and manage collections of entities, either retrieved from a backend datastore or created on the client.\r\n**/\r\nexport class EntityManager {\r\n  /** @hidden @internal */\r\n  _$typeName: string; // actually defined on prototype\r\n\r\n  /** The service name associated with this EntityManager. __Read Only__ **/\r\n  serviceName: string;\r\n  /** The DataService associated with this EntityManager. __Read Only__ **/\r\n  dataService: DataService;\r\n  /** The [[QueryOptions]] associated with this EntityManager. __Read Only__ **/\r\n  queryOptions: QueryOptions;\r\n  /** The [[SaveOptions]] associated with this EntityManager. __Read Only__ **/\r\n  saveOptions: SaveOptions;\r\n  /** The [[ValidationOptions]] associated with this EntityManager. __Read Only__ **/\r\n  validationOptions: ValidationOptions;\r\n  /** The [[KeyGenerator]] associated with this EntityManager. __Read Only__ **/\r\n  keyGenerator: KeyGenerator;\r\n  /** The [[KeyGenerator]] constructor associated with this EntityManager. __Read Only__ **/\r\n  keyGeneratorCtor: { new (): KeyGenerator }; // TODO: review this\r\n  /** The [[MetadataStore]] associated with this EntityManager. __Read Only__ **/\r\n  metadataStore: MetadataStore;\r\n  isLoading: boolean;\r\n  isRejectingChanges: boolean;\r\n\r\n  // events\r\n  /**\r\n  A [[BreezeEvent]] that fires whenever a change to any entity in this EntityManager occurs. __Read Only__\r\n\r\n  @eventArgs - \r\n  - entityAction - The [[EntityAction]] that occured.\r\n  - entity - The entity that changed.  If this is null, then all entities in the entityManager were affected.\r\n  - args - Additional information about this event. This will differ based on the entityAction.\r\n\r\n  >      let em = new EntityManager( {serviceName: \"breeze/NorthwindIBModel\" });\r\n  >      em.entityChanged.subscribe(function(changeArgs) {\r\n  >          // This code will be executed any time any entity within the entityManager \r\n  >          // is added, modified, deleted or detached for any reason.\r\n  >          let action = changeArgs.entityAction;\r\n  >          let entity = changeArgs.entity;\r\n  >          // .. do something to this entity when it is changed.\r\n  >      });\r\n  >  });\r\n  @event\r\n  **/\r\n  entityChanged: BreezeEvent<EntityChangedEventArgs>;\r\n\r\n  /**\r\n  An [[BreezeEvent]] that fires whenever validationErrors change for any entity in this EntityManager. __Read Only__\r\n  @eventArgs -\r\n    - entity - The entity on which the validation errors have been added or removed.\r\n    - added - An array containing any newly added [[ValidationError]]s\r\n    - removed - An array containing any newly removed [[ValidationError]]s. This is those errors that have been 'fixed'  \r\n\r\n  >      let em = new EntityManager( {serviceName: \"breeze/NorthwindIBModel\" });\r\n  >      em.validationErrorsChanged.subscribe(function(changeArgs) {\r\n  >              // This code will be executed any time any entity within the entityManager experiences a change to its validationErrors collection.\r\n  >              function (validationChangeArgs) {\r\n  >                  let entity == validationChangeArgs.entity;\r\n  >                  let errorsAdded = validationChangeArgs.added;\r\n  >                  let errorsCleared = validationChangeArgs.removed;\r\n  >                  // ... do something interesting with the order.\r\n  >              });\r\n  >          });\r\n  >      });\r\n  @event\r\n  **/\r\n  validationErrorsChanged: BreezeEvent<ValidationErrorsChangedEventArgs>;\r\n\r\n  /**\r\n  A [[BreezeEvent]] that fires whenever an EntityManager transitions to or from having changes. __Read Only__\r\n  @eventArgs -\r\n    - entityManager - The EntityManager whose 'hasChanges' status has changed.\r\n    - hasChanges - Whether or not this EntityManager has changes.\r\n\r\n  >      let em = new EntityManager( {serviceName: \"breeze/NorthwindIBModel\" });\r\n  >      em.hasChangesChanged.subscribe(function(args) {\r\n  >              let hasChangesChanged = args.hasChanges;\r\n  >              let entityManager = args.entityManager;\r\n  >          });\r\n  >      });\r\n  @event \r\n  **/\r\n  hasChangesChanged: BreezeEvent<HasChangesChangedEventArgs>;\r\n\r\n\r\n  /** @hidden @internal */\r\n  _pendingPubs?: any[]; // TODO: refine later\r\n  /** @hidden @internal */\r\n  _hasChangesAction?: (() => boolean); // TODO refine later\r\n  /** @hidden @internal */\r\n  _hasChanges: boolean;\r\n  /** @hidden @internal */\r\n  _entityGroupMap: { [index: string]: EntityGroup };\r\n  /** @hidden @internal */\r\n  _unattachedChildrenMap: UnattachedChildrenMap;\r\n  /** @hidden @internal */\r\n  _inKeyFixup: boolean;\r\n\r\n  helper = {\r\n    unwrapInstance: unwrapInstance,\r\n    unwrapOriginalValues: unwrapOriginalValues,\r\n    unwrapChangedValues: unwrapChangedValues\r\n  };\r\n\r\n  /**\r\n  EntityManager constructor.\r\n\r\n  At its most basic an EntityManager can be constructed with just a service name\r\n  >     let entityManager = new EntityManager( \"breeze/NorthwindIBModel\");\r\n\r\n  This is the same as calling it with the following configuration object\r\n  >     let entityManager = new EntityManager( {serviceName: \"breeze/NorthwindIBModel\" });\r\n\r\n  Usually however, configuration objects will contain more than just the 'serviceName';\r\n  >     let metadataStore = new MetadataStore();\r\n  >     let entityManager = new EntityManager( {\r\n  >       serviceName: \"breeze/NorthwindIBModel\",\r\n  >       metadataStore: metadataStore\r\n  >     });\r\n\r\n  or\r\n  >     return new QueryOptions({\r\n  >         mergeStrategy: obj,\r\n  >         fetchStrategy: this.fetchStrategy\r\n  >     });\r\n  >     let queryOptions = new QueryOptions({\r\n  >         mergeStrategy: MergeStrategy.OverwriteChanges,\r\n  >         fetchStrategy: FetchStrategy.FromServer\r\n  >     });\r\n  >     let validationOptions = new ValidationOptions({\r\n  >         validateOnAttach: true,\r\n  >         validateOnSave: true,\r\n  >         validateOnQuery: false\r\n  >     });\r\n  >     let entityManager = new EntityManager({\r\n  >         serviceName: \"breeze/NorthwindIBModel\",\r\n  >         queryOptions: queryOptions,\r\n  >         validationOptions: validationOptions\r\n  >     });\r\n  @param emConfig - Configuration settings or a service name.  \r\n  **/\r\n  constructor(emConfig?: EntityManagerConfig | string) {\r\n\r\n    if (arguments.length > 1) {\r\n      throw new Error(\"The EntityManager ctor has a single optional argument that is either a 'serviceName' or a configuration object.\");\r\n    }\r\n    let config: EntityManagerConfig;\r\n    if (arguments.length === 0) {\r\n      config = { serviceName: \"\" };\r\n    } else if (typeof emConfig === 'string') {\r\n      config = { serviceName: emConfig };\r\n    } else {\r\n      config = emConfig || {};\r\n    }\r\n\r\n    EntityManager._updateWithConfig(this, config, true);\r\n\r\n    this.entityChanged = new BreezeEvent(\"entityChanged\", this);\r\n    this.validationErrorsChanged = new BreezeEvent(\"validationErrorsChanged\", this);\r\n    this.hasChangesChanged = new BreezeEvent(\"hasChangesChanged\", this);\r\n\r\n    this.clear();\r\n\r\n  }\r\n\r\n  /**\r\n  General purpose property set method.  Any of the properties in the [[EntityManagerConfig]]\r\n  may be set.\r\n  >      // assume em1 is a previously created EntityManager\r\n  >      // where we want to change some of its settings.\r\n  >      em1.setProperties( {\r\n  >          serviceName: \"breeze/foo\"\r\n  >      });\r\n  @param config - An object containing the selected properties and values to set.\r\n  **/\r\n  setProperties(config: EntityManagerConfig) {\r\n    EntityManager._updateWithConfig(this, config, false);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  static _updateWithConfig(em: EntityManager, config: EntityManagerConfig, isCtor: boolean) {\r\n    let defaultQueryOptions = isCtor ? QueryOptions.defaultInstance : em.queryOptions;\r\n    let defaultSaveOptions = isCtor ? SaveOptions.defaultInstance : em.saveOptions;\r\n    let defaultValidationOptions = isCtor ? ValidationOptions.defaultInstance : em.validationOptions;\r\n\r\n    let configParam = assertConfig(config)\r\n      .whereParam(\"serviceName\").isOptional().isString()\r\n      .whereParam(\"dataService\").isOptional().isInstanceOf(DataService)\r\n      .whereParam(\"queryOptions\").isInstanceOf(QueryOptions).isOptional().withDefault(defaultQueryOptions)\r\n      .whereParam(\"saveOptions\").isInstanceOf(SaveOptions).isOptional().withDefault(defaultSaveOptions)\r\n      .whereParam(\"validationOptions\").isInstanceOf(ValidationOptions).isOptional().withDefault(defaultValidationOptions)\r\n      .whereParam(\"keyGeneratorCtor\").isFunction().isOptional();\r\n    if (isCtor) {\r\n      configParam = configParam\r\n        .whereParam(\"metadataStore\").isInstanceOf(MetadataStore).isOptional().withDefault(new MetadataStore());\r\n    }\r\n    configParam.applyAll(em);\r\n\r\n    // insure that entityManager's options versions are completely populated\r\n    core.updateWithDefaults(em.queryOptions, defaultQueryOptions);\r\n    core.updateWithDefaults(em.saveOptions, defaultSaveOptions);\r\n    core.updateWithDefaults(em.validationOptions, defaultValidationOptions);\r\n\r\n    if (config.serviceName) {\r\n      em.dataService = new DataService({\r\n        serviceName: em.serviceName\r\n      });\r\n    }\r\n    em.serviceName = em.dataService && em.dataService.serviceName;\r\n\r\n    em.keyGeneratorCtor = em.keyGeneratorCtor || KeyGenerator;\r\n    if (isCtor || config.keyGeneratorCtor) {\r\n      em.keyGenerator = new em.keyGeneratorCtor();\r\n    }\r\n  }\r\n\r\n  createEntity(typeName: string, initialValues?: Object, entityState?: EntityState, mergeStrategy?: MergeStrategy): Entity;\r\n  createEntity(entityType: EntityType, initialValues?: Object, entityState?: EntityState, mergeStrategy?: MergeStrategy): Entity;\r\n  /**\r\n  Creates a new entity of a specified type and optionally initializes it. By default the new entity is created with an EntityState of Added\r\n  but you can also optionally specify an EntityState.  An EntityState of 'Detached' will insure that the entity is created but not yet added\r\n  to the EntityManager. \r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      // create and add an entity;\r\n  >      let emp1 = em1.createEntity(\"Employee\");\r\n  >      // create and add an initialized entity;\r\n  >      let emp2 = em1.createEntity(\"Employee\", { lastName: \"Smith\", firstName: \"John\" });\r\n  >      // create and attach (not add) an initialized entity\r\n  >      let emp3 = em1.createEntity(\"Employee\", { id: 435, lastName: \"Smith\", firstName: \"John\" }, EntityState.Unchanged);\r\n  >      // create but don't attach an entity;\r\n  >      let emp4 = em1.createEntity(\"Employee\", { id: 435, lastName: \"Smith\", firstName: \"John\" }, EntityState.Detached);\r\n  @param typeName - The name of the EntityType for which an instance should be created.\r\n  @param entityType - The EntityType of the type for which an instance should be created.\r\n  @param initialValues - (default=null) Configuration object of the properties to set immediately after creation.\r\n  @param entityState - (default = [[EntityState.Added]]) The EntityState of the entity after being created and added to this EntityManager.\r\n  @param mergeStrategy - (default = [[MergeStrategy.Disallowed]]) - How to handle conflicts if an entity with the same key already exists within this EntityManager.\r\n  @return {Entity} A new Entity of the specified type. \r\n  */\r\n  createEntity(entityType: EntityType | string, initialValues: Object, entityState: EntityState, mergeStrategy: MergeStrategy) {\r\n    assertParam(entityType, \"entityType\").isString().or().isInstanceOf(EntityType).check();\r\n    assertParam(entityState, \"entityState\").isEnumOf(EntityState).isOptional().check();\r\n    assertParam(mergeStrategy, \"mergeStrategy\").isEnumOf(MergeStrategy).isOptional().check();\r\n\r\n    let et = (typeof entityType === \"string\") ? this.metadataStore._getStructuralType(entityType) as EntityType : entityType;\r\n    entityState = entityState || EntityState.Added;\r\n    let entity = {} as Entity;\r\n    core.using(this, \"isLoading\", true, function () {\r\n      entity = et.createEntity(initialValues);\r\n    });\r\n    if (entityState !== EntityState.Detached) {\r\n      entity = this.attachEntity(entity, entityState, mergeStrategy);\r\n    }\r\n    return entity;\r\n  }\r\n\r\n  static importEntities(exportedString: string, config?: ImportConfig): EntityManager;\r\n  static importEntities(exportedData: Object, config?: ImportConfig): EntityManager;\r\n  /**\r\n  Creates a new EntityManager and imports a previously exported result into it.\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let bundle = em1.exportEntities();\r\n  >      // can be stored via the web storage api\r\n  >      window.localStorage.setItem(\"myEntityManager\", bundle);\r\n  >      // assume the code below occurs in a different session.\r\n  >      let bundleFromStorage = window.localStorage.getItem(\"myEntityManager\");\r\n  >      // and imported\r\n  >      let em2 = EntityManager.importEntities(bundleFromStorage);\r\n  >      // em2 will now have a complete copy of what was in em1\r\n  @param exportedString - The result of a previous 'exportEntities' call as a string\r\n  @param exportedData - The result of a previous 'exportEntities' call as an Object.\r\n  @param config - A configuration object.\r\n  @param config.mergeStrategy - A  [[MergeStrategy]] to use when \r\n  merging into an existing EntityManager.\r\n  @param config.metadataVersionFn - A function that takes two arguments (the current metadataVersion and the imported store's 'name')\r\n  and may be used to perform version checking.\r\n  @return A new EntityManager.  Note that the return value of this method call is different from that\r\n  provided by the same named method on an EntityManager instance. Use that method if you need additional information\r\n  regarding the imported entities.\r\n  **/\r\n  static importEntities(exported: string | Object, config?: ImportConfig) {\r\n    let em = new EntityManager();\r\n    em.importEntities(exported, config);\r\n    return em;\r\n  }\r\n\r\n  // instance methods\r\n\r\n  /**\r\n  Calls [[EntityAspect.acceptChanges]] on every changed entity in this EntityManager.\r\n  **/\r\n  acceptChanges() {\r\n    this.getChanges().map(function (entity) {\r\n      return entity.entityAspect._checkOperation(\"acceptChanges\");\r\n    }).forEach(function (aspect) {\r\n      aspect.acceptChanges();\r\n    });\r\n  }\r\n\r\n  /**\r\n  Exports selected entities, all entities of selected types, or an entire EntityManager cache.\r\n\r\n  This method takes a snapshot of an EntityManager that can be stored offline or held in memory.\r\n  Use the [[EntityManager.importEntities]] method to restore or merge the snapshot\r\n  into another EntityManager at some later time.\r\n  >      // let em1 be an EntityManager containing a number of existing entities.\r\n  >     // export every entity in em1.\r\n  >     let bundle = em1.exportEntities();\r\n  >     // save to the browser's local storage\r\n  >     window.localStorage.setItem(\"myEntityManager\", bundle);\r\n  >     // later retrieve the export\r\n  >     let bundleFromStorage = window.localStorage.getItem(\"myEntityManager\");\r\n  >     // import the retrieved export bundle into another manager\r\n  >     let em2 = em1.createEmptyCopy();\r\n  >     em2.importEntities(bundleFromStorage);\r\n  >     // em2 now has a complete, faithful copy of the entities that were in em1\r\n\r\n  You can also control exactly which entities are exported.\r\n  >     // get em1's unsaved changes (an array) and export them.\r\n  >     let changes = em1.getChanges();\r\n  >     let bundle = em1.exportEntities(changes);\r\n  >     // merge these entities into em2 which may contains some of the same entities.\r\n  >     // do NOT overwrite the entities in em2 if they themselves have unsaved changes.\r\n  >     em2.importEntities(bundle, { mergeStrategy: MergeStrategy.PreserveChanges} );\r\n\r\n  Metadata are included in an export by default. You may want to exclude the metadata\r\n  especially if you're exporting just a few entities for local storage.\r\n  >     let bundle = em1.exportEntities(arrayOfSelectedEntities, {includeMetadata: false});\r\n  >     window.localStorage.setItem(\"goodStuff\", bundle);\r\n\r\n  You may still express this option as a boolean value although this older syntax is deprecated.\r\n  >     // Exclude the metadata (deprecated syntax)\r\n  >     let bundle = em1.exportEntities(arrayOfSelectedEntities, false);\r\n\r\n  You can export all entities of one or more specified EntityTypes.\r\n  >     // Export all Customer and Employee entities (and also exclude metadata)\r\n  >     let bundle = em1.exportEntities(['Customer', 'Employee'], {includeMetadata: false});\r\n\r\n  All of the above examples return an export bundle as a string which is the default format.\r\n  You can export the bundle as JSON if you prefer by setting the `asString` option to false.\r\n  >     // Export all Customer and Employee entities as JSON and exclude the metadata\r\n  >     let bundle = em1.exportEntities(['Customer', 'Employee'],\r\n  >                                     {asString: false, includeMetadata: false});\r\n  >     // store JSON bundle somewhere ... perhaps indexDb ... and later import as we do here.\r\n  >     em2.importEntities(bundle);\r\n  @param entities - The entities to export or the EntityType(s) of the entities to export;\r\n    all entities are exported if this parameter is omitted or null.\r\n  @param exportConfig - Export configuration options or a boolean\r\n    - asString - (boolean) - If true (default), return export bundle as a string.\r\n    - includeMetadata - (boolean) - If true (default), include metadata in the export bundle.\r\n  @return The export bundle either serialized as a string (default) or as a JSON object.\r\n  The bundle contains the metadata (unless excluded) and the entity data grouped by type.\r\n  The entity data include property values, change-state, and temporary key mappings (if any).\r\n\r\n  The export bundle internals are deliberately undocumented.  This Breeze-internal representation of entity data is\r\n  suitable for export, storage, and import. The schema and contents of the bundle may change in future versions of Breeze.\r\n  Manipulate it at your own risk with appropriate caution.\r\n  **/\r\n  exportEntities(entities?: Entity[] | EntityType[] | string[], exportConfig?: { asString?: boolean, includeMetadata?: boolean } | boolean): string | Object {\r\n    assertParam(entities, \"entities\").isArray().isEntity()\r\n      .or().isNonEmptyArray().isInstanceOf(EntityType)\r\n      .or().isNonEmptyArray().isString()\r\n      .or().isOptional().check();\r\n\r\n    // assertParam(exportConfig, \"exportConfig\").isObject()\r\n    //   .or().isBoolean()\r\n    //   .or().isOptional().check();\r\n\r\n    if (exportConfig == null) {\r\n      exportConfig = { includeMetadata: true, asString: true };\r\n    } else if (typeof exportConfig === 'boolean') { // deprecated\r\n      exportConfig = { includeMetadata: exportConfig, asString: true };\r\n    }\r\n\r\n    assertConfig(exportConfig)\r\n      .whereParam(\"asString\").isBoolean().isOptional().withDefault(true)\r\n      .whereParam(\"includeMetadata\").isBoolean().isOptional().withDefault(true)\r\n      .applyAll(exportConfig);\r\n\r\n    let exportBundle = exportEntityGroups(this, entities);\r\n    let json = core.extend({}, exportBundle, [\"tempKeys\", \"entityGroupMap\"]);\r\n\r\n    if (exportConfig.includeMetadata) {\r\n      json = core.extend(json, this, [\"dataService\", \"saveOptions\", \"queryOptions\", \"validationOptions\"]);\r\n      (json as any).metadataStore = this.metadataStore.exportMetadata();\r\n    } else {\r\n      (json as any).metadataVersion = MetadataStore.metadataVersion;\r\n      (json as any).metadataStoreName = this.metadataStore.name;\r\n    }\r\n\r\n    let result = exportConfig.asString ? JSON.stringify(json, null, config.stringifyPad) : json;\r\n    return result;\r\n  }\r\n\r\n  // TODO: type the return value { entities: entitiesToLink, tempKeyMapping: tempKeyMap }\r\n  importEntities(exportedString: string, config?: ImportConfig): ImportResult;\r\n  importEntities(exportedData: Object, config?: ImportConfig): ImportResult;\r\n  /**\r\n  Imports a previously exported result into this EntityManager.\r\n\r\n  This method can be used to make a complete copy of any previously created entityManager, even if created\r\n  in a previous session and stored in localStorage. The static version of this method performs a\r\n  very similar process.\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     let bundle = em1.exportEntities();\r\n  >     // bundle can be stored in window.localStorage or just held in memory.\r\n  >     let em2 = new EntityManager({\r\n  >         serviceName: em1.serviceName,\r\n  >         metadataStore: em1.metadataStore\r\n  >     });\r\n  >     em2.importEntities(bundle);\r\n  >     // em2 will now have a complete copy of what was in em1\r\n\r\n  It can also be used to merge the contents of a previously created EntityManager with an\r\n  existing EntityManager with control over how the two are merged.\r\n  >     let bundle = em1.exportEntities();\r\n  >     // assume em2 is another entityManager containing some of the same entities possibly with modifications.\r\n  >     em2.importEntities(bundle, { mergeStrategy: MergeStrategy.PreserveChanges} );\r\n  >     // em2 will now contain all of the entities from both em1 and em2.  Any em2 entities with previously\r\n  >     // made modifications will not have been touched, but all other entities from em1 will have been imported.\r\n  @param exportedString - The result of a previous 'export' call.\r\n  @param importConfig - A configuration object.\r\n  @param importConfig.mergeStrategy -  A [[MergeStrategy]] to use when\r\n  merging into an existing EntityManager.\r\n  @param importConfig.metadataVersionFn - A function that takes two arguments (the current metadataVersion and the imported store's 'name')\r\n  and may be used to perform version checking.\r\n  @return result \r\n    - result.entities {Array of Entities} The entities that were imported.\r\n    - result.tempKeyMap {Object} Mapping from original EntityKey in the import bundle to its corresponding EntityKey in this EntityManager.\r\n  **/\r\n  importEntities(exported: string | Object, importConfig?: ImportConfig) {\r\n    importConfig = importConfig || {};\r\n    assertConfig(importConfig)\r\n      .whereParam(\"mergeStrategy\").isEnumOf(MergeStrategy).isOptional().withDefault(this.queryOptions.mergeStrategy)\r\n      .whereParam(\"metadataVersionFn\").isFunction().isOptional()\r\n      .whereParam(\"mergeAdds\").isBoolean().isOptional()\r\n      .applyAll(importConfig);\r\n\r\n    let json = (typeof exported === \"string\") ? JSON.parse(exported) : exported;\r\n    if (json.metadataStore) {\r\n      this.metadataStore.importMetadata(json.metadataStore);\r\n      // the || clause is for backwards compat with an earlier serialization format.\r\n      this.dataService = (json.dataService && DataService.fromJSON(json.dataService)) || new DataService({ serviceName: json.serviceName });\r\n\r\n      this.saveOptions = new SaveOptions(json.saveOptions);\r\n      this.queryOptions = QueryOptions.fromJSON(json.queryOptions);\r\n      this.validationOptions = new ValidationOptions(json.validationOptions);\r\n    } else {\r\n      importConfig.metadataVersionFn && importConfig.metadataVersionFn({\r\n        metadataVersion: json.metadataVersion,\r\n        metadataStoreName: json.metadataStoreName\r\n      });\r\n    }\r\n\r\n    let tempKeyMap: ITempKeyMap = {};\r\n    json.tempKeys.forEach((k: any) => {\r\n      let oldKey = EntityKey.fromJSON(k, this.metadataStore);\r\n      // try to use oldKey if not already used in this keyGenerator.\r\n      tempKeyMap[oldKey.toString()] = new EntityKey(oldKey.entityType, this.keyGenerator.generateTempKeyValue(oldKey.entityType, oldKey.values[0]));\r\n    });\r\n\r\n    let entitiesToLink: Entity[] = [];\r\n    let impConfig = importConfig as ImportConfigExt;\r\n\r\n    impConfig.tempKeyMap = tempKeyMap;\r\n    core.wrapExecution(() => {\r\n      this._pendingPubs = [];\r\n    }, (state) => {\r\n      this._pendingPubs!.forEach((fn) => fn());\r\n      this._pendingPubs = undefined;\r\n      this._hasChangesAction && this._hasChangesAction();\r\n    }, () => {\r\n      core.objectForEach(json.entityGroupMap, (entityTypeName, jsonGroup) => {\r\n        let entityType = this.metadataStore._getStructuralType(entityTypeName, false) as EntityType;\r\n        let targetEntityGroup = findOrCreateEntityGroup(this, entityType);\r\n        let entities = importEntityGroup(targetEntityGroup, jsonGroup, impConfig);\r\n        if (entities && entities.length) {\r\n          entitiesToLink = entitiesToLink.concat(entities);\r\n        }\r\n      });\r\n      entitiesToLink.forEach((entity) => {\r\n        if (!entity.entityAspect.entityState.isDeleted()) {\r\n          this._linkRelatedEntities(entity);\r\n        }\r\n      });\r\n    });\r\n    return {\r\n      entities: entitiesToLink,\r\n      tempKeyMapping: tempKeyMap\r\n    };\r\n  }\r\n\r\n  /**\r\n  Clears this EntityManager's cache but keeps all other settings. Note that this\r\n  method is not as fast as creating a new EntityManager via 'new EntityManager'.\r\n  This is because clear actually detaches all of the entities from the EntityManager.\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     em1.clear();\r\n  >     // em1 is will now contain no entities, but all other setting will be maintained.\r\n  **/\r\n  clear() {\r\n    core.objectMap(this._entityGroupMap, function (key: string, entityGroup: EntityGroup) {\r\n      return entityGroup._checkOperation('clear');\r\n    }).forEach((entityGroup: EntityGroup) => {\r\n      entityGroup._clear();\r\n    });\r\n\r\n    this._entityGroupMap = {};\r\n    this._unattachedChildrenMap = new UnattachedChildrenMap();\r\n    this.keyGenerator = new this.keyGeneratorCtor();\r\n    this.entityChanged.publish({ entityAction: EntityAction.Clear });\r\n    this._setHasChanges(false);\r\n  }\r\n\r\n  /**\r\n  Creates an empty copy of this EntityManager but with the same DataService, MetadataStore, QueryOptions, SaveOptions, ValidationOptions, etc. \r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     let em2 = em1.createEmptyCopy();\r\n  >     // em2 is a new EntityManager with all of em1's settings\r\n  >     // but no entities.\r\n  @return A new EntityManager.\r\n  **/\r\n  createEmptyCopy() {\r\n    let copy = new EntityManager(core.extend({}, this,\r\n      [\"dataService\", \"metadataStore\", \"queryOptions\", \"saveOptions\", \"validationOptions\", \"keyGeneratorCtor\"]));\r\n    return copy;\r\n  }\r\n\r\n  /**\r\n  Attaches an entity to this EntityManager with an  [[EntityState]] of 'Added'.\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >     let cust1 = custType.createEntity();\r\n  >     em1.addEntity(cust1);\r\n\r\n  Note that this is the same as using 'attachEntity' with an [[EntityState]] of 'Added'.\r\n\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >     let cust1 = custType.createEntity();\r\n  >     em1.attachEntity(cust1, EntityState.Added);\r\n  @param entity - The entity to add.\r\n  @return The added entity.\r\n  **/\r\n  addEntity(entity: Entity) {\r\n    return this.attachEntity(entity, EntityState.Added);\r\n  }\r\n\r\n  /**\r\n  Attaches an entity to this EntityManager with a specified [[EntityState]].\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >     let cust1 = custType.createEntity();\r\n  >     em1.attachEntity(cust1, EntityState.Added);\r\n  @param entity - The entity to add.\r\n  @param entityState - (default=EntityState.Unchanged) The EntityState of the newly attached entity. If omitted this defaults to EntityState.Unchanged.\r\n  @param mergeStrategy - (default = MergeStrategy.Disallowed) How the specified entity should be merged into the EntityManager if this EntityManager already contains an entity with the same key.\r\n  @return The attached entity.\r\n  **/\r\n  attachEntity(entity: Entity, entityState?: EntityState, mergeStrategy?: MergeStrategy) {\r\n    assertParam(entity, \"entity\").isRequired().check();\r\n    this.metadataStore._checkEntityType(entity);\r\n    let esSymbol = assertParam(entityState, \"entityState\").isEnumOf(EntityState).isOptional().check(EntityState.Unchanged) as EntityState;\r\n    let msSymbol = assertParam(mergeStrategy, \"mergeStrategy\").isEnumOf(MergeStrategy).isOptional().check(MergeStrategy.Disallowed) as MergeStrategy;\r\n\r\n    if (entity.entityType.metadataStore !== this.metadataStore) {\r\n      throw new Error(\"Cannot attach this entity because the EntityType (\" + entity.entityType.name +\r\n        \") and MetadataStore associated with this entity does not match this EntityManager's MetadataStore.\");\r\n    }\r\n    let aspect = entity.entityAspect;\r\n    if (aspect) {\r\n      // to avoid reattaching an entity in progress\r\n      if (aspect._inProcessEntity) return aspect._inProcessEntity;\r\n    } else {\r\n      // this occur's when attaching an entity created via new instead of via createEntity.\r\n      aspect = new EntityAspect(entity);\r\n    }\r\n    let manager = aspect.entityManager;\r\n    if (manager) {\r\n      if (manager === this) {\r\n        return entity;\r\n      } else {\r\n        throw new Error(\"This entity already belongs to another EntityManager\");\r\n      }\r\n    }\r\n\r\n    let attachedEntity = {} as Entity;\r\n    core.using(this, \"isLoading\", true, () => {\r\n      if (esSymbol.isAdded()) {\r\n        checkEntityKey(this, entity);\r\n      }\r\n      // attachedEntity === entity EXCEPT in the case of a merge.\r\n      attachedEntity = this._attachEntityCore(entity, esSymbol, msSymbol);\r\n      aspect._inProcessEntity = attachedEntity;\r\n      try {\r\n        // entity ( not attachedEntity) is deliberate here.\r\n        attachRelatedEntities(this, entity, esSymbol, msSymbol);\r\n      } finally {\r\n        // insure that _inProcessEntity is cleared.\r\n        aspect._inProcessEntity = undefined;\r\n      }\r\n    });\r\n    if (this.validationOptions.validateOnAttach) {\r\n      attachedEntity.entityAspect.validateEntity();\r\n    }\r\n    if (!esSymbol.isUnchanged()) {\r\n      this._notifyStateChange(attachedEntity, true);\r\n    }\r\n    this.entityChanged.publish({ entityAction: EntityAction.Attach, entity: attachedEntity });\r\n\r\n    return attachedEntity;\r\n  }\r\n\r\n\r\n  /**\r\n  Detaches an entity from this EntityManager.\r\n  >     // assume em1 is an EntityManager containing a number of existing entities.\r\n  >     // assume cust1 is a customer Entity previously attached to em1\r\n  >     em1.detachEntity(cust1);\r\n  >     // em1 will now no longer contain cust1 and cust1 will have an\r\n  >     // entityAspect.entityState of EntityState.Detached\r\n  @param entity - The entity to detach.\r\n  @return Whether the entity could be detached. This will return false if the entity is already detached or was never attached.\r\n  **/\r\n  detachEntity(entity: Entity) {\r\n    assertParam(entity, \"entity\").isEntity().check();\r\n    let aspect = entity.entityAspect;\r\n    if (!aspect) {\r\n      // no aspect means in couldn't appear in any group\r\n      return false;\r\n    }\r\n\r\n    if (aspect.entityManager !== this) {\r\n      throw new Error(\"This entity does not belong to this EntityManager.\");\r\n    }\r\n    return aspect.setDetached();\r\n  }\r\n\r\n  /**\r\n  Fetches the metadata associated with the EntityManager's current 'serviceName'.  This call\r\n  occurs internally before the first query to any service if the metadata hasn't already been\r\n  loaded. __Async__\r\n\r\n  Usually you will not actually process the results of a fetchMetadata call directly, but will instead\r\n  ask for the metadata from the EntityManager after the fetchMetadata call returns.\r\n  >     let em1 = new EntityManager( \"breeze/NorthwindIBModel\");\r\n  >     em1.fetchMetadata()\r\n  >       .then(function() {\r\n  >           let metadataStore = em1.metadataStore;\r\n  >           // do something with the metadata\r\n  >       }).catch(function(exception) {\r\n  >           // handle exception here\r\n  >       });\r\n  \r\n  @param callback - Function called on success.\r\n  @param errorCallback - Function called on failure.\r\n  @return {Promise}\r\n    - schema {Object} The raw Schema object from metadata provider - Because this schema will differ depending on the metadata provider\r\n        it is usually better to access metadata via the 'metadataStore' property of the EntityManager instead of using this 'raw' data.\r\n  **/\r\n  fetchMetadata(dataService?: DataService, callback?: Callback, errorCallback?: ErrorCallback) {\r\n    if (typeof (dataService) === \"function\") {\r\n      // legacy support for when dataService was not an arg. i.e. first arg was callback\r\n      errorCallback = callback;\r\n      callback = dataService;\r\n      dataService = undefined;\r\n    } else {\r\n      assertParam(dataService, \"dataService\").isInstanceOf(DataService).isOptional().check();\r\n      assertParam(callback, \"callback\").isFunction().isOptional().check();\r\n      assertParam(errorCallback, \"errorCallback\").isFunction().isOptional().check();\r\n    }\r\n\r\n    let promise = this.metadataStore.fetchMetadata(dataService || this.dataService);\r\n    return promiseWithCallbacks(promise, callback, errorCallback);\r\n  }\r\n\r\n\r\n  executeQuery(query: string, callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback): Promise<QueryResult>;\r\n  executeQuery(query: EntityQuery, callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback): Promise<QueryResult>;\r\n  /**\r\n  Executes the specified query. __Async__ \r\n  \r\n  >     let em = new EntityManager(serviceName);\r\n  >     let query = new EntityQuery(\"Orders\");\r\n  >     em.executeQuery(query).then( function(data) {\r\n  >         let orders = data.results;\r\n  >         ... query results processed here\r\n  >     }).catch( function(err) {\r\n  >         ... query failure processed here\r\n  >     });\r\n\r\n  or with callbacks\r\n  >     let em = new EntityManager(serviceName);\r\n  >     let query = new EntityQuery(\"Orders\");\r\n  >     em.executeQuery(query,\r\n  >         function(data) {\r\n  >             let orders = data.results;\r\n  >             ... query results processed here\r\n  >         },\r\n  >         function(err) {\r\n  >             ... query failure processed here\r\n  >         });\r\n\r\n  Either way this method is the same as calling the The [[EntityQuery]] 'execute' method.\r\n  >     let em = new EntityManager(serviceName);\r\n  >     let query = new EntityQuery(\"Orders\").using(em);\r\n  >     query.execute().then( function(data) {\r\n  >         let orders = data.results;\r\n  >         ... query results processed here\r\n  >     }).catch( function(err) {\r\n  >         ... query failure processed here\r\n  >     });\r\n  @param query - The [[EntityQuery]] or OData query string to execute.\r\n  @param callback - Function called on success.\r\n  @param errorCallback - {Function} Function called on failure.\r\n  @return Promise of \r\n    - results - An array of entities\r\n    - retrievedEntities - A array of all of the entities returned by the query.  Differs from results (above) when .expand() is used.\r\n    - query - The original [[EntityQuery]] or query string\r\n    - entityManager -  The EntityManager.\r\n    - httpResponse - The [[IHttpResponse]] returned from the server.\r\n    - inlineCount -  Only available if 'inlineCount(true)' was applied to the query.  Returns the count of\r\n    items that would have been returned by the query before applying any skip or take operators, but after any filter/where predicates\r\n    would have been applied.\r\n  **/\r\n  executeQuery(query: EntityQuery | string, callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback) {\r\n    assertParam(query, \"query\").isInstanceOf(EntityQuery).or().isString().check();\r\n    assertParam(callback, \"callback\").isFunction().isOptional().check();\r\n    assertParam(errorCallback, \"errorCallback\").isFunction().isOptional().check();\r\n    let promise: Promise<any>;\r\n    // 'resolve' methods create a new typed object with all of its properties fully resolved against a list of sources.\r\n    // Thought about creating a 'normalized' query with these 'resolved' objects\r\n    // but decided not to because the 'query' may not be an EntityQuery (it can be a string) and hence might not have a queryOptions or dataServices property on it.\r\n    let queryOptions = QueryOptions.resolve([(query as any).queryOptions, this.queryOptions, QueryOptions.defaultInstance]);\r\n    let dataService = DataService.resolve([(query as any).dataService!, this.dataService]);\r\n\r\n    if ((!dataService.hasServerMetadata) || this.metadataStore.hasMetadataFor(dataService.serviceName)) {\r\n      promise = executeQueryCore(this, query, queryOptions, dataService);\r\n    } else {\r\n      promise = this.fetchMetadata(dataService).then(() => {\r\n        return executeQueryCore(this, query, queryOptions, dataService);\r\n      });\r\n    }\r\n\r\n    return promiseWithCallbacks(promise, callback, errorCallback as ErrorCallback);\r\n  }\r\n\r\n  /**\r\n  Executes the specified query against this EntityManager's local cache.\r\n\r\n  Because this method is executed immediately there is no need for a promise or a callback\r\n  >     let em = new EntityManager(serviceName);\r\n  >     let query = new EntityQuery(\"Orders\");\r\n  >     let orders = em.executeQueryLocally(query);\r\n\r\n  Note that this can also be accomplished using the 'executeQuery' method with\r\n  a FetchStrategy of FromLocalCache and making use of the Promise or callback\r\n  >     let em = new EntityManager(serviceName);\r\n  >     let query = new EntityQuery(\"Orders\").using(FetchStrategy.FromLocalCache);\r\n  >     em.executeQuery(query).then( function(data) {\r\n  >         let orders = data.results;\r\n  >         ... query results processed here\r\n  >     }).catch( function(err) {\r\n  >         ... query failure processed here\r\n  >     });\r\n  @param query - The [[EntityQuery]] to execute.\r\n  @return  {Array of Entity}  Array of entities from cache that satisfy the query\r\n  **/\r\n  executeQueryLocally(query: EntityQuery) {\r\n    return executeQueryLocallyCore(this, query).results;\r\n  }\r\n\r\n  /**\r\n  Saves either a list of specified entities or all changed entities within this EntityManager. If there are no changes to any of the entities\r\n  specified then there will be no server side call made but a valid 'empty' saveResult will still be returned. __Async__\r\n\r\n  Often we will be saving all of the entities within an EntityManager that are either added, modified or deleted\r\n  and we will let the 'saveChanges' call determine which entities these are.\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      // This could include added, modified and deleted entities.\r\n  >      em.saveChanges().then(function(saveResult) {\r\n  >          let savedEntities = saveResult.entities;\r\n  >          let keyMappings = saveResult.keyMappings;\r\n  >      }).catch(function (e) {\r\n  >          // e is any exception that was thrown.\r\n  >      });\r\n\r\n  But we can also control exactly which entities to save and can specify specific SaveOptions\r\n\r\n  >      // assume entitiesToSave is an array of entities to save.\r\n  >      let saveOptions = new SaveOptions({ allowConcurrentSaves: true });\r\n  >      em.saveChanges(entitiesToSave, saveOptions).then(function(saveResult) {\r\n  >          let savedEntities = saveResult.entities;\r\n  >          let keyMappings = saveResult.keyMappings;\r\n  >      }).catch(function (e) {\r\n  >          // e is any exception that was thrown.\r\n  >      });\r\n\r\n  Callback methods can also be used\r\n  >      em.saveChanges(entitiesToSave, null,\r\n  >          function(saveResult) {\r\n  >              let savedEntities = saveResult.entities;\r\n  >              let keyMappings = saveResult.keyMappings;\r\n  >          }, function (e) {\r\n  >              // e is any exception that was thrown.\r\n  >          }\r\n  >      );\r\n\r\n  @param entities - The list of entities to save.\r\n  Every entity in that list will be sent to the server, whether changed or unchanged,\r\n  as long as it is attached to this EntityManager.\r\n  If this parameter is omitted, null or empty (the usual case),\r\n  every entity with pending changes in this EntityManager will be saved.\r\n  @param saveOptions - [[SaveOptions]] for the save - will default to\r\n  [[EntityManager.saveOptions]] if null.\r\n  @param callback -  Function called on success.\r\n  @param errorCallback - Function called on failure.\r\n  @return {Promise} Promise\r\n  **/\r\n  saveChanges(entities?: Entity[] | null, saveOptions?: SaveOptions, callback?: Function, errorCallback?: Function) {\r\n    assertParam(entities, \"entities\").isOptional().isArray().isEntity().check();\r\n    assertParam(saveOptions, \"saveOptions\").isInstanceOf(SaveOptions).isOptional().check();\r\n    assertParam(callback, \"callback\").isFunction().isOptional().check();\r\n    assertParam(errorCallback, \"errorCallback\").isFunction().isOptional().check();\r\n\r\n    saveOptions = saveOptions || this.saveOptions || SaveOptions.defaultInstance;\r\n\r\n    let entitiesToSave = getEntitiesToSave(this, entities ? entities : undefined);\r\n\r\n    if (entitiesToSave.length === 0) {\r\n      let result = { entities: [], keyMappings: [] } as SaveResult;\r\n      if (callback) callback(result);\r\n      return Promise.resolve(result);\r\n    }\r\n\r\n    if (!saveOptions.allowConcurrentSaves) {\r\n      let anyPendingSaves = entitiesToSave.some(function (entity) {\r\n        return entity.entityAspect.isBeingSaved;\r\n      });\r\n      if (anyPendingSaves) {\r\n        let err = new Error(\"Concurrent saves not allowed - SaveOptions.allowConcurrentSaves is false\");\r\n        if (errorCallback) errorCallback(err);\r\n        return Promise.reject(err);\r\n      }\r\n    }\r\n\r\n    clearServerErrors(entitiesToSave);\r\n\r\n    let valError = this.saveChangesValidateOnClient(entitiesToSave);\r\n    if (valError) {\r\n      if (errorCallback) errorCallback(valError);\r\n      return Promise.reject(valError);\r\n    }\r\n\r\n    let dataService = DataService.resolve([saveOptions.dataService, this.dataService]);\r\n    let saveContext: SaveContext = {\r\n      entityManager: this,\r\n      dataService: dataService,\r\n      processSavedEntities: processSavedEntities,\r\n      resourceName: saveOptions.resourceName || this.saveOptions.resourceName || \"SaveChanges\"\r\n    };\r\n\r\n    // TODO: need to check that if we are doing a partial save that all entities whose temp keys\r\n    // are referenced are also in the partial save group\r\n\r\n    let saveBundle = { entities: entitiesToSave, saveOptions: saveOptions };\r\n\r\n\r\n    try { // Guard against exception thrown in dataservice adapter before it goes async\r\n      updateConcurrencyProperties(entitiesToSave);\r\n      return dataService.adapterInstance!.saveChanges(saveContext, saveBundle)\r\n        .then(saveSuccess).then((r) => r, saveFail);\r\n    } catch (err) {\r\n      // undo the marking by updateConcurrencyProperties\r\n      markIsBeingSaved(entitiesToSave, false);\r\n      if (errorCallback) errorCallback(err);\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    function saveSuccess(saveResult: SaveResult) {\r\n      let em = saveContext.entityManager;\r\n      markIsBeingSaved(entitiesToSave, false);\r\n      let savedEntities = saveContext.processSavedEntities(saveResult);\r\n      saveResult.entities = savedEntities;\r\n\r\n      // update _hasChanges after save.\r\n      em._setHasChanges();\r\n\r\n      // can't do this anymore because other changes might have been made while saved entities in flight.\r\n      //      let hasChanges = (isFullSave && haveSameContents(entitiesToSave, savedEntities)) ? false : null;\r\n      //      em._setHasChanges(hasChanges);\r\n\r\n      if (callback) callback(saveResult);\r\n      return Promise.resolve(saveResult);\r\n    }\r\n\r\n    function processSavedEntities(saveResult: SaveResult) {\r\n      let savedEntities = saveResult.entities;\r\n      let deletedKeys = saveResult.deletedKeys || [];\r\n      if (savedEntities.length === 0 && deletedKeys.length === 0) {\r\n        return [];\r\n      }\r\n      let keyMappings = saveResult.keyMappings;\r\n      let em = saveContext.entityManager;\r\n\r\n      // must occur outside of isLoading block\r\n      fixupKeys(em, keyMappings);\r\n\r\n      core.using(em, \"isLoading\", true, () => {\r\n\r\n        let mappingContext = new MappingContext({\r\n          query: undefined, // tells visitAndMerge this is a save instead of a query\r\n          entityManager: em,\r\n          mergeOptions: { mergeStrategy: MergeStrategy.OverwriteChanges },\r\n          dataService: dataService\r\n        });\r\n\r\n        // The visitAndMerge operation has been optimized so that we do not actually perform a merge if the\r\n        // the save operation did not actually return the entity - i.e. during OData and Mongo updates and deletes.\r\n        savedEntities = mappingContext.visitAndMerge(savedEntities, { nodeType: \"root\" });\r\n      });\r\n\r\n      // detach any entities found in the em that appear in the deletedKeys list. \r\n      deletedKeys.forEach(key => {\r\n        let entityType = em.metadataStore._getStructuralType(key.entityTypeName) as EntityType;\r\n        let ekey = new EntityKey(entityType, key.keyValues);\r\n        let entity = em.findEntityByKey(ekey);\r\n        if (entity) {\r\n          entity.entityAspect.setDetached();\r\n        }\r\n      });\r\n\r\n      return savedEntities;\r\n    }\r\n\r\n    function saveFail(serverError: SaveErrorFromServer) {\r\n      markIsBeingSaved(entitiesToSave, false);\r\n      let clientError = processServerErrors(saveContext, serverError);\r\n      if (errorCallback) errorCallback(clientError);\r\n      return Promise.reject(clientError);\r\n    }\r\n  }\r\n\r\n  /**\r\n  Run the \"saveChanges\" pre-save client validation logic.\r\n  \r\n  This is NOT a general purpose validation method.\r\n  It is intended for utilities that must know if saveChanges\r\n  would reject the save due to client validation errors.\r\n  \r\n  It only validates entities if the EntityManager's\r\n  [[ValidationOptions]].validateOnSave is true.\r\n  \r\n  @param entitiesToSave {Array of Entity} The list of entities to save (to validate).\r\n  @return {Error} Validation error or null if no error\r\n  **/\r\n  saveChangesValidateOnClient(entitiesToSave: Entity[]) {\r\n\r\n    if (this.validationOptions.validateOnSave) {\r\n      let failedEntities = entitiesToSave.filter(function (entity) {\r\n        let aspect = entity.entityAspect;\r\n        let isValid = aspect.entityState.isDeleted() || aspect.validateEntity();\r\n        return !isValid;\r\n      });\r\n      if (failedEntities.length > 0) {\r\n        let valError = new Error(\"Client side validation errors encountered - see the entityErrors collection on this object for more detail\");\r\n        (valError as any).entityErrors = createEntityErrors(failedEntities);\r\n        return valError; // TODO: type this.\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _findEntityGroup(entityType: EntityType) {\r\n    return this._entityGroupMap[entityType.name];\r\n  }\r\n\r\n  /**\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let employeeType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >      let employeeKey = new EntityKey(employeeType, 1);\r\n  >      let employee = em1.getEntityByKey(employeeKey);\r\n  >      // employee will either be an entity or null.\r\n  **/\r\n  getEntityByKey(entityKey: EntityKey): Entity | null;\r\n\r\n  /**  \r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let employee = em1.getEntityByKey(\"Employee\", 1);\r\n  >      // employee will either be an entity or null.\r\n  **/\r\n  getEntityByKey(typeName: string, keyValues: any | any[]): Entity | null;\r\n\r\n  /**  \r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let employeeType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >      let employee = em1.getEntityByKey(employeeType, 1);\r\n  >      // employee will either be an entity or null.\r\n  **/\r\n  getEntityByKey(type: EntityType, keyValues: any | any[]): Entity | null;\r\n\r\n  /**  \r\n  Attempts to locate an entity within this EntityManager by its [EntityKey].\r\n  @param entityKey - The [[EntityKey]] of the Entity to be located.\r\n  @param type - The [[EntityType]] for this key.\r\n  @param typeName - The EntityType name for this key.\r\n  @param keyValues - The values for this key - will usually just be a single value; an array is only needed for multipart keys.  \r\n  @return An Entity or null;\r\n  **/\r\n  getEntityByKey(...args: any[]) {\r\n    let entityKey = createEntityKey(this, args).entityKey;\r\n    let entityTypes = entityKey._subtypes || [entityKey.entityType];\r\n    let e: Entity | undefined;\r\n    // hack use of some to simulate mapFirst logic.\r\n    entityTypes.some((et) => {\r\n      let group = this._findEntityGroup(et);\r\n      // group version of findEntityByKey doesn't care about entityType\r\n      e = group && group.findEntityByKey(entityKey);\r\n      return e != null;\r\n    });\r\n    return e || null;\r\n  }\r\n\r\n  fetchEntityByKey(typeName: string, keyValues: any | any[], checkLocalCacheFirst?: boolean): Promise<IEntityByKeyResult>;\r\n  fetchEntityByKey(entityType: EntityType, keyValues: any | any[], checkLocalCacheFirst?: boolean): Promise<IEntityByKeyResult>;\r\n  fetchEntityByKey(entityKey: EntityKey, checkLocalCacheFirst?: boolean): Promise<IEntityByKeyResult>;\r\n  /**\r\n  Attempts to fetch an entity from the server by its [[EntityKey]] with\r\n  an option to check the local cache first. Note the this EntityManager's queryOptions.mergeStrategy\r\n  will be used to merge any server side entity returned by this method.\r\n  >     // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >     let employeeType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >     let employeeKey = new EntityKey(employeeType, 1);\r\n  >     em1.fetchEntityByKey(employeeKey).then(function(result) {\r\n  >       let employee = result.entity;\r\n  >       let entityKey = result.entityKey;\r\n  >       let fromCache = result.fromCache;\r\n  >     });\r\n  @param typeName  - The EntityType name for this key.\r\n  @param entityType  - The EntityType for this key.\r\n  @param keyValues - The values for this key - will usually just be a single value; an array is only needed for multipart keys.\r\n  @param entityKey - The [[EntityKey]] of the Entity to be located.\r\n  @param checkLocalCacheFirst - (default = false) - Whether to check this EntityManager first before going to the server. By default, the query will NOT do this.\r\n  @return {Promise}\r\n    - Properties on the promise success result\r\n      - entity {Object} The entity returned or null\r\n      - entityKey {EntityKey} The entityKey of the entity to fetch.\r\n      - fromCache {Boolean} Whether this entity was fetched from the server or was found in the local cache.\r\n  **/\r\n  fetchEntityByKey(...args: any[]) {\r\n    let dataService = DataService.resolve([this.dataService]);\r\n    if ((!dataService.hasServerMetadata) || this.metadataStore.hasMetadataFor(dataService.serviceName)) {\r\n      return fetchEntityByKeyCore(this, args);\r\n    } else {\r\n      return this.fetchMetadata(dataService).then(() => {\r\n        return fetchEntityByKeyCore(this, args);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n  [Deprecated] - Attempts to locate an entity within this EntityManager by its  [[EntityKey]].\r\n  >     // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >     let employeeType = em1.metadataStore.getEntityType(\"Employee\");\r\n  >     let employeeKey = new EntityKey(employeeType, 1);\r\n  >     let employee = em1.findEntityByKey(employeeKey);\r\n  >     // employee will either be an entity or null.\r\n  @deprecated    Use getEntityByKey instead\r\n  @param entityKey - The  [[EntityKey]] of the Entity to be located.\r\n  @return An Entity or null;\r\n  **/\r\n  findEntityByKey(entityKey: EntityKey) {\r\n    return this.getEntityByKey(entityKey);\r\n  }\r\n\r\n  /**\r\n  Generates a temporary key for the specified entity.  This is used to insure that newly\r\n  created entities have unique keys and to register that these keys are temporary and\r\n  need to be automatically replaced with 'real' key values once these entities are saved.\r\n  \r\n  The [[EntityManager.keyGeneratorCtor]] property is used internally by this method to actually generate\r\n  the keys - See the  KeyGenerator interface interface description to see\r\n  how a custom key generator can be plugged in.\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let customer = custType.createEntity();\r\n  >      let customerId = em.generateTempKeyValue(customer);\r\n  >      // The 'customer' entity 'CustomerID' property is now set to a newly generated unique id value\r\n  >      // This property will change again after a successful save of the 'customer' entity.\r\n  >  \r\n  >      em1.saveChanges().then( function( data) {\r\n  >          let sameCust1 = data.results[0];\r\n  >          // cust1 === sameCust1;\r\n  >          // but cust1.getProperty(\"CustomerId\") != customerId\r\n  >          // because the server will have generated a new id\r\n  >          // and the client will have been updated with this\r\n  >          // new id.\r\n  >      })\r\n  @param entity - The Entity to generate a key for.\r\n  @return The new key value\r\n  **/\r\n  generateTempKeyValue(entity: Entity) {\r\n    // TODO - check if this entity is attached to this EntityManager.\r\n    assertParam(entity, \"entity\").isEntity().check();\r\n    let entityType = entity.entityType;\r\n    let nextKeyValue = this.keyGenerator.generateTempKeyValue(entityType);\r\n    let keyProp = entityType.keyProperties[0];\r\n    entity.setProperty(keyProp.name, nextKeyValue);\r\n    entity.entityAspect.hasTempKey = true;\r\n    return nextKeyValue;\r\n  }\r\n\r\n  hasChanges(): boolean;\r\n  hasChanges(entityTypeNames: string | string[]): boolean;\r\n  hasChanges(entityTypes: EntityType | EntityType[]): boolean;\r\n  /**\r\n  Returns whether there are any changed entities of the specified [[EntityType]]s. A 'changed' Entity has\r\n  has an [[EntityState]] of either Added, Modified or Deleted.\r\n\r\n  This method can be used to determine if an EntityManager has any changes\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      if ( em1.hasChanges() {\r\n  >          // do something interesting\r\n  >      }\r\n\r\n  or if it has any changes on to a specific [[EntityType]].\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      if ( em1.hasChanges(custType) {\r\n  >          // do something interesting\r\n  >      }\r\n\r\n  or to a collection of [[EntityType]]s\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let orderType = em1.metadataStore.getEntityType(\"Order\");\r\n  >      if ( em1.hasChanges( [custType, orderType]) {\r\n  >          // do something interesting\r\n  >      }\r\n  @param entityTypes - The [[EntityType]] or EntityTypes for which 'changed' entities will be found.\r\n  @param entityTypeNames - The [[EntityType]] name or names for which 'changed' entities will be found.\r\n  @return Whether there are any changed entities that match the types specified..\r\n  **/\r\n  hasChanges(entityTypes?: EntityType | EntityType[] | string | string[]) {\r\n    if (!this._hasChanges) return false;\r\n    if (entityTypes === undefined) return this._hasChanges;\r\n    return this._hasChangesCore(entityTypes);\r\n  }\r\n\r\n\r\n  /** @hidden @internal */\r\n  // backdoor to \"really\" check for changes.\r\n  _hasChangesCore(entityTypes?: EntityType | EntityType[] | string | string[]) {\r\n    let ets = checkEntityTypes(this, entityTypes);\r\n    let entityGroups = getEntityGroups(this, ets);\r\n    return entityGroups.some(function (eg) {\r\n      return eg && eg.hasChanges();\r\n    });\r\n  }\r\n\r\n  getChanges(): Entity[];\r\n  getChanges(entityTypeNames: string | string[]): Entity[];\r\n  getChanges(entityTypes: EntityType | EntityType[]): Entity[];\r\n  /**\r\n  Returns a array of all changed entities of the specified [[EntityType]]s. A 'changed' Entity has\r\n  has an [[EntityState]] of either Added, Modified or Deleted.\r\n  \r\n  This method can be used to get all of the changed entities within an EntityManager\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let changedEntities = em1.getChanges();\r\n\r\n  or you can specify that you only want the changes on a specific [[EntityType]]\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let changedCustomers = em1.getChanges(custType);\r\n\r\n  or to a collection of [[EntityType]]s\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let orderType = em1.metadataStore.getEntityType(\"Order\");\r\n  >      let changedCustomersAndOrders = em1.getChanges([custType, orderType]);\r\n  @param entityTypes - The [[EntityType]] or EntityTypes for which 'changed' entities will be found.\r\n  @param entityTypeNames - The [[EntityType]] name or names for which 'changed' entities will be found.\r\n  @return An array of Entities\r\n  **/\r\n  getChanges(entityTypes?: EntityType | EntityType[] | string | string[]) {\r\n    let ets = checkEntityTypes(this, entityTypes);\r\n    return getChangesCore(this, ets);\r\n  }\r\n\r\n  /**\r\n  Rejects (reverses the effects) all of the additions, modifications and deletes from this EntityManager.\r\n  Calls [[EntityAspect.rejectChanges]] on every changed entity in this EntityManager.\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let entities = em1.rejectChanges();\r\n  @return The entities whose changes were rejected. These entities will all have EntityStates of\r\n  either 'Unchanged' or 'Detached'\r\n  **/\r\n  rejectChanges() {\r\n    if (!this._hasChanges) return [];\r\n    let changes = getChangesCore(this);\r\n    // next line stops individual reject changes from each calling _hasChangesCore\r\n    let aspects = changes.map(function (e) {\r\n      return e.entityAspect._checkOperation(\"rejectChanges\");\r\n    });\r\n    this._hasChanges = false;\r\n    aspects.forEach(function (aspect) {\r\n      aspect.rejectChanges();\r\n    });\r\n    this.hasChangesChanged.publish({ entityManager: this, hasChanges: false });\r\n    return changes;\r\n  }\r\n\r\n  getEntities(entityTypeNames?: string | string[], entityStates?: EntityState | EntityState[]): Entity[];\r\n  getEntities(entityTypes?: EntityType | EntityType[], entityStates?: EntityState | EntityState[]): Entity[];\r\n  /**\r\n  Returns a array of all entities of the specified [[EntityType]]s with the specified [[EntityState]]s.\r\n\r\n  This method can be used to get all of the entities within an EntityManager\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let entities = em1.getEntities();\r\n\r\n  or you can specify that you only want the changes on a specific [[EntityType]]\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let customers = em1.getEntities(custType);\r\n\r\n  or to a collection of [[EntityType]]s\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let orderType = em1.metadataStore.getEntityType(\"Order\");\r\n  >      let customersAndOrders = em1.getChanges([custType, orderType]);\r\n\r\n  You can also ask for entities with a particular [[EntityState]] or EntityStates.\r\n  >      // assume em1 is an EntityManager containing a number of preexisting entities.\r\n  >      let custType = em1.metadataStore.getEntityType(\"Customer\");\r\n  >      let orderType = em1.metadataStore.getEntityType(\"Order\");\r\n  >      let addedCustomersAndOrders = em1.getEntities([custType, orderType], EntityState.Added);\r\n \r\n  @param entityTypeName - The [[EntityType]] name or names for which entities will be found.\r\n  If this parameter is omitted, all EntityTypes are searched.  \r\n  @param entityTypes - The [[EntityType]] or EntityTypes for which entities will be found.\r\n  If this parameter is omitted, all EntityTypes are searched. \r\n  @param entityStates - The [[EntityState]]s for which entities will be found.\r\n  If this parameter is omitted, entities of all EntityStates are returned.\r\n  @return An array of Entities\r\n  **/\r\n  getEntities(entityTypes?: EntityType | EntityType[] | string | string[], entityStates?: EntityState | EntityState[]) {\r\n    let entTypes = checkEntityTypes(this, entityTypes);\r\n    assertParam(entityStates, \"entityStates\").isOptional().isEnumOf(EntityState).or().isNonEmptyArray().isEnumOf(EntityState).check();\r\n\r\n    let states = validateEntityStates(this, entityStates);\r\n    return getEntitiesCore(this, entTypes, states);\r\n  }\r\n\r\n\r\n  // protected methods\r\n  /** @hidden @internal */\r\n  _notifyStateChange(entity: Entity, needsSave: boolean) {\r\n    let ecArgs = { entityAction: EntityAction.EntityStateChange, entity: entity };\r\n\r\n    if (needsSave) {\r\n      if (!this._hasChanges) this._setHasChanges(true);\r\n    } else {\r\n      // called when rejecting a change or merging an unchanged record.\r\n      // NOTE: this can be slow with lots of entities in the cache.\r\n      // so defer it during a query/import or save and call it once when complete ( if needed).\r\n      if (this._hasChanges) {\r\n        if (this.isLoading) {\r\n          this._hasChangesAction = this._hasChangesAction || function () {\r\n            this._setHasChanges(null);\r\n            this.entityChanged.publish(ecArgs);\r\n          }.bind(this);\r\n          return;\r\n        } else {\r\n          this._setHasChanges();\r\n        }\r\n      }\r\n    }\r\n    this.entityChanged.publish(ecArgs);\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _setHasChanges(hasChanges?: boolean) {\r\n    if (hasChanges == null) hasChanges = this._hasChangesCore();\r\n    let hadChanges = this._hasChanges;\r\n    this._hasChanges = hasChanges;\r\n    if (hasChanges !== hadChanges) {\r\n      this.hasChangesChanged.publish({ entityManager: this, hasChanges: hasChanges });\r\n    }\r\n    this._hasChangesAction = undefined;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _linkRelatedEntities(entity: Entity) {\r\n    let em = this;\r\n    let entityAspect = entity.entityAspect;\r\n    // we do not want entityState to change as a result of linkage.\r\n    core.using(em, \"isLoading\", true, function () {\r\n\r\n      let unattachedMap = em._unattachedChildrenMap;\r\n      let entityKey = entityAspect.getKey();\r\n      let entityType = entityKey.entityType;\r\n\r\n      while (entityType) {\r\n        let keystring = entityKey.toString(entityType);\r\n\r\n        // attach any unattachedChildren\r\n        let tuples = unattachedMap.getTuplesByString(keystring);\r\n        if (tuples) {\r\n          tuples.slice(0).forEach(function (tpl) {\r\n\r\n            let unattachedChildren = tpl.children.filter(function (e) {\r\n              return e.entityAspect.entityState !== EntityState.Detached;\r\n            });\r\n\r\n            let childToParentNp: NavigationProperty;\r\n            let parentToChildNp: NavigationProperty;\r\n\r\n            // np is usually childToParentNp\r\n            // except with unidirectional 1-n where it is parentToChildNp;\r\n            let np = tpl.navigationProperty;\r\n\r\n            let inverseNp = np.inverse;\r\n            if (inverseNp) {\r\n              // bidirectional\r\n              childToParentNp = np;\r\n              parentToChildNp = inverseNp;\r\n\r\n              if (parentToChildNp.isScalar) {\r\n                let onlyChild = unattachedChildren[0];\r\n                entity.setProperty(parentToChildNp.name, onlyChild);\r\n                onlyChild.setProperty(childToParentNp.name, entity);\r\n              } else {\r\n                let currentChildren = entity.getProperty(parentToChildNp.name);\r\n                unattachedChildren.forEach(function (child) {\r\n                  currentChildren.push(child);\r\n                  child.setProperty(childToParentNp.name, entity);\r\n                });\r\n              }\r\n              unattachedMap.removeChildren(keystring, childToParentNp);\r\n            } else {\r\n              // unidirectional\r\n              // if (np.isScalar || np.parentType !== entity.entityType) {\r\n              if (np.isScalar) {\r\n                // n -> 1  eg: child: OrderDetail parent: Product\r\n                // 1 -> 1 eg child: Employee parent: Employee ( only Manager, no DirectReports property)\r\n                childToParentNp = np;\r\n                unattachedChildren.forEach(function (child) {\r\n                  child.setProperty(childToParentNp.name, entity);\r\n                });\r\n                unattachedMap.removeChildren(keystring, childToParentNp);\r\n              } else {\r\n                // 1 -> n  eg: parent: Region child: Terr\r\n                // TODO: need to remove unattached children from the map after this; only a perf issue.\r\n                parentToChildNp = np;\r\n                let currentChildren = entity.getProperty(parentToChildNp.name);\r\n                unattachedChildren.forEach(function (child) {\r\n                  // we know if can't already be there.\r\n                  currentChildren._push(child);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n        entityType = entityType.baseEntityType; // look for relationships up the hierarchy\r\n      }\r\n\r\n\r\n      // now add to unattachedMap if needed.\r\n      entity.entityType.navigationProperties.forEach(function (np) {\r\n        if (np.isScalar) {\r\n          let value = entity.getProperty(np.name);\r\n          // property is already linked up\r\n          if (value) return;\r\n        }\r\n\r\n        // first determine if np contains a parent or child\r\n        // having a parentKey means that this is a child\r\n        // if a parent then no need for more work because children will attach to it.\r\n        let parentKey = entityAspect.getParentKey(np);\r\n        if (parentKey) {\r\n          // check for empty keys - meaning that parent id's are not yet set.\r\n          if (parentKey._isEmpty()) return;\r\n          // if a child - look for parent in the em cache\r\n          let parent = em.findEntityByKey(parentKey);\r\n          if (parent) {\r\n            // if found hook it up\r\n            entity.setProperty(np.name, parent);\r\n          } else {\r\n            // else add parent to unresolvedParentMap;\r\n            unattachedMap.addChild(parentKey, np, entity);\r\n          }\r\n        }\r\n      });\r\n\r\n      // handle unidirectional 1-x where we set x.fk\r\n      entity.entityType.foreignKeyProperties.forEach(function (fkProp) {\r\n        let invNp = fkProp.inverseNavigationProperty;\r\n        if (!invNp) return;\r\n        // unidirectional fk props only\r\n        let fkValue = entity.getProperty(fkProp.name);\r\n        let parentKey = new EntityKey(invNp.parentType, [fkValue]);\r\n        let parent = em.findEntityByKey(parentKey);\r\n\r\n        if (parent) {\r\n          if (invNp.isScalar) {\r\n            parent.setProperty(invNp.name, entity);\r\n          } else {\r\n            if (em.isLoading) {\r\n              parent.getProperty(invNp.name)._push(entity);\r\n            } else {\r\n              parent.getProperty(invNp.name).push(entity);\r\n            }\r\n          }\r\n        } else {\r\n          // else add parent to unresolvedParentMap;\r\n          unattachedMap.addChild(parentKey, invNp, entity);\r\n        }\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _attachEntityCore(entity: Entity, entityState: EntityState, mergeStrategy: MergeStrategy) {\r\n    let group = findOrCreateEntityGroup(this, entity.entityType);\r\n    let attachedEntity = group.attachEntity(entity, entityState, mergeStrategy);\r\n    this._linkRelatedEntities(attachedEntity);\r\n    return attachedEntity;\r\n  }\r\n\r\n  /** @hidden @internal */\r\n  _updateFkVal(fkProp: DataProperty, oldValue: any, newValue: any) {\r\n    let group = this._entityGroupMap[fkProp.parentType.name];\r\n    if (!group) return;\r\n    group._updateFkVal(fkProp, oldValue, newValue);\r\n  }\r\n}\r\n\r\nEntityManager.prototype._$typeName = \"EntityManager\";\r\n\r\nBreezeEvent.bubbleEvent(EntityManager.prototype);\r\n\r\nfunction clearServerErrors(entities: Entity[]) {\r\n  entities.forEach(function (entity) {\r\n    let serverKeys: string[] = [];\r\n    let aspect = entity.entityAspect;\r\n    core.objectForEach(aspect._validationErrors, function (key, ve) {\r\n      if (ve.isServerError) serverKeys.push(key);\r\n    });\r\n    if (serverKeys.length === 0) return;\r\n    aspect._processValidationOpAndPublish(function () {\r\n      serverKeys.forEach(function (key) {\r\n        aspect._removeValidationError(key);\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nfunction createEntityErrors(entities: Entity[]) {\r\n  let entityErrors: EntityError[] = [];\r\n  entities.forEach((entity) => {\r\n    core.objectForEach(entity.entityAspect._validationErrors, function (key, ve) {\r\n      let cfg = core.extend({\r\n        entity: entity,\r\n        errorName: ve.validator.name\r\n      }, ve, [\"errorMessage\", \"propertyName\", \"isServerError\"]) as EntityError;\r\n      entityErrors.push(cfg);\r\n    });\r\n  });\r\n  return entityErrors;\r\n}\r\n\r\n\r\nfunction processServerErrors(saveContext: SaveContext, saveError: SaveErrorFromServer) {\r\n  // converting ISaveErrorFromServer -> ISaveError\r\n  let serverErrors = saveError.entityErrors;\r\n  if (!serverErrors) return <SaveError> <any> saveError;\r\n  let entityManager = saveContext.entityManager;\r\n  let metadataStore = entityManager.metadataStore;\r\n  let entityErrors = serverErrors.map((serr) => {\r\n    let entity: Entity | null = null;\r\n    let entityType: EntityType | undefined;\r\n    if (serr.keyValues) {\r\n      entityType = metadataStore._getStructuralType(serr.entityTypeName) as EntityType;\r\n      let ekey = new EntityKey(entityType, serr.keyValues);\r\n      entity = entityManager.findEntityByKey(ekey);\r\n    }\r\n\r\n    if (entityType && entity) {\r\n      let context = serr.propertyName ?\r\n        {\r\n          propertyName: serr.propertyName,\r\n          property: entityType.getProperty(serr.propertyName)\r\n        } : {\r\n        };\r\n      let key = ValidationError.getKey(serr.errorName || serr.errorMessage, serr.propertyName);\r\n\r\n      let ve = new ValidationError(null, context, serr.errorMessage, key);\r\n      ve.isServerError = true;\r\n      entity.entityAspect.addValidationError(ve);\r\n    }\r\n\r\n    let entityError = core.extend({\r\n      entity: entity,\r\n      isServerError: true\r\n    }, serr, [\"errorName\", \"errorMessage\", \"propertyName\"]) as EntityError;\r\n    return entityError;\r\n  });\r\n  // converting ISaveErrorFromServer -> ISaveError \r\n  saveError.entityErrors = entityErrors as any;\r\n  return <SaveError> <any> saveError;\r\n}\r\n\r\nexport interface IEntityByKeyResult {\r\n  entity?: Entity;\r\n  entityKey: EntityKey;\r\n  fromCache: boolean;\r\n}\r\n\r\nfunction fetchEntityByKeyCore(em: EntityManager, args: any[]): Promise<IEntityByKeyResult> {\r\n  let tpl = createEntityKey(em, args);\r\n  let entityKey = tpl.entityKey;\r\n\r\n  let checkLocalCacheFirst = tpl.remainingArgs.length === 0 ? false : !!tpl.remainingArgs[0];\r\n  let entity: Entity | null = null;\r\n  let foundIt = false;\r\n  if (checkLocalCacheFirst) {\r\n    entity = em.getEntityByKey(entityKey);\r\n    foundIt = entity != null;\r\n    if (entity != null &&\r\n      // null the entity if it is deleted and we should exclude deleted entities\r\n      !em.queryOptions.includeDeleted && entity.entityAspect.entityState.isDeleted()) {\r\n      entity = null;\r\n      // but resume looking if we'd overwrite deleted entity with a remote entity\r\n      // note: em.queryOptions is always fully resolved by now\r\n      foundIt = em.queryOptions.mergeStrategy !== MergeStrategy.OverwriteChanges;\r\n    }\r\n  }\r\n  if (foundIt) {\r\n    return Promise.resolve({ entity: entity || undefined, entityKey: entityKey, fromCache: true });\r\n  } else {\r\n    return EntityQuery.fromEntityKey(entityKey).using(em).execute().then(function (data: any) {\r\n      entity = (data.results.length === 0) ? null : data.results[0];\r\n      return Promise.resolve({ entity: entity || undefined, entityKey: entityKey, fromCache: false });\r\n    });\r\n  }\r\n}\r\n\r\n\r\n// private fns\r\n\r\n// takes in entityTypes as either strings or entityTypes or arrays of either\r\n// and returns either an entityType or an array of entityTypes or throws an error\r\nfunction checkEntityTypes(em: EntityManager, entityTypes?: EntityType | EntityType[] | string | string[]) {\r\n  assertParam(entityTypes, \"entityTypes\").isString().isOptional().or().isNonEmptyArray().isString()\r\n    .or().isInstanceOf(EntityType).or().isNonEmptyArray().isInstanceOf(EntityType).check();\r\n  let resultTypes: EntityType | EntityType[] | undefined;\r\n  if (typeof entityTypes === \"string\") {\r\n    resultTypes = em.metadataStore._getStructuralType(entityTypes, false) as (EntityType | EntityType[]);\r\n  } else if (Array.isArray(entityTypes) && typeof entityTypes[0] === \"string\") {\r\n    resultTypes = (entityTypes as string[]).map(function (etName) {\r\n      return em.metadataStore._getStructuralType(etName, false) as EntityType;\r\n    });\r\n  } else {\r\n    resultTypes = entityTypes as (EntityType | EntityType[] | undefined);\r\n  }\r\n\r\n  return resultTypes;\r\n}\r\n\r\nfunction getChangesCore(em: EntityManager, entityTypes?: EntityType | EntityType[]) {\r\n  let entityGroups = getEntityGroups(em, entityTypes);\r\n\r\n  // TODO: think about writing a core.mapMany method if we see more of these.\r\n  let selected: Entity[] = [];\r\n  entityGroups.forEach(function (eg) {\r\n    // eg may be undefined or null\r\n    if (!eg) return;\r\n    let entities = eg.getChanges();\r\n    if (selected && selected.length) {\r\n      selected = selected.concat(entities);\r\n    } else {\r\n      selected = entities;\r\n    }\r\n  });\r\n  return selected;\r\n}\r\n\r\nfunction getEntitiesCore(em: EntityManager, entityTypes: EntityType | EntityType[] | undefined, entityStates: EntityState[]) {\r\n  let entityGroups = getEntityGroups(em, entityTypes);\r\n\r\n  // TODO: think about writing a core.mapMany method if we see more of these.\r\n  let selected: Entity[] = [];\r\n  entityGroups.forEach(function (eg) {\r\n    // eg may be undefined or null\r\n    if (!eg) return;\r\n    let entities = eg.getEntities(entityStates);\r\n    if (selected && selected.length) {\r\n      selected = selected.concat(entities);\r\n    } else {\r\n      selected = entities;\r\n    }\r\n  });\r\n  return selected;\r\n}\r\n\r\n\r\nfunction createEntityKey(em: EntityManager, args: any[]) {\r\n  try {\r\n    if (args[0] instanceof EntityKey) {\r\n      return { entityKey: args[0] as EntityKey, remainingArgs: core.arraySlice(args, 1) };\r\n    } else if (args.length >= 2) {\r\n      let entityType = (typeof args[0] === 'string') ? em.metadataStore._getStructuralType(args[0], false) : args[0];\r\n      return { entityKey: new EntityKey(entityType, args[1]), remainingArgs: core.arraySlice(args, 2) };\r\n    }\r\n  } catch (e) {/* throw below */\r\n    // throw new Error(\"Must supply an EntityKey OR an EntityType name or EntityType followed by a key value or an array of key values.\");\r\n  }\r\n  throw new Error(\"Must supply an EntityKey OR an EntityType name or EntityType followed by a key value or an array of key values.\");\r\n}\r\n\r\nfunction markIsBeingSaved(entities: Entity[], flag: boolean) {\r\n  entities.forEach(function (entity) {\r\n    entity.entityAspect.isBeingSaved = flag;\r\n  });\r\n}\r\n\r\nfunction exportEntityGroups(em: EntityManager, entitiesOrEntityTypes: Entity[] | EntityType[] | string[]) {\r\n  let entityGroupMap: { [index: string]: EntityGroup };\r\n  let first = entitiesOrEntityTypes && entitiesOrEntityTypes[0];\r\n  // check if array\r\n  if (first) {\r\n    // group entities by entityType and\r\n    // create 'groups' that look like entityGroups.\r\n    entityGroupMap = {};\r\n    if ((first as any).entityType) {\r\n      let entities = entitiesOrEntityTypes as Entity[];\r\n      // assume \"entities\" is an array of entities;\r\n      entities.forEach(function (e) {\r\n        if (e.entityAspect.entityState === EntityState.Detached) {\r\n          throw new Error(\"Unable to export an entity with an EntityState of 'Detached'\");\r\n        }\r\n        let group = entityGroupMap[e.entityType.name];\r\n        if (!group) {\r\n          group = {} as EntityGroup;\r\n          group.entityType = e.entityType;\r\n          group._entities = [];\r\n          entityGroupMap[e.entityType.name] = group;\r\n        }\r\n        group._entities.push(e);\r\n      });\r\n    } else {\r\n      // assume \"entities\" is an array of EntityTypes (or names)\r\n      let entityTypes = checkEntityTypes(em, entitiesOrEntityTypes as EntityType[] | string[]) as EntityType[];\r\n      if (entityTypes != null) {\r\n        entityTypes.forEach((et) => {\r\n          let group = em._entityGroupMap[et.name];\r\n          if (group && group._entities.length) {\r\n            entityGroupMap[et.name] = group;\r\n          }\r\n        });\r\n      }\r\n    }\r\n  } else if (entitiesOrEntityTypes && entitiesOrEntityTypes.length === 0) {\r\n    // empty array = export nothing\r\n    entityGroupMap = {};\r\n  } else {\r\n    entityGroupMap = em._entityGroupMap;\r\n  }\r\n\r\n  let tempKeys: ITempKey[] = [];\r\n  let newGroupMap = {};\r\n  core.objectForEach(entityGroupMap, (entityTypeName, entityGroup) => {\r\n    newGroupMap[entityTypeName] = exportEntityGroup(entityGroup, tempKeys);\r\n  });\r\n\r\n  return { entityGroupMap: newGroupMap, tempKeys: tempKeys };\r\n}\r\n\r\nfunction exportEntityGroup(entityGroup: EntityGroup, tempKeys: ITempKey[]) {\r\n  let resultGroup = {} as { entities: any[] };\r\n  let entityType = entityGroup.entityType;\r\n  let dps = entityType.dataProperties;\r\n  let serializerFn = getSerializerFn(entityType);\r\n  let rawEntities: any[] = [];\r\n  entityGroup._entities.forEach((entity) => {\r\n    if (entity) {\r\n      let rawEntity = structuralObjectToJson(entity, dps, serializerFn, tempKeys);\r\n      rawEntities.push(rawEntity);\r\n    }\r\n  });\r\n  resultGroup.entities = rawEntities;\r\n  return resultGroup;\r\n}\r\n\r\nfunction structuralObjectToJson(so: StructuralObject, dps: DataProperty[], serializerFn?: (dp: DataProperty, value: any) => any, tempKeys?: ITempKey[]) {\r\n\r\n  let result = {};\r\n  dps.forEach(function (dp) {\r\n    let dpName = dp.name;\r\n    let value = so.getProperty(dpName);\r\n    if (value == null && dp.defaultValue == null) return;\r\n\r\n    if (value && dp.isComplexProperty) {\r\n      let coDps = (dp.dataType as ComplexType).dataProperties;\r\n      value = core.map(value, function (v: ComplexObject) {\r\n        return structuralObjectToJson(v, coDps, serializerFn);\r\n      });\r\n    } else {\r\n      value = serializerFn ? serializerFn(dp, value) : value;\r\n      if (dp.isUnmapped) {\r\n        value = core.toJSONSafe(value, core.toJSONSafeReplacer);\r\n      }\r\n    }\r\n    if (value === undefined) return;\r\n    result[dpName] = value;\r\n  });\r\n\r\n  // if (so.entityAspect) {\r\n  if (EntityAspect.isEntity(so)) {\r\n    let aspect = so.entityAspect;\r\n    let entityState = aspect.entityState;\r\n    let newAspect = {\r\n      tempNavPropNames: exportTempKeyInfo(aspect, tempKeys || []),\r\n      entityState: entityState.name\r\n    } as any;\r\n    if (aspect.extraMetadata) {\r\n      newAspect.extraMetadata = aspect.extraMetadata;\r\n    }\r\n    if (entityState.isModified() || entityState.isDeleted()) {\r\n      newAspect.originalValuesMap = aspect.originalValues;\r\n    }\r\n    (result as any).entityAspect = newAspect;\r\n  } else {\r\n    let aspect = so.complexAspect;\r\n    let newAspect = {} as any;\r\n    if (aspect.originalValues && !core.isEmpty(aspect.originalValues)) {\r\n      newAspect.originalValuesMap = aspect.originalValues;\r\n    }\r\n\r\n    (result as any).complexAspect = newAspect;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\ninterface ITempKey {\r\n  entityType: string;\r\n  values: any[];\r\n}\r\n\r\nfunction exportTempKeyInfo(entityAspect: EntityAspect, tempKeys: ITempKey[]) {\r\n  let entity = entityAspect.entity as Entity;\r\n  if (entityAspect.hasTempKey) {\r\n    tempKeys.push(entityAspect.getKey().toJSON());\r\n  }\r\n  // create map for this entity with foreignKeys that are 'temporary'\r\n  // map -> key: tempKey, value: fkPropName\r\n  let tempNavPropNames: string[] = [];\r\n  entity.entityType.navigationProperties.forEach(function (np) {\r\n    if (np.relatedDataProperties) {\r\n      let relatedValue = entity.getProperty(np.name);\r\n      if (relatedValue && relatedValue.entityAspect.hasTempKey) {\r\n        tempNavPropNames.push(np.name);\r\n      }\r\n    }\r\n  });\r\n  return tempNavPropNames;\r\n}\r\n\r\nfunction importEntityGroup(entityGroup: EntityGroup, jsonGroup: { entities: any[] }, importConfig: ImportConfigExt) {\r\n\r\n  let tempKeyMap = importConfig.tempKeyMap;\r\n  let mergeAdds = !!importConfig.mergeAdds;\r\n\r\n  let entityType = entityGroup.entityType;\r\n  let mergeStrategy = importConfig.mergeStrategy;\r\n\r\n  let targetEntity: Entity | undefined;\r\n\r\n  let em = entityGroup.entityManager;\r\n  let entityChanged = em.entityChanged;\r\n  let entitiesToLink: Entity[] = [];\r\n  let rawValueFn = DataProperty.getRawValueFromClient;\r\n  jsonGroup.entities.forEach(function (rawEntity: any) {\r\n    let newAspect = rawEntity.entityAspect;\r\n\r\n    let entityKey = entityType.getEntityKeyFromRawEntity(rawEntity, rawValueFn);\r\n    let entityState = EntityState.fromName(newAspect.entityState) as EntityState;\r\n    if (!entityState || entityState === EntityState.Detached) {\r\n      throw new Error(\"Only entities with a non detached entity state may be imported.\");\r\n    }\r\n\r\n    // Merge if raw entity is in cache UNLESS this is a new entity w/ a temp key\r\n    // Cannot safely merge such entities even if could match temp key to an entity in cache.\r\n    // Can enable merge of entities w/temp key using \"mergeAdds\" - use at your own risk!\r\n    let newTempKey = !mergeAdds && entityState.isAdded() && getMappedKey(tempKeyMap!, entityKey);\r\n    targetEntity = newTempKey ? undefined : entityGroup.findEntityByKey(entityKey);\r\n\r\n    if (targetEntity) {\r\n      if (mergeStrategy === MergeStrategy.SkipMerge) {\r\n        // deliberate fall thru\r\n      } else if (mergeStrategy === MergeStrategy.Disallowed) {\r\n        throw new Error(\"A MergeStrategy of 'Disallowed' prevents \" + entityKey.toString() + \" from being merged\");\r\n      } else {\r\n        let targetEntityState = targetEntity.entityAspect.entityState;\r\n        let wasUnchanged = targetEntityState.isUnchanged();\r\n        if (mergeStrategy === MergeStrategy.OverwriteChanges || wasUnchanged) {\r\n          entityType._updateTargetFromRaw(targetEntity, rawEntity, rawValueFn);\r\n          targetEntity.entityAspect.setEntityState(entityState);\r\n          entityChanged.publish({ entityAction: EntityAction.MergeOnImport, entity: targetEntity });\r\n        }\r\n      }\r\n    } else {\r\n      targetEntity = entityType._createInstanceCore() as Entity;\r\n      entityType._updateTargetFromRaw(targetEntity, rawEntity, rawValueFn);\r\n      if (newTempKey) {\r\n        targetEntity.entityAspect.hasTempKey = true;\r\n        // fixup pk\r\n        targetEntity.setProperty(entityType.keyProperties[0].name, newTempKey.values[0]);\r\n\r\n        // fixup foreign keys\r\n        // This is safe because the entity is detached here and therefore originalValues will not be updated.\r\n        if (newAspect.tempNavPropNames) {\r\n          newAspect.tempNavPropNames.forEach(function (npName: string) {\r\n            let np = entityType.getNavigationProperty(npName);\r\n            let fkPropName = np!.relatedDataProperties[0].name;\r\n            let oldFkValue = targetEntity!.getProperty(fkPropName);\r\n            let fk = new EntityKey(np!.entityType, [oldFkValue]);\r\n            let newFk = getMappedKey(tempKeyMap!, fk);\r\n            targetEntity!.setProperty(fkPropName, newFk!.values[0]);\r\n          });\r\n        }\r\n      }\r\n      // Now performed in attachEntity\r\n      targetEntity = entityGroup.attachEntity(targetEntity, entityState);\r\n      entityChanged.publish({ entityAction: EntityAction.AttachOnImport, entity: targetEntity });\r\n      if (!entityState.isUnchanged()) {\r\n        em._notifyStateChange(targetEntity, true);\r\n      }\r\n    }\r\n\r\n    entitiesToLink.push(targetEntity);\r\n  });\r\n  return entitiesToLink;\r\n}\r\n\r\nfunction getMappedKey(tempKeyMap: ITempKeyMap, entityKey: EntityKey) {\r\n  let newKey = tempKeyMap[entityKey.toString()];\r\n  if (newKey) return newKey;\r\n  let subtypes = entityKey._subtypes;\r\n  if (!subtypes) return null;\r\n  for (let i = 0, j = subtypes.length; i < j; i++) {\r\n    newKey = tempKeyMap[entityKey.toString(subtypes[i])];\r\n    if (newKey) return newKey;\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction promiseWithCallbacks<T>(promise: Promise<T>, callback?: Callback, errorCallback?: ErrorCallback) {\r\n  promise = promise.then(function (data) {\r\n    if (callback) callback(data);\r\n    return Promise.resolve(data);\r\n  }, function (error) {\r\n    if (errorCallback) errorCallback(error);\r\n    return Promise.reject(error);\r\n  });\r\n  return promise;\r\n}\r\n\r\nfunction getEntitiesToSave(em: EntityManager, entities?: Entity[]) {\r\n  let entitiesToSave: Entity[];\r\n  if (entities) {\r\n    entitiesToSave = entities.filter(function (e) {\r\n      if (e.entityAspect.entityManager !== em) {\r\n        throw new Error(\"Only entities in this entityManager may be saved\");\r\n      }\r\n      return !e.entityAspect.entityState.isDetached();\r\n    });\r\n  } else {\r\n    entitiesToSave = em.getChanges();\r\n  }\r\n  return entitiesToSave;\r\n}\r\n\r\nfunction fixupKeys(em: EntityManager, keyMappings: KeyMapping[]) {\r\n  em._inKeyFixup = true;\r\n  keyMappings.forEach(function (km) {\r\n    let group = em._entityGroupMap[km.entityTypeName];\r\n    if (!group) {\r\n      throw new Error(\"Unable to locate the following fully qualified EntityType name: \" + km.entityTypeName);\r\n    }\r\n    group._fixupKey(km.tempValue, km.realValue);\r\n  });\r\n  em._inKeyFixup = false;\r\n}\r\n\r\nfunction getEntityGroups(em: EntityManager, entityTypes?: EntityType | EntityType[]) {\r\n  let groupMap = em._entityGroupMap;\r\n  if (entityTypes) {\r\n    return core.toArray(entityTypes).map(function (et: EntityType) {\r\n      if (et instanceof EntityType) {\r\n        return groupMap[et.name];\r\n      } else {\r\n        throw new Error(\"The EntityManager.getChanges() 'entityTypes' parameter must be either an entityType or an array of entityTypes or null\");\r\n      }\r\n    });\r\n  } else {\r\n    return core.getOwnPropertyValues(groupMap) as EntityGroup[];\r\n  }\r\n}\r\n\r\nfunction checkEntityKey(em: EntityManager, entity: Entity) {\r\n  let ek = entity.entityAspect.getKey();\r\n  // return properties that are = to defaultValues\r\n  let keyPropsWithDefaultValues = core.arrayZip(entity.entityType.keyProperties, ek.values, function (kp, kv) {\r\n    return (kp.defaultValue === kv) ? kp : null;\r\n  }).filter(function (kp) {\r\n    return kp !== null;\r\n  });\r\n  if (keyPropsWithDefaultValues.length) {\r\n    if (entity.entityType.autoGeneratedKeyType !== AutoGeneratedKeyType.None) {\r\n      em.generateTempKeyValue(entity);\r\n    } else {\r\n      // we will allow attaches of entities where only part of the key is set.\r\n      if (keyPropsWithDefaultValues.length === ek.values.length) {\r\n        throw new Error(\"Cannot attach an object of type  (\" + entity.entityType.name + \") to an EntityManager without first setting its key or setting its entityType 'AutoGeneratedKeyType' property to something other than 'None'\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction validateEntityStates(em: EntityManager, entityStates?: EntityState | EntityState[]) {\r\n  if (!entityStates) return [] as EntityState[];\r\n  let entStates = core.toArray(entityStates) as EntityState[];\r\n  entStates.forEach((es) => {\r\n    if (!(es instanceof EntityState)) {\r\n      throw new Error(\"The EntityManager.getChanges() 'entityStates' parameter must either be null, an entityState or an array of entityStates\");\r\n    }\r\n  });\r\n  return entStates;\r\n}\r\n\r\nfunction attachRelatedEntities(em: EntityManager, entity: Entity, entityState: EntityState, mergeStrategy: MergeStrategy) {\r\n  let navProps = entity.entityType.navigationProperties;\r\n  navProps.forEach(function (np) {\r\n    let related = entity.getProperty(np.name);\r\n    if (np.isScalar) {\r\n      if (!related) return;\r\n      em.attachEntity(related, entityState, mergeStrategy);\r\n    } else {\r\n      related.forEach(function (e: Entity) {\r\n        em.attachEntity(e, entityState, mergeStrategy);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n// returns a promise\r\nfunction executeQueryCore(em: EntityManager, query: EntityQuery | string, queryOptions: QueryOptions, dataService: DataService): Promise<QueryResult> {\r\n  try {\r\n    let results: any[];\r\n    let metadataStore = em.metadataStore;\r\n\r\n    if (metadataStore.isEmpty() && dataService.hasServerMetadata) {\r\n      throw new Error(\"cannot execute _executeQueryCore until metadataStore is populated.\");\r\n    }\r\n\r\n    if (queryOptions.fetchStrategy === FetchStrategy.FromLocalCache) {\r\n      try {\r\n        if (typeof query === 'string') {\r\n          throw new Error(\"cannot execute 'string' EntityQuery locally.\");\r\n        }\r\n        let qr = executeQueryLocallyCore(em, query);\r\n        return Promise.resolve({ results: qr.results, entityManager: em, inlineCount: qr.inlineCount, query: query });\r\n      } catch (e) {\r\n        return Promise.reject(e);\r\n      }\r\n    }\r\n\r\n    let mappingContext: MappingContext | undefined = new MappingContext({\r\n      query: query,\r\n      entityManager: em,\r\n      dataService: dataService,\r\n      mergeOptions: {\r\n        mergeStrategy: queryOptions.mergeStrategy,\r\n        noTracking: !!(query as any).noTrackingEnabled,\r\n        includeDeleted: queryOptions.includeDeleted\r\n      }\r\n    });\r\n\r\n    let validateOnQuery = em.validationOptions.validateOnQuery;\r\n\r\n    return dataService.adapterInstance!.executeQuery(mappingContext).then(function (data: any) {\r\n      let result = core.wrapExecution(function () {\r\n        let state = { isLoading: em.isLoading };\r\n        em.isLoading = true;\r\n        em._pendingPubs = [];\r\n        return state;\r\n      }, function (state) {\r\n        // cleanup\r\n        em.isLoading = state.isLoading;\r\n        em._pendingPubs!.forEach(function (fn) {\r\n          fn();\r\n        });\r\n        em._pendingPubs = undefined;\r\n        em._hasChangesAction && em._hasChangesAction();\r\n        // TODO: removed - not sure why needed in first place...\r\n        // // HACK for GC\r\n        // query = undefined;\r\n        mappingContext = undefined;\r\n        // HACK: some errors thrown in next function do not propogate properly - this catches them.\r\n\r\n        if (state.error) {\r\n          return Promise.reject(state.error);\r\n        }\r\n\r\n      }, function () {\r\n        let nodes = dataService.jsonResultsAdapter.extractResults(data);\r\n        nodes = core.toArray(nodes);\r\n\r\n        results = mappingContext!.visitAndMerge(nodes, { nodeType: \"root\" });\r\n        if (validateOnQuery) {\r\n          results.forEach(function (r: any) {\r\n            // anon types and simple types will not have an entityAspect.\r\n            r.entityAspect && r.entityAspect.validateEntity();\r\n          });\r\n        }\r\n        mappingContext!.processDeferred();\r\n        // if query has expand clauses walk each of the 'results' and mark the expanded props as loaded.\r\n        if (query instanceof EntityQuery) {\r\n          markLoadedNavProps(results, query);\r\n        }\r\n        let retrievedEntities = core.objectMap(mappingContext!.refMap);\r\n        return { results: results, query: query, entityManager: em, httpResponse: data.httpResponse, inlineCount: data.inlineCount, retrievedEntities: retrievedEntities };\r\n      });\r\n      return Promise.resolve(result);\r\n    }, function (e: any) {\r\n      if (e) {\r\n        e.query = query;\r\n        e.entityManager = em;\r\n      }\r\n      return Promise.reject(e);\r\n    });\r\n\r\n  } catch (e) {\r\n    if (e) {\r\n      e.query = query;\r\n    }\r\n    return Promise.reject(e);\r\n  }\r\n}\r\n\r\nfunction markLoadedNavProps(entities: Entity[], query: EntityQuery) {\r\n  if (query.noTrackingEnabled) return;\r\n  let expandClause = query.expandClause;\r\n  if (expandClause == null) return;\r\n  expandClause.propertyPaths.forEach(function (propertyPath) {\r\n    let propNames = propertyPath.split('.');\r\n    markLoadedNavPath(entities, propNames);\r\n  });\r\n}\r\n\r\nfunction markLoadedNavPath(entities: Entity[], propNames: string[]) {\r\n  let propName = propNames[0];\r\n  entities.forEach((entity) => {\r\n    let ea = entity.entityAspect;\r\n    if (!ea) return; // entity may not be a 'real' entity in the case of a projection.\r\n    ea._markAsLoaded(propName);\r\n    if (propNames.length === 1) return;\r\n    let next = entity.getProperty(propName);\r\n    if (!next) return; // no children to process.\r\n    // strange logic because nonscalar nav values are NOT really arrays\r\n    // otherwise we could use Array.isArray\r\n    if (!next.arrayChanged) next = [next];\r\n    markLoadedNavPath(next, propNames.slice(1));\r\n  });\r\n}\r\n\r\nfunction updateConcurrencyProperties(entities: Entity[]) {\r\n  let candidates = entities.filter((e) => {\r\n    e.entityAspect.isBeingSaved = true;\r\n    return e.entityAspect.entityState.isModified()\r\n      && e.entityType.concurrencyProperties.length > 0;\r\n\r\n  });\r\n  if (candidates.length === 0) return;\r\n  candidates.forEach(function (c) {\r\n    c.entityType.concurrencyProperties.forEach(function (cp) {\r\n      updateConcurrencyProperty(c, cp);\r\n    });\r\n  });\r\n}\r\n\r\nfunction updateConcurrencyProperty(entity: Entity, property: DataProperty) {\r\n  // check if property has already been updated\r\n  if (entity.entityAspect.originalValues[property.name]) return;\r\n  let value = entity.getProperty(property.name);\r\n  let dataType = property.dataType as DataType;\r\n  if (!value) value = dataType.defaultValue;\r\n  if (dataType.isNumeric) {\r\n    entity.setProperty(property.name, value + 1);\r\n  } else if (dataType.getConcurrencyValue) {\r\n    // DataType has its own implementation\r\n    let nextValue = dataType.getConcurrencyValue(value);\r\n    entity.setProperty(property.name, nextValue);\r\n  } else if (dataType === DataType.Binary) {\r\n    // best guess - that this is a timestamp column and is computed on the server during save\r\n    // - so no need to set it here.\r\n    return;\r\n  } else {\r\n    // this just leaves DataTypes of Boolean, String and Byte - none of which should be the\r\n    // type for a concurrency column.\r\n    // NOTE: thought about just returning here but would rather be safe for now.\r\n    throw new Error(\"Unable to update the value of concurrency property before saving: \" + property.name);\r\n  }\r\n}\r\n\r\n\r\nfunction findOrCreateEntityGroup(em: EntityManager, entityType: EntityType) {\r\n  let group = em._entityGroupMap[entityType.name];\r\n  if (!group) {\r\n    group = new EntityGroup(em, entityType);\r\n    em._entityGroupMap[entityType.name] = group;\r\n  }\r\n  return group;\r\n}\r\n\r\nfunction findOrCreateEntityGroups(em: EntityManager, entityType: EntityType) {\r\n  let entityTypes = entityType.getSelfAndSubtypes();\r\n  return entityTypes.map((et) => {\r\n    return findOrCreateEntityGroup(em, et);\r\n  });\r\n}\r\n\r\nfunction unwrapInstance(structObj: StructuralObject, transformFn?: (dp: DataProperty, val: any) => any) {\r\n\r\n  let rawObject: any = {};\r\n  let stype = EntityAspect.isEntity(structObj) ? structObj.entityType : structObj.complexType;\r\n  let serializerFn = getSerializerFn(stype);\r\n  let unmapped = {};\r\n  stype.dataProperties.forEach(function (dp) {\r\n    if (dp.isComplexProperty) {\r\n      rawObject[dp.nameOnServer] = core.map(structObj.getProperty(dp.name), function (co) {\r\n        return unwrapInstance(co, transformFn);\r\n      });\r\n    } else {\r\n      let val = structObj.getProperty(dp.name);\r\n      val = transformFn ? transformFn(dp, val) : val;\r\n      if (val === undefined) return;\r\n      val = serializerFn ? serializerFn(dp, val) : val;\r\n      if (val !== undefined) {\r\n        if (dp.isUnmapped) {\r\n          unmapped[dp.nameOnServer] = core.toJSONSafe(val, core.toJSONSafeReplacer);\r\n        } else {\r\n          rawObject[dp.nameOnServer] = val;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!core.isEmpty(unmapped)) {\r\n    // TODO: review this.\r\n    (rawObject as any).__unmapped = unmapped;\r\n  }\r\n  return rawObject;\r\n}\r\n\r\nfunction unwrapOriginalValues(target: StructuralObject, metadataStore: MetadataStore, transformFn?: (dp: DataProperty, val: any) => any) {\r\n  let stype = EntityAspect.isEntity(target) ? target.entityType : target.complexType;\r\n  let aspect = EntityAspect.isEntity(target) ? target.entityAspect : target.complexAspect;\r\n  let fn = metadataStore.namingConvention.clientPropertyNameToServer;\r\n  let result = {};\r\n  core.objectForEach(aspect.originalValues, function (propName, val) {\r\n    let prop = stype.getProperty(propName) as DataProperty;\r\n    val = transformFn ? transformFn(prop, val) : val;\r\n    if (val !== undefined) {\r\n      result[fn(propName, prop)] = val;\r\n    }\r\n  });\r\n  stype.complexProperties.forEach(function (cp) {\r\n    let nextTarget = target.getProperty(cp.name);\r\n    if (cp.isScalar) {\r\n      let unwrappedCo = unwrapOriginalValues(nextTarget, metadataStore, transformFn);\r\n      if (!core.isEmpty(unwrappedCo)) {\r\n        result[fn(cp.name, cp)] = unwrappedCo;\r\n      }\r\n    } else {\r\n      let unwrappedCos = nextTarget.map((item: any) => {\r\n        return unwrapOriginalValues(item, metadataStore, transformFn);\r\n      });\r\n      result[fn(cp.name, cp)] = unwrappedCos;\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction unwrapChangedValues(entity: Entity, metadataStore: MetadataStore, transformFn: (dp: DataProperty, val: any) => any) {\r\n  let stype = entity.entityType;\r\n  let serializerFn = getSerializerFn(stype);\r\n  let fn = metadataStore.namingConvention.clientPropertyNameToServer;\r\n  let result = {};\r\n  core.objectForEach(entity.entityAspect.originalValues, function (propName, value) {\r\n    let prop = stype.getProperty(propName) as DataProperty;\r\n    let val = entity.getProperty(propName);\r\n    val = transformFn ? transformFn(prop, val) : val;\r\n    if (val === undefined) return;\r\n    val = serializerFn ? serializerFn(prop, val) : val;\r\n    if (val !== undefined) {\r\n      result[fn(propName, prop)] = val;\r\n    }\r\n  });\r\n  // any change to any complex object or array of complex objects returns the ENTIRE\r\n  // current complex object or complex object array.  This is by design. Complex Objects\r\n  // are atomic.\r\n  stype.complexProperties.forEach((cp) => {\r\n    if (cpHasOriginalValues(entity, cp)) {\r\n      let coOrCos = entity.getProperty(cp.name);\r\n      result[fn(cp.name, cp)] = core.map(coOrCos, function (co) {\r\n        return unwrapInstance(co, transformFn);\r\n      });\r\n    }\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction cpHasOriginalValues(structuralObject: StructuralObject, cp: DataProperty): boolean {\r\n  let coOrCos = structuralObject.getProperty(cp.name);\r\n  if (cp.isScalar) {\r\n    return coHasOriginalValues(coOrCos);\r\n  } else {\r\n    // this occurs when a nonscalar co array has had cos added or removed.\r\n    if (coOrCos._origValues) return true;\r\n    return coOrCos.some(function (co: ComplexObject) {\r\n      return coHasOriginalValues(co);\r\n    });\r\n  }\r\n}\r\n\r\nfunction executeQueryLocallyCore(em: EntityManager, query: EntityQuery) {\r\n  assertParam(query, \"query\").isInstanceOf(EntityQuery).check();\r\n\r\n  let metadataStore = em.metadataStore;\r\n  let entityType = query._getFromEntityType(metadataStore, true);\r\n  // there may be multiple groups is this is a base entity type.\r\n  let groups = findOrCreateEntityGroups(em, entityType!);\r\n  // filter then order then skip then take\r\n  let filterFunc = query.wherePredicate && query.wherePredicate.toFunction({ entityType: entityType });\r\n\r\n  let queryOptions = QueryOptions.resolve([query.queryOptions, em.queryOptions, QueryOptions.defaultInstance]);\r\n  let includeDeleted = queryOptions.includeDeleted === true;\r\n\r\n  let newFilterFunc = function (entity: Entity) {\r\n    return entity && (includeDeleted || !entity.entityAspect.entityState.isDeleted()) && (filterFunc ? filterFunc(entity) : true);\r\n  };\r\n\r\n  let result: any[] = [];\r\n  // TODO: mapMany\r\n  groups.forEach((group) => {\r\n    let entities = group._entities.filter(newFilterFunc) as Entity[];\r\n    if (entities.length) {\r\n      result = result.length ? result.concat(entities) : entities;\r\n    }\r\n  });\r\n\r\n  let orderByComparer = query.orderByClause && query.orderByClause.getComparer(entityType!);\r\n  if (orderByComparer) {\r\n    result.sort(orderByComparer);\r\n  }\r\n\r\n  let inlineCount = query.inlineCountEnabled ? result.length : undefined;\r\n\r\n  let skipCount = query.skipCount;\r\n  if (skipCount) {\r\n    result = result.slice(skipCount);\r\n  }\r\n  let takeCount = query.takeCount;\r\n  if (takeCount) {\r\n    result = result.slice(0, takeCount);\r\n  }\r\n\r\n  let selectClause = query.selectClause;\r\n  if (selectClause) {\r\n    let selectFn = selectClause.toFunction();\r\n    result = result.map(selectFn);\r\n  }\r\n  return { results: result, inlineCount: inlineCount };\r\n}\r\n\r\nfunction coHasOriginalValues(co: ComplexObject) {\r\n  // next line checks all non complex properties of the co.\r\n  if (!core.isEmpty(co.complexAspect.originalValues)) return true;\r\n  // now need to recursively check each of the cps\r\n  return co.complexType.complexProperties.some(function (cp) {\r\n    return cpHasOriginalValues(co, cp);\r\n  });\r\n}\r\n\r\nfunction getSerializerFn(stype: EntityType | ComplexType) {\r\n  return stype.serializerFn || (stype.metadataStore && stype.metadataStore.serializerFn);\r\n}\r\n\r\n","import { core } from './core';\r\nimport { assertConfig } from './assert-param';\r\nimport { config, InterfaceDef, BaseAdapter } from './config';\r\nimport { MappingContext } from './mapping-context';\r\nimport { EntityQuery } from './entity-query';\r\nimport { MetadataStore } from './entity-metadata';\r\nimport { JsonResultsAdapter, DataService } from './data-service';\r\nimport { Entity } from './entity-aspect';\r\nimport { SaveContext, SaveBundle, QueryResult, SaveResult, HttpResponse } from './entity-manager';\r\n\r\nexport interface InterfaceRegistryConfig {\r\n    ajax?: InterfaceDef<AjaxAdapter>;\r\n    modelLibrary?: InterfaceDef<ModelLibraryAdapter>;\r\n    dataService?: InterfaceDef<DataServiceAdapter>;\r\n    uriBuilder?: InterfaceDef<UriBuilderAdapter>;\r\n}\r\n\r\nexport class InterfaceRegistry {\r\n    ajax = new InterfaceDef<AjaxAdapter>(\"ajax\");\r\n    modelLibrary = new InterfaceDef<ModelLibraryAdapter>(\"modelLibrary\");\r\n    dataService = new InterfaceDef<DataServiceAdapter>(\"dataService\");\r\n    uriBuilder = new InterfaceDef<UriBuilderAdapter>(\"uriBuilder\");\r\n}\r\n\r\n// This module describes the interfaceRegistry by extending config\r\n/** @hidden @internal */\r\ndeclare module \"./config\" {\r\n    interface BreezeConfig {\r\n        /**\r\n        Initializes a collection of adapter implementations and makes each one the default for its corresponding interface.\r\n        @method initializeAdapterInstances\r\n        @param config {Object}\r\n        @param [config.ajax] {String} - the name of a previously registered \"ajax\" adapter\r\n        @param [config.dataService] {String} - the name of a previously registered \"dataService\" adapter\r\n        @param [config.modelLibrary] {String} - the name of a previously registered \"modelLibrary\" adapter\r\n        @param [config.uriBuilder] {String} - the name of a previously registered \"uriBuilder\" adapter\r\n        @return [array of instances]\r\n        **/\r\n        initializeAdapterInstances(irConfig: InterfaceRegistryConfig): void;\r\n\r\n        // strongly typed version\r\n        interfaceRegistry: InterfaceRegistry;\r\n    }\r\n}\r\n\r\nconfig.interfaceRegistry = new InterfaceRegistry();\r\nconfig._interfaceRegistry = config.interfaceRegistry;\r\nconfig.interfaceRegistry.modelLibrary.getDefaultInstance = function() {\r\n    if (!this.defaultInstance) {\r\n        throw new Error(\"Unable to locate the default implementation of the '\" + this.name +\r\n            \"' interface.  Possible options are 'ko', 'backingStore' or 'backbone'. See the breeze.config.initializeAdapterInstances method.\");\r\n    }\r\n    return this.defaultInstance;\r\n};\r\n\r\n/**\r\nInitializes a collection of adapter implementations and makes each one the default for its corresponding interface.\r\n@method initializeAdapterInstances\r\n@param config {Object}\r\n@param [config.ajax] {String} - the name of a previously registered \"ajax\" adapter\r\n@param [config.dataService] {String} - the name of a previously registered \"dataService\" adapter\r\n@param [config.modelLibrary] {String} - the name of a previously registered \"modelLibrary\" adapter\r\n@param [config.uriBuilder] {String} - the name of a previously registered \"uriBuilder\" adapter\r\n@return [array of instances]\r\n**/\r\nconfig.initializeAdapterInstances = function (irConfig: InterfaceRegistryConfig) {\r\n    assertConfig(irConfig)\r\n        .whereParam(\"dataService\").isOptional()\r\n        .whereParam(\"modelLibrary\").isOptional()\r\n        .whereParam(\"ajax\").isOptional()\r\n        .whereParam(\"uriBuilder\").isOptional()\r\n        .applyAll(this, false);\r\n    return core.objectMap(config, this.initializeAdapterInstance);\r\n};\r\n\r\n/** DataServiceAdapter Ajax request configuration */\r\nexport interface AjaxConfig {\r\n    url: string;\r\n    type?: string;\r\n    dataType?: string;\r\n    contentType?: string;\r\n    crossDomain?: string | boolean;\r\n    headers?: {};\r\n    data?: any;\r\n    params?: {};\r\n    success: (res: HttpResponse) => void;\r\n    error: (res: (HttpResponse | Error)) => void;\r\n}\r\n\r\nexport interface AjaxAdapter extends BaseAdapter {\r\n    ajax(config: AjaxConfig): void;\r\n}\r\n\r\nexport interface ModelLibraryAdapter extends BaseAdapter {\r\n    getTrackablePropertyNames: (entity: any) => string[];\r\n    initializeEntityPrototype(proto: Object): void;\r\n    startTracking(entity: any, entityCtor: Function): void;\r\n    createCtor?: Function;\r\n}\r\n\r\nexport interface DataServiceAdapter extends BaseAdapter {\r\n    fetchMetadata(metadataStore: MetadataStore, dataService: DataService): Promise<any>;  // result of Promise is either rawMetadata or a string explaining why not.\r\n    executeQuery(mappingContext: MappingContext): Promise<QueryResult>;   // result of executeQuery will get passed to JsonResultsAdapter extractResults method\r\n    saveChanges(saveContext: SaveContext, saveBundle: SaveBundle): Promise<SaveResult>;\r\n    changeRequestInterceptor: ChangeRequestInterceptorCtor;\r\n    jsonResultsAdapter: JsonResultsAdapter;\r\n}\r\n\r\n\r\n\r\nexport interface UriBuilderAdapter extends BaseAdapter {\r\n    buildUri(query: EntityQuery, metadataStore: MetadataStore): string;\r\n}\r\n\r\n// -----------------------------------\r\n\r\nexport interface ChangeRequestInterceptorCtor {\r\n    new (saveContext: SaveContext, saveBundle: SaveBundle): ChangeRequestInterceptor;\r\n}\r\n\r\nexport interface ChangeRequestInterceptor {\r\n    oneTime?: boolean;\r\n    /**\r\n     Prepare and return the save data for an entity change-set.\r\n  \r\n     The adapter calls this method for each entity in the change-set,\r\n     after it has prepared a \"change request\" for that object.\r\n  \r\n     The method can do anything to the request but it must return a valid, non-null request.\r\n     @example\r\n     this.getRequest = function (request, entity, index) {\r\n            // alter the request that the adapter prepared for this entity\r\n            // based on the entity, saveContext, and saveBundle\r\n            // e.g., add a custom header or prune the originalValuesMap\r\n            return request;\r\n        };\r\n     @method getRequest\r\n     @param request {Object} The object representing the adapter's request to save this entity.\r\n     @param entity {Entity} The entity-to-be-save as it is in cache\r\n     @param index {Integer} The zero-based index of this entity in the change-set array\r\n     @return {Function} The potentially revised request.\r\n     **/\r\n    getRequest(request: any, entity: Entity, index: number): any;\r\n\r\n    /**\r\n     Last chance to change anything about the 'requests' array\r\n     after it has been built with requests for all of the entities-to-be-saved.\r\n  \r\n     The 'requests' array is the same as 'saveBundle.entities' in many implementations\r\n  \r\n     This method can do anything to the array including add and remove requests.\r\n     It's up to you to ensure that server will accept the requests array data as valid.\r\n  \r\n     Returned value is ignored.\r\n     @example\r\n     this.done = function (requests) {\r\n            // alter the array of requests representing the entire change-set\r\n            // based on the saveContext and saveBundle\r\n        };\r\n     @method done\r\n     @param requests {Array of Object} The adapter's array of request for this changeset.\r\n     **/\r\n    done(requests: Object[]): void;\r\n}","import { core } from './core';\r\nimport { BreezeEvent } from './event';\r\nimport { EntityAspect } from './entity-aspect';\r\nimport { DataProperty } from './entity-metadata';\r\n\r\n/** @hidden */\r\nexport interface ObservableArray {\r\n  push: (...args: any[]) => number;\r\n  _push: (...args: any[]) => number;\r\n  unshift: (...args: any[]) =>  number;\r\n  pop: () => any;\r\n  shift: () => any;\r\n  splice: (...args: any[]) => any[];\r\n  slice: (a: number, b?: number) => any[]; // implemented on the native array\r\n  length: number;\r\n  \r\n  getEntityAspect: () => EntityAspect;\r\n  arrayChanged: BreezeEvent<ArrayChangedArgs>;\r\n  parent?: Object;\r\n  parentProperty?: DataProperty;\r\n  _getEventParent: () => Object;\r\n  _getPendingPubs: () => any[]; // TODO: Pub[]\r\n  _beforeChange: () => void;\r\n  _processAdds(items: any[]): void;\r\n  _processRemoves(items: any[]): void;\r\n  _origValues: any[];\r\n  _pendingArgs: any;\r\n}\r\n\r\nexport interface ArrayChangedArgs {\r\n  array: any[];\r\n  added?: any[]; \r\n  removed?: any[];\r\n}\r\n\r\nlet mixin = {\r\n  push: function(...args: any[]) {\r\n    if (this._inProgress) {\r\n      return -1;\r\n    }\r\n\r\n    let goodAdds = this._getGoodAdds(args);\r\n    if (!goodAdds.length) {\r\n      return this.length;\r\n    }\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.push) {\r\n        result = objPrototype.push.apply(this, goodAdds);\r\n    } else {\r\n        result = Array.prototype.push.apply(this, goodAdds);\r\n    }\r\n    processAdds(this, goodAdds);\r\n    return result;\r\n  },\r\n\r\n  _push: function(...args: any[]) {\r\n    if (this._inProgress) {\r\n      return -1;\r\n    }\r\n    let goodAdds = args;\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.push) {\r\n        result = objPrototype.push.apply(this, goodAdds);\r\n    } else {\r\n        result = Array.prototype.push.apply(this, goodAdds);\r\n    }\r\n    processAdds(this, goodAdds);\r\n    return result;\r\n  },\r\n\r\n  unshift: function(...args: any[]) {\r\n    let goodAdds = this._getGoodAdds(args);\r\n    if (!goodAdds.length) {\r\n      return this.length;\r\n    }\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.unshift) {\r\n        result = objPrototype.unshift.apply(this, goodAdds);\r\n    } else {\r\n        result = Array.prototype.unshift.apply(this, goodAdds);\r\n    }\r\n    processAdds(this, goodAdds);\r\n    return result;\r\n  },\r\n\r\n  pop: function() {\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.pop) {\r\n        result = objPrototype.pop.apply(this);\r\n    } else {\r\n        result = Array.prototype.pop.apply(this);\r\n    }\r\n    processRemoves(this, [result]);\r\n    return result;\r\n  },\r\n\r\n  shift: function() {\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.shift) {\r\n        result = objPrototype.shift.apply(this);\r\n    } else {\r\n        result = Array.prototype.shift.apply(this);\r\n    }    \r\n    processRemoves(this, [result]);\r\n    return result;\r\n  },\r\n\r\n  splice: function(...args: any[]) {\r\n    let goodAdds = this._getGoodAdds(core.arraySlice(args, 2));\r\n    let newArgs = core.arraySlice(args, 0, 2).concat(goodAdds);\r\n    this._beforeChange();\r\n    let result;\r\n    let objPrototype = Object.getPrototypeOf(this);\r\n    if (objPrototype.splice) {\r\n        result = objPrototype.splice.apply(this, newArgs);\r\n    } else {\r\n        result = Array.prototype.splice.apply(this, newArgs);\r\n    }\r\n    processRemoves(this, result);\r\n\r\n    if (goodAdds.length) {\r\n      processAdds(this, goodAdds);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  getEntityAspect: function() {\r\n    return this.parent.entityAspect || this.parent.complexAspect.getEntityAspect();\r\n  },\r\n\r\n  _getEventParent: function() {\r\n    return this.getEntityAspect();\r\n  },\r\n\r\n  _getPendingPubs: function () {\r\n    let em = this.getEntityAspect().entityManager;\r\n    return em && em._pendingPubs;\r\n  },\r\n\r\n  _beforeChange:  function () {\r\n    // default is to do nothing\r\n  }\r\n};\r\n\r\nfunction updateEntityState(obsArray: ObservableArray) {\r\n  let entityAspect = obsArray.getEntityAspect();\r\n  if (entityAspect.entityState.isUnchanged()) {\r\n    entityAspect.setModified();\r\n  }\r\n  if (entityAspect.entityState.isModified() && !obsArray._origValues) {\r\n    obsArray._origValues = obsArray.slice(0);\r\n  }\r\n}\r\n\r\nfunction publish(publisher: ObservableArray, eventName: string, eventArgs: any) {\r\n  let pendingPubs = publisher._getPendingPubs();\r\n  if (pendingPubs) {\r\n    if (!publisher._pendingArgs) {\r\n      publisher._pendingArgs = eventArgs;\r\n      pendingPubs.push(function () {\r\n        publisher[eventName].publish(publisher._pendingArgs);\r\n        publisher._pendingArgs = null;\r\n      });\r\n    } else {\r\n      combineArgs(publisher._pendingArgs, eventArgs);\r\n    }\r\n  } else {\r\n    publisher[eventName].publish(eventArgs);\r\n  }\r\n}\r\n\r\nfunction initializeParent(obsArray: any, parent: Object, parentProperty: DataProperty) {\r\n  obsArray.parent = parent;\r\n  obsArray.parentProperty = parentProperty;\r\n}\r\n\r\nfunction processAdds(obsArray: ObservableArray, adds: any[]) {\r\n  obsArray._processAdds(adds);\r\n  // this is referencing the name of the method on the complexArray not the name of the event\r\n  //var args = { added: adds };\r\n  //args[obsArray._typeName] = obsArray;\r\n  publish(obsArray, \"arrayChanged\", { array: obsArray, added: adds });\r\n}\r\n\r\nfunction processRemoves(obsArray: ObservableArray, removes: any[]) {\r\n  obsArray._processRemoves(removes);\r\n  // this is referencing the name of the method on the array not the name of the event\r\n  publish(obsArray, \"arrayChanged\", { array: obsArray, removed: removes });\r\n}\r\n\r\n// TODO: see if this function already exists in core and can be imported.\r\nfunction combineArgs(target: Object, source: Object) {\r\n  for (let key in source) {\r\n    if (key !== \"array\" && target.hasOwnProperty(key)) {\r\n      let sourceValue = source[key];\r\n      let targetValue = target[key];\r\n      if (targetValue) {\r\n        if (!Array.isArray(targetValue)) {\r\n          throw new Error(\"Cannot combine non array args\");\r\n        }\r\n        Array.prototype.push.apply(targetValue, sourceValue);\r\n      } else {\r\n        target[key] = sourceValue;\r\n      }\r\n    }\r\n  }\r\n}\r\n/** @hidden @internal */\r\nexport const observableArray = {\r\n  mixin: mixin,\r\n  updateEntityState: updateEntityState,\r\n  publish: publish,\r\n  initializeParent: initializeParent\r\n};\r\n","import { core, Callback, ErrorCallback } from './core';\r\nimport { ObservableArray, observableArray } from './observable-array';\r\nimport { BreezeEvent } from './event';\r\nimport { Entity  } from './entity-aspect';\r\nimport { DataProperty, NavigationProperty } from './entity-metadata';\r\nimport { EntityState } from './entity-state';\r\nimport { EntityQuery } from './entity-query';\r\nimport { QuerySuccessCallback, QueryErrorCallback, QueryResult } from './entity-manager';\r\n\r\n// TODO: mixin impl is not very typesafe\r\n\r\nexport interface RelationArray extends ObservableArray {\r\n  [index: number]: Entity;\r\n  parentEntity: Entity;\r\n  parentProperty?: DataProperty;\r\n  navigationProperty: NavigationProperty;\r\n  _inProgress?: boolean;\r\n  _addsInProcess: Entity[];\r\n  load(querySuccessCallback?: QuerySuccessCallback, queryErrorCallback?: QueryErrorCallback): Promise<QueryResult>; \r\n}\r\n\r\nlet relationArrayMixin = {\r\n\r\n  /**\r\n  Relation arrays are not actually classes, they are objects that mimic arrays. A relation array is collection of\r\n  entities associated with a navigation property on a single entity. i.e. customer.orders or order.orderDetails.\r\n  This collection looks like an array in that the basic methods on arrays such as 'push', 'pop', 'shift', 'unshift', 'splice'\r\n  are all provided as well as several special purpose methods.\r\n  @class {relationArray}\r\n  **/\r\n\r\n  /**\r\n  An [[Event]] that fires whenever the contents of this array changed.  This event\r\n  is fired any time a new entity is attached or added to the EntityManager and happens to belong to this collection.\r\n  Adds that occur as a result of query or import operations are batched so that all of the adds or removes to any individual\r\n  collections are collected into a single notification event for each relation array.\r\n  @example\r\n      // assume order is an order entity attached to an EntityManager.\r\n      orders.arrayChanged.subscribe(\r\n      function (arrayChangedArgs) {\r\n          let addedEntities = arrayChangedArgs.added;\r\n          let removedEntities = arrayChanged.removed;\r\n      });\r\n  @event arrayChanged\r\n  @param added {Array of Entity} An array of all of the entities added to this collection.\r\n  @param removed {Array of Entity} An array of all of the removed from this collection.\r\n  @readOnly\r\n  **/\r\n\r\n\r\n  /**\r\n  Performs an asynchronous load of all other the entities associated with this relationArray.\r\n  @example\r\n      // assume orders is an empty, as yet unpopulated, relation array of orders\r\n      // associated with a specific customer.\r\n      orders.load().then(...)\r\n  @method load\r\n  @param [callback] {Function}\r\n  @param [errorCallback] {Function}\r\n  @return {Promise}\r\n  **/\r\n  load: function(callback?: QuerySuccessCallback, errorCallback?: QueryErrorCallback): Promise<QueryResult> {\r\n    let parent = this.parentEntity;\r\n    let query = EntityQuery.fromEntityNavigation(this.parentEntity, this.navigationProperty);\r\n    let em = parent.entityAspect.entityManager;\r\n    return em.executeQuery(query, callback, errorCallback);\r\n  },\r\n\r\n  _getEventParent: function() {\r\n    return this.parentEntity.entityAspect;\r\n  },\r\n\r\n  _getPendingPubs: function() {\r\n    let em = this.parentEntity.entityAspect.entityManager;\r\n    return em && em._pendingPubs;\r\n  },\r\n\r\n  // virtual impls\r\n  _getGoodAdds: function(adds: Entity[]) {\r\n    return getGoodAdds(this, adds);\r\n  },\r\n\r\n  _processAdds: function(adds: Entity[]) {\r\n    processAdds(this, adds);\r\n  },\r\n\r\n  _processRemoves: function(removes: Entity[]) {\r\n    processRemoves(this, removes);\r\n  }\r\n\r\n};\r\n\r\nfunction getGoodAdds(relationArray: RelationArray, adds: Entity[]) {\r\n  let goodAdds = checkForDups(relationArray, adds);\r\n  if (!goodAdds.length) {\r\n    return goodAdds;\r\n  }\r\n  let parentEntity = relationArray.parentEntity;\r\n  let entityManager = parentEntity.entityAspect.entityManager;\r\n  // we do not want to attach an entity during loading\r\n  // because these will all be 'attached' at a later step.\r\n  if (entityManager && !entityManager.isLoading) {\r\n    goodAdds.forEach(function (add) {\r\n      if (add.entityAspect.entityState.isDetached()) {\r\n        relationArray._inProgress = true;\r\n        try {\r\n          entityManager!.attachEntity(add, EntityState.Added);\r\n        } finally {\r\n          relationArray._inProgress = false;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  return goodAdds;\r\n}\r\n\r\nfunction processAdds(relationArray: RelationArray, adds: Entity[]) {\r\n  let parentEntity = relationArray.parentEntity;\r\n  let np = relationArray.navigationProperty;\r\n  let addsInProcess = relationArray._addsInProcess;\r\n\r\n  let invNp = np.inverse;\r\n  let startIx = addsInProcess.length;\r\n  try {\r\n    adds.forEach(function (childEntity) {\r\n      addsInProcess.push(childEntity);\r\n      if (invNp) {\r\n        childEntity.setProperty(invNp.name, parentEntity);\r\n      } else {\r\n        // This occurs with a unidirectional 1-n navigation - in this case\r\n        // we need to update the fks instead of the navProp\r\n        let pks = parentEntity.entityType.keyProperties;\r\n        np.invForeignKeyNames.forEach(function (fk, i) {\r\n          childEntity.setProperty(fk, parentEntity.getProperty(pks[i].name));\r\n        });\r\n      }\r\n    });\r\n  } finally {\r\n    addsInProcess.splice(startIx, adds.length);\r\n  }\r\n\r\n}\r\n\r\nfunction processRemoves(relationArray: RelationArray, removes: Entity[]) {\r\n  let inp = relationArray.navigationProperty.inverse;\r\n  if (inp) {\r\n    removes.forEach(function (childEntity) {\r\n      childEntity.setProperty(inp!.name, null);\r\n    });\r\n  }\r\n}\r\n\r\nfunction checkForDups(relationArray: RelationArray, adds: Entity[]) {\r\n  // don't allow dups in this array. - also prevents recursion\r\n  let parentEntity = relationArray.parentEntity;\r\n  let navProp = relationArray.navigationProperty;\r\n  let inverseProp = navProp.inverse;\r\n  let goodAdds: Entity[];\r\n  if (inverseProp) {\r\n    goodAdds = adds.filter(function (a) {\r\n      if (relationArray._addsInProcess.indexOf(a) >= 0) {\r\n        return false;\r\n      }\r\n      let inverseValue = a.getProperty(inverseProp!.name);\r\n      return inverseValue !== parentEntity;\r\n    });\r\n  } else {\r\n    // This occurs with a unidirectional 1->N relation ( where there is no n -> 1)\r\n    // in this case we compare fks.\r\n    let fkPropNames = navProp.invForeignKeyNames;\r\n    let keyProps = parentEntity.entityType.keyProperties;\r\n    goodAdds = adds.filter(function (a) {\r\n      if (relationArray._addsInProcess.indexOf(a) >= 0) {\r\n        return false;\r\n      }\r\n      return fkPropNames.some(function (fk, i) {\r\n        let keyProp = keyProps[i].name;\r\n        let keyVal = parentEntity.getProperty(keyProp);\r\n        let fkVal = a.getProperty(fk);\r\n        return keyVal !== fkVal;\r\n      });\r\n    });\r\n  }\r\n  return goodAdds;\r\n}\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IModelLibraryAdapter]] implementation. \r\n@adapter (see [[IModelLibraryAdapter]])    \r\n@hidden \r\n*/\r\nexport function makeRelationArray(arr: any[], parentEntity: Entity, navigationProperty: NavigationProperty): RelationArray {\r\n  let arrX = arr as any;\r\n  arrX.parentEntity = parentEntity;\r\n  arrX.navigationProperty = navigationProperty;\r\n  arrX.arrayChanged = new BreezeEvent(\"arrayChanged\", arrX);\r\n  // array of pushes currently in process on this relation array - used to prevent recursion.\r\n  arrX._addsInProcess = [];\r\n  // need to use mixins here instead of inheritance because we are starting from an existing array object.\r\n  core.extend(arrX, observableArray.mixin);\r\n  return core.extend(arrX, relationArrayMixin) as RelationArray;\r\n}\r\n","import { core  } from './core';\r\nimport { ObservableArray, observableArray } from './observable-array';\r\nimport { BreezeEvent } from './event';\r\nimport { ComplexObject, StructuralObject } from './entity-aspect';\r\nimport { DataProperty } from './entity-metadata';\r\n\r\n// TODO: mixin impl is not very typesafe\r\n\r\nexport interface ComplexArray extends ObservableArray {\r\n  [index: number]: ComplexObject;\r\n  parent?: StructuralObject;\r\n  parentProperty?: DataProperty;\r\n}\r\n\r\nlet complexArrayMixin = {\r\n\r\n  // complexArray will have the following props\r\n  //    parent\r\n  //    propertyPath\r\n  //    parentProperty\r\n  //    addedItems  - only if modified\r\n  //    removedItems  - only if modified\r\n  //  each complexAspect of any entity within a complexArray\r\n  //  will have its own _complexState = \"A/M\";\r\n\r\n  /**\r\n   Complex arrays are not actually classes, they are objects that mimic arrays. A complex array is collection of\r\n   complexTypes associated with a data property on a single entity or other complex object. i.e. customer.orders or order.orderDetails.\r\n   This collection looks like an array in that the basic methods on arrays such as 'push', 'pop', 'shift', 'unshift', 'splice'\r\n   are all provided as well as several special purpose methods.\r\n   @class {complexArray}\r\n   **/\r\n\r\n  /**\r\n  An [[Event]] that fires whenever the contents of this array changed.  This event\r\n  is fired any time a new entity is attached or added to the EntityManager and happens to belong to this collection.\r\n  Adds that occur as a result of query or import operations are batched so that all of the adds or removes to any individual\r\n  collections are collected into a single notification event for each relation array.\r\n  @example\r\n      // assume order is an order entity attached to an EntityManager.\r\n      orders.arrayChanged.subscribe(\r\n      function (arrayChangedArgs) {\r\n          var addedEntities = arrayChangedArgs.added;\r\n          var removedEntities = arrayChanged.removed;\r\n      });\r\n  @event arrayChanged\r\n  @param added {Array of Entity} An array of all of the entities added to this collection.\r\n  @param removed {Array of Entity} An array of all of the removed from this collection.\r\n  @readOnly\r\n  **/\r\n\r\n    // virtual impls\r\n  _getGoodAdds: function(adds: any[]) {\r\n    return getGoodAdds(this, adds);\r\n  },\r\n\r\n  _beforeChange: function() {\r\n    observableArray.updateEntityState(this);\r\n  },\r\n\r\n  _processAdds: function(adds: any[]) {\r\n    processAdds(this, adds);\r\n  },\r\n\r\n  _processRemoves: function(removes: any[]) {\r\n    processRemoves(this, removes);\r\n  },\r\n\r\n  _rejectChanges: function() {\r\n    if (!this._origValues) return;\r\n    let that = this;\r\n    this.forEach(function (co: ComplexObject) {\r\n      clearAspect(co, that);\r\n    });\r\n    this.length = 0;\r\n    this._origValues.forEach(function (co: ComplexObject) {\r\n      that.push(co);\r\n    });\r\n  },\r\n\r\n  _acceptChanges: function() {\r\n    this._origValues = null;\r\n  }\r\n};\r\n\r\n// local functions\r\n\r\n\r\nfunction getGoodAdds(complexArray: ComplexArray, adds: ComplexObject[]) {\r\n  // remove any that are already added here\r\n  return adds.filter(function (a) {\r\n    // return a.parent !== complexArray.parent;  // TODO: check if this is actually a bug in original breezejs ???\r\n    return a.complexAspect == null || a.complexAspect.parent !== complexArray.parent;\r\n  });\r\n}\r\n\r\nfunction processAdds(complexArray: ComplexArray, adds: ComplexObject[]) {\r\n  adds.forEach(function (a) {\r\n    // if (a.parent != null) { // TODO: check if this is actually a bug in original breezejs ???\r\n    if (a.complexAspect && a.complexAspect.parent != null) {\r\n      throw new Error(\"The complexObject is already attached. Either clone it or remove it from its current owner\");\r\n    }\r\n    setAspect(a, complexArray);\r\n  });\r\n}\r\n\r\nfunction processRemoves(complexArray: ComplexArray, removes: ComplexObject[]) {\r\n  removes.forEach(function (a) {\r\n    clearAspect(a, complexArray);\r\n  });\r\n}\r\n\r\nfunction clearAspect(co: ComplexObject, arr: ComplexArray) {\r\n  let coAspect = co.complexAspect;\r\n  // if not already attached - exit\r\n  if (coAspect.parent !== arr.parent) return null;\r\n\r\n  coAspect.parent = undefined;\r\n  coAspect.parentProperty = undefined;\r\n  return coAspect;\r\n}\r\n\r\nfunction setAspect(co: ComplexObject, arr: ComplexArray) {\r\n  let coAspect = co.complexAspect;\r\n  // if already attached - exit\r\n  if (coAspect.parent === arr.parent) return null;\r\n  coAspect.parent = arr.parent;\r\n  coAspect.parentProperty = arr.parentProperty;\r\n\r\n  return coAspect;\r\n}\r\n\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IModelLibraryAdapter]] implementation. \r\n@adapter (see [[IModelLibraryAdapter]])    \r\n@hidden \r\n*/\r\nexport function makeComplexArray(arr: any[], parent: StructuralObject, parentProperty: DataProperty) {\r\n  let arrX = arr as any;\r\n  observableArray.initializeParent(arrX, parent, parentProperty);\r\n  arrX.arrayChanged = new BreezeEvent(\"arrayChanged\", arrX);\r\n  core.extend(arrX, observableArray.mixin);\r\n  return core.extend(arrX, complexArrayMixin) as ComplexArray;\r\n}\r\n\r\n","import { core  } from './core';\r\nimport { observableArray } from './observable-array';\r\nimport { BreezeEvent } from './event';\r\nimport { StructuralObject } from './entity-aspect';\r\nimport { DataProperty } from './entity-metadata';\r\n\r\n// TODO: mixin impl is not very typesafe\r\n\r\n// Not needed\r\n// interface IPrimitiveArray extends IObservableArray {\r\n//   [index: number]: any;\r\n//   parent?: IStructuralObject;\r\n//   parentProperty?: DataProperty;\r\n// }\r\n\r\nlet primitiveArrayMixin = {\r\n\r\n  // complexArray will have the following props\r\n  //    parent\r\n  //    propertyPath\r\n  //    parentProperty\r\n  //    addedItems  - only if modified\r\n  //    removedItems  - only if modified\r\n  //  each complexAspect of any entity within a complexArray\r\n  //  will have its own _complexState = \"A/M\";\r\n\r\n  /**\r\n  Primitive arrays are not actually classes, they are objects that mimic arrays. A primitive array is collection of\r\n  primitive types associated with a data property on a single entity or complex object. i.e. customer.invoiceNumbers.\r\n  This collection looks like an array in that the basic methods on arrays such as 'push', 'pop', 'shift', 'unshift', 'splice'\r\n  are all provided as well as several special purpose methods.\r\n  @class {primitiveArray}\r\n  **/\r\n\r\n  /**\r\n  An [[Event]] that fires whenever the contents of this array changed.  This event\r\n  is fired any time a new entity is attached or added to the EntityManager and happens to belong to this collection.\r\n  Adds that occur as a result of query or import operations are batched so that all of the adds or removes to any individual\r\n  collections are collected into a single notification event for each relation array.\r\n  @example\r\n      // assume order is an order entity attached to an EntityManager.\r\n      orders.arrayChanged.subscribe(\r\n      function (arrayChangedArgs) {\r\n          let addedEntities = arrayChangedArgs.added;\r\n          let removedEntities = arrayChanged.removed;\r\n      });\r\n  @event arrayChanged\r\n  @param added {Array of Primitives} An array of all of the items added to this collection.\r\n  @param removed {Array of Primitives} An array of all of the items removed from this collection.\r\n  @readOnly\r\n  **/\r\n\r\n    // virtual impls\r\n  _getGoodAdds:  function(adds: any[]) {\r\n    return adds;\r\n  },\r\n\r\n  _beforeChange: function() {\r\n    let entityAspect = this.getEntityAspect();\r\n    if (entityAspect.entityState.isUnchanged()) {\r\n      entityAspect.setModified();\r\n    }\r\n    if (entityAspect.entityState.isModified() && !this._origValues) {\r\n      this._origValues = this.slice(0);\r\n    }\r\n  },\r\n\r\n  _processAdds: function(adds: any[]) {\r\n    // nothing needed\r\n  },\r\n\r\n  _processRemoves: function(removes: any[]) {\r\n    // nothing needed;\r\n  },\r\n\r\n\r\n  _rejectChanges: function() {\r\n    if (!this._origValues) return;\r\n    this.length = 0;\r\n    Array.prototype.push.apply(this, this._origValues);\r\n  },\r\n\r\n  _acceptChanges: function() {\r\n    this._origValues = null;\r\n  }\r\n};\r\n  // local functions\r\n\r\n/** For use by breeze plugin authors only. The class is for use in building a [[IModelLibraryAdapter]] implementation. \r\n@adapter (see [[IModelLibraryAdapter]])    \r\n@hidden \r\n*/\r\nexport function makePrimitiveArray(arr: any[], parent: StructuralObject, parentProperty: DataProperty) {\r\n  let arrX = arr as any;\r\n  observableArray.initializeParent(arrX, parent, parentProperty);\r\n  arrX.arrayChanged = new BreezeEvent(\"arrayChanged\", arrX);\r\n  core.extend(arrX, observableArray.mixin);\r\n  return core.extend(arrX, primitiveArrayMixin);\r\n}\r\n\r\n\r\n","\r\nimport { AbstractDataServiceAdapter} from './abstract-data-service-adapter';\r\nimport { assertParam, assertConfig, Param, IConfigParam} from './assert-param';\r\nimport { BreezeConfig } from './config';\r\nimport { BreezeEnum} from './enum';\r\nimport { BreezeEvent } from './event';\r\nimport { ComplexArray } from './complex-array';\r\nimport { DataService, DataServiceConfig, JsonResultsAdapter, JsonResultsAdapterConfig, NodeContext, NodeMeta } from './data-service';\r\nimport { DataType  } from './data-type';\r\nimport { EntityAction } from './entity-action';\r\nimport { EntityAspect, ComplexAspect, Entity, StructuralObject, PropertyChangedEventArgs } from './entity-aspect';\r\nimport { EntityKey } from './entity-key';\r\nimport { EntityManager, EntityManagerConfig, EntityError, EntityChangedEventArgs, SaveContext, SaveBundle, HttpResponse, KeyMapping, ServerError, SaveResult, QueryResult, ValidationErrorsChangedEventArgs, HasChangesChangedEventArgs } from './entity-manager';\r\nimport { EntityQuery, FilterQueryOp, BooleanQueryOp, OrderByClause, ExpandClause, SelectClause } from './entity-query';\r\nimport { EntityState } from './entity-state';\r\nimport { InterfaceRegistry, AjaxAdapter, AjaxConfig, DataServiceAdapter, ModelLibraryAdapter, ChangeRequestInterceptor, UriBuilderAdapter, InterfaceRegistryConfig } from './interface-registry';\r\nimport { KeyGenerator } from './key-generator';\r\nimport { LocalQueryComparisonOptions } from './local-query-comparison-options';\r\nimport { MappingContext } from './mapping-context';\r\nimport { MetadataStore, EntityType, ComplexType, StructuralType, DataProperty, EntityProperty, NavigationProperty, AutoGeneratedKeyType   } from './entity-metadata';\r\nimport { NamingConvention } from './naming-convention';\r\nimport { Predicate, VisitContext, Visitor, ExpressionContext, UnaryPredicate, BinaryPredicate, AnyAllPredicate, AndOrPredicate, LitExpr, FnExpr, PropExpr } from './predicate';\r\nimport { QueryOptions,  FetchStrategy, MergeStrategy } from './query-options';\r\nimport { SaveOptions } from './save-options';\r\nimport { ValidationError, Validator } from './validate';\r\nimport { ValidationOptions } from './validation-options';\r\n\r\nimport { config, BaseAdapter } from './config';\r\nimport { core } from './core';\r\nimport { makeRelationArray, makePrimitiveArray, makeComplexArray } from './array';\r\n\r\nimport { RelationArray } from './relation-array';\r\nimport { ArrayChangedArgs } from './observable-array';\r\nexport { BreezeConfig, ComplexArray, RelationArray };\r\n\r\nexport {\r\n  // Param,\r\n  AbstractDataServiceAdapter,\r\n  AjaxAdapter,\r\n  AjaxConfig,\r\n  AndOrPredicate,\r\n  AnyAllPredicate,\r\n  ArrayChangedArgs,\r\n  assertConfig,\r\n  assertParam,\r\n  AutoGeneratedKeyType,\r\n  BaseAdapter,\r\n  BinaryPredicate,\r\n  BreezeEnum,\r\n  BreezeEvent, \r\n  ChangeRequestInterceptor,\r\n  ComplexAspect,\r\n  ComplexType,\r\n  config,\r\n  core,\r\n  DataProperty,\r\n  DataService,\r\n  DataServiceAdapter,\r\n  DataServiceConfig,\r\n  DataType,\r\n  Entity,\r\n  EntityAction,\r\n  EntityAspect,\r\n  EntityChangedEventArgs,\r\n  EntityError,\r\n  EntityKey,\r\n  EntityManager,\r\n  EntityManagerConfig,\r\n  EntityProperty,\r\n  EntityQuery,\r\n  EntityState,\r\n  EntityType,\r\n  ExpandClause,\r\n  ExpressionContext,\r\n  FetchStrategy,\r\n  FilterQueryOp,\r\n  FnExpr,\r\n  HasChangesChangedEventArgs,\r\n  HttpResponse,\r\n  InterfaceRegistry,\r\n  InterfaceRegistryConfig,\r\n  JsonResultsAdapter,\r\n  JsonResultsAdapterConfig,\r\n  KeyGenerator,\r\n  KeyMapping,\r\n  LitExpr,\r\n  LocalQueryComparisonOptions,\r\n  makeComplexArray,\r\n  makePrimitiveArray,\r\n  makeRelationArray,\r\n  MappingContext,\r\n  MergeStrategy,\r\n  MetadataStore,\r\n  ModelLibraryAdapter,\r\n  NamingConvention,\r\n  NavigationProperty,\r\n  NodeContext,\r\n  NodeMeta,\r\n  OrderByClause,\r\n  Predicate,\r\n  PropertyChangedEventArgs,\r\n  PropExpr,\r\n  QueryOptions,\r\n  QueryResult,\r\n  SaveBundle,\r\n  SaveContext,\r\n  SaveOptions,\r\n  SaveResult,\r\n  SelectClause,\r\n  ServerError,\r\n  StructuralObject,\r\n  StructuralType,\r\n  UnaryPredicate,\r\n  UriBuilderAdapter,\r\n  ValidationErrorsChangedEventArgs,\r\n  ValidationError,\r\n  ValidationOptions,\r\n  Validator,\r\n  VisitContext,\r\n  Visitor,\r\n};\r\n\r\n// create a breeze variable here\r\nexport const breeze = {\r\n  AbstractDataServiceAdapter: AbstractDataServiceAdapter,\r\n  assertConfig: null as any,\r\n  assertParam: null as any,\r\n  AutoGeneratedKeyType: AutoGeneratedKeyType,\r\n  BooleanQueryOp: BooleanQueryOp,\r\n  ComplexAspect: ComplexAspect,\r\n  ComplexType: ComplexType,\r\n  config: config,\r\n  core: core,\r\n  DataProperty: DataProperty,\r\n  DataService: DataService,\r\n  DataType: DataType,\r\n  EntityAction: EntityAction,\r\n  EntityAspect: EntityAspect,\r\n  EntityKey: EntityKey,\r\n  EntityManager: EntityManager,\r\n  EntityQuery: EntityQuery,\r\n  EntityState: EntityState,\r\n  EntityType: EntityType,\r\n  Event: BreezeEvent,\r\n  FetchStrategy: FetchStrategy,\r\n  FilterQueryOp: FilterQueryOp,\r\n  InterfaceRegistry: InterfaceRegistry,\r\n  JsonResultsAdapter: JsonResultsAdapter,\r\n  KeyGenerator: KeyGenerator,\r\n  LocalQueryComparisonOptions: LocalQueryComparisonOptions,\r\n  makeComplexArray: makeComplexArray,\r\n  makePrimitiveArray: makePrimitiveArray,\r\n  makeRelationArray: makeRelationArray,\r\n  MergeStrategy: MergeStrategy,\r\n  MetadataStore: MetadataStore,\r\n  NamingConvention: NamingConvention,\r\n  NavigationProperty: NavigationProperty,\r\n  OrderByClause: OrderByClause, // for testing only\r\n  Predicate: Predicate,\r\n  QueryOptions: QueryOptions,\r\n  SaveOptions: SaveOptions,\r\n  ValidationError: ValidationError,\r\n  ValidationOptions: ValidationOptions,\r\n  Validator,\r\n  version: \"2.0.3\"\r\n};\r\n\r\n// breeze.assertConfig = assertConfig as any;\r\n// breeze.assertParam = assertParam as any;\r\n\r\n// no-op for backward compatibility with breeze-bridge2-angular\r\nexport namespace promises {\r\n  export interface IPromiseService {}\r\n}\r\n\r\n/** @hidden @internal */\r\ndeclare var window: any;\r\n\r\n/** @hidden @internal */\r\ndeclare var global: any;\r\n\r\n/** @hidden @internal */\r\nlet win: any;\r\ntry {\r\n  win = window ? window : (global ? global.window : undefined);\r\n} catch (e) {\r\n\r\n}\r\nif (win) {\r\n  win.breeze = breeze;\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {qualifyTypeName as ɵb} from './src/entity-metadata';\nexport {BooleanQueryOp as ɵc} from './src/entity-query';\nexport {PredicateExpression as ɵa} from './src/predicate';"],"names":["tslib_1.__extends","stringStartsWith","stringEndsWith","updateWithConfig","clearOriginalValues","processAdds","processRemoves","getGoodAdds"],"mappings":"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"}