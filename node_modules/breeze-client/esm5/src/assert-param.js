import { core } from './core';
/** @hidden @internal */
var Param = /** @class */ (function () {
    function Param(v, name) {
        /** @hidden @internal */
        this._applyOne = function (instance) {
            if (this.v !== undefined) {
                instance[this.name] = this.v;
            }
            else {
                if (this.defaultValue !== undefined) {
                    instance[this.name] = this.defaultValue;
                }
            }
        };
        this.MESSAGE_PREFIX = "The '%1' parameter ";
        this.v = v;
        this.name = name;
        this._contexts = [null];
    }
    Param.prototype.isObject = function () {
        return this.isTypeOf('object');
    };
    Param.prototype.isBoolean = function () {
        return this.isTypeOf('boolean');
    };
    Param.prototype.isString = function () {
        return this.isTypeOf('string');
    };
    Param.prototype.isNumber = function () {
        return this.isTypeOf('number');
    };
    Param.prototype.isFunction = function () {
        return this.isTypeOf('function');
    };
    Param.prototype.isNonEmptyString = function () {
        return addContext(this, {
            fn: isNonEmptyString,
            msg: "must be a nonEmpty string"
        });
    };
    Param.prototype.isTypeOf = function (typeName) {
        return addContext(this, {
            fn: isTypeOf,
            typeName: typeName,
            msg: "must be a '" + typeName + "'"
        });
    };
    Param.prototype.isInstanceOf = function (type, typeName) {
        typeName = typeName || type.prototype._$typeName;
        return addContext(this, {
            fn: isInstanceOf,
            type: type,
            typeName: typeName,
            msg: "must be an instance of '" + typeName + "'"
        });
    };
    Param.prototype.hasProperty = function (propertyName) {
        return addContext(this, {
            fn: hasProperty,
            propertyName: propertyName,
            msg: "must have a '" + propertyName + "' property"
        });
    };
    Param.prototype.isEnumOf = function (enumType) {
        return addContext(this, {
            fn: isEnumOf,
            enumType: enumType,
            msg: "must be an instance of the '" + (enumType.name || 'unknown') + "' enumeration"
        });
    };
    Param.prototype.isRequired = function (allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        return addContext(this, {
            fn: isRequired,
            allowNull: allowNull,
            msg: "is required"
        });
    };
    Param.prototype.isOptional = function () {
        var context = {
            fn: isOptional,
            prevContext: null,
            msg: isOptionalMessage
        };
        return addContext(this, context);
    };
    Param.prototype.isNonEmptyArray = function () {
        return this.isArray(true);
    };
    Param.prototype.isArray = function (mustNotBeEmpty) {
        var context = {
            fn: isArray,
            mustNotBeEmpty: mustNotBeEmpty,
            prevContext: null,
            msg: isArrayMessage
        };
        return addContext(this, context);
    };
    Param.prototype.or = function () {
        this._contexts.push(null);
        this._context = null;
        return this;
    };
    Param.prototype.check = function (defaultValue) {
        var ok = exec(this);
        if (ok === undefined)
            return;
        if (!ok) {
            throw new Error(this.getMessage());
        }
        if (this.v !== undefined) {
            return this.v;
        }
        else {
            return defaultValue;
        }
    };
    /** @hidden @internal */
    // called from outside this file.
    Param.prototype._addContext = function (context) {
        return addContext(this, context);
    };
    Param.prototype.getMessage = function () {
        var that = this;
        var message = this._contexts.map(function (context) {
            return getMessage(context, that.v);
        }).join(", or it ");
        return core.formatString(this.MESSAGE_PREFIX, this.name) + " " + message;
    };
    Param.prototype.withDefault = function (defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    };
    Param.prototype.whereParam = function (propName) {
        return this.parent.whereParam(propName);
    };
    Param.prototype.applyAll = function (instance, checkOnly) {
        if (checkOnly === void 0) { checkOnly = false; }
        var parentTypeName = instance._$typeName;
        var allowUnknownProperty = (parentTypeName && this.parent.config._$typeName === parentTypeName);
        var clone = core.extend({}, this.parent.config);
        this.parent.params.forEach(function (p) {
            if (!allowUnknownProperty)
                delete clone[p.name];
            try {
                p.check();
            }
            catch (e) {
                throwConfigError(instance, e.message);
            }
            (!checkOnly) && p._applyOne(instance);
        });
        // should be no properties left in the clone
        if (!allowUnknownProperty) {
            for (var key in clone) {
                // allow props with an undefined value
                if (clone[key] !== undefined) {
                    throwConfigError(instance, core.formatString("Unknown property: '%1'.", key));
                }
            }
        }
    };
    return Param;
}());
export { Param };
/** @hidden @internal */
export var assertParam = function (v, name) {
    return new Param(v, name);
};
function isTypeOf(context, v) {
    if (v == null)
        return false;
    if (typeof (v) === context.typeName)
        return true;
    return false;
}
function isNonEmptyString(context, v) {
    if (v == null)
        return false;
    return (typeof (v) === 'string') && v.length > 0;
}
function isInstanceOf(context, v) {
    if (v == null || context.type == null)
        return false;
    return (v instanceof context.type);
}
function isEnumOf(context, v) {
    if (v == null || context.enumType == null)
        return false;
    return context.enumType.contains(v);
}
function hasProperty(context, v) {
    if (v == null || context.propertyName == null)
        return false;
    return (v[context.propertyName] !== undefined);
}
function isRequired(context, v) {
    if (context.allowNull) {
        return v !== undefined;
    }
    else {
        return v != null;
    }
}
function isOptional(context, v) {
    if (v == null)
        return true;
    var prevContext = context.prevContext;
    if (prevContext && prevContext.fn) {
        return prevContext.fn(prevContext, v);
    }
    else {
        return true;
    }
}
function isOptionalMessage(context, v) {
    var prevContext = context.prevContext;
    var element = prevContext ? " or it " + getMessage(prevContext, v) : "";
    return "is optional" + element;
}
function isArray(context, v) {
    if (!Array.isArray(v)) {
        return false;
    }
    if (context.mustNotBeEmpty) {
        if (v.length === 0)
            return false;
    }
    // allow standalone is array call.
    var prevContext = context.prevContext;
    if (!prevContext)
        return true;
    var pc = prevContext;
    return v.every(function (v1) {
        return pc.fn && pc.fn(pc, v1);
    });
}
function isArrayMessage(context, v) {
    var arrayDescr = context.mustNotBeEmpty ? "a nonEmpty array" : "an array";
    var prevContext = context.prevContext;
    var element = prevContext ? " where each element " + getMessage(prevContext, v) : "";
    return " must be " + arrayDescr + element;
}
function getMessage(context, v) {
    var msg = context.msg;
    if (typeof (msg) === "function") {
        msg = msg(context, v);
    }
    return msg;
}
function addContext(that, context) {
    if (that._context) {
        var curContext = that._context;
        while (curContext.prevContext != null) {
            curContext = curContext.prevContext;
        }
        if (curContext.prevContext === null) {
            curContext.prevContext = context;
            // just update the prevContext but don't change the curContext.
            return that;
        }
        else if (context.prevContext == null) {
            context.prevContext = that._context;
        }
        else {
            throw new Error("Illegal construction - use 'or' to combine checks");
        }
    }
    return setContext(that, context);
}
function setContext(that, context) {
    that._contexts[that._contexts.length - 1] = context;
    that._context = context;
    return that;
}
function exec(self) {
    // clear off last one if null
    var contexts = self._contexts;
    if (contexts[contexts.length - 1] == null) {
        contexts.pop();
    }
    if (contexts.length === 0) {
        return undefined;
    }
    return contexts.some(function (context) {
        return context.fn ? context.fn(context, self.v) : false;
    });
}
function throwConfigError(instance, message) {
    throw new Error(core.formatString("Error configuring an instance of '%1'. %2", (instance && instance._$typeName) || "object", message));
}
var ConfigParam = /** @class */ (function () {
    function ConfigParam(config) {
        if (typeof (config) !== "object") {
            throw new Error("Configuration parameter should be an object, instead it is a: " + typeof (config));
        }
        this.config = config;
        this.params = [];
    }
    ConfigParam.prototype.whereParam = function (propName) {
        var param = new Param(this.config[propName], propName);
        param.parent = this;
        this.params.push(param);
        return param;
    };
    return ConfigParam;
}());
/** @hidden @internal */
export var assertConfig = function (config) {
    return new ConfigParam(config);
};
// Param is exposed so that additional 'is' methods can be added to the prototype.
core.Param = Param;
core.assertParam = assertParam;
core.assertConfig = assertConfig;
//# sourceMappingURL=data:application/json;base64,