import * as tslib_1 from "tslib";
import { core } from './core';
import { config } from './config';
import { BreezeEvent } from './event';
import { assertParam, assertConfig, Param } from './assert-param';
import { DataType } from './data-type';
import { EntityAspect, ComplexAspect } from './entity-aspect';
import { EntityKey } from './entity-key';
import { Validator } from './validate';
import { BreezeEnum } from './enum';
import { DataService } from './data-service';
import { NamingConvention } from './naming-convention';
import { CsdlMetadataParser } from './csdl-metadata-parser'; // TODO isolate this later;
import { LocalQueryComparisonOptions } from './local-query-comparison-options';
import { defaultPropertyInterceptor } from './default-property-interceptor';
/**
An instance of the MetadataStore contains all of the metadata about a collection of [[EntityType]]'s.
MetadataStores may be shared across [[EntityManager]]'s.  If an EntityManager is created without an
explicit MetadataStore, the MetadataStore from the MetadataStore.defaultInstance property will be used.
@dynamic
**/
var MetadataStore = /** @class */ (function () {
    /**
    Constructs a new MetadataStore.
    
    >     let ms = new MetadataStore();
  
    The store can then be associated with an EntityManager
    >     let entityManager = new EntityManager( {
    >         serviceName: "breeze/NorthwindIBModel",
    >         metadataStore: ms
    >     });
  
    or for an existing EntityManager
    >    // Assume em1 is an existing EntityManager
    >    em1.setProperties( { metadataStore: ms });
    
    @param config - Configuration settings .
      - namingConvention - (default=NamingConvention.defaultInstance) NamingConvention to be used in mapping property names
    between client and server. Uses the NamingConvention.defaultInstance if not specified.
      - localQueryComparisonOptions - (default=LocalQueryComparisonOptions.defaultInstance) The LocalQueryComparisonOptions to be
    used when performing "local queries" in order to match the semantics of queries against a remote service.
      - serializerFn - A function that is used to mediate the serialization of instances of this type.
    **/
    function MetadataStore(config) {
        config = config || {};
        assertConfig(config)
            .whereParam("namingConvention").isOptional().isInstanceOf(NamingConvention).withDefault(NamingConvention.defaultInstance)
            .whereParam("localQueryComparisonOptions").isOptional().isInstanceOf(LocalQueryComparisonOptions).withDefault(LocalQueryComparisonOptions.defaultInstance)
            .whereParam("serializerFn").isOptional().isFunction()
            .applyAll(this);
        this.dataServices = []; // array of dataServices;
        this._resourceEntityTypeMap = {}; // key is resource name - value is qualified entityType name
        this._structuralTypeMap = {}; // key is qualified structuraltype name - value is structuralType. ( structural = entityType or complexType).
        this._shortNameMap = {}; // key is shortName, value is qualified name - does not need to be serialized.
        this._ctorRegistry = {}; // key is either short or qual type name - value is ctor;
        this._incompleteTypeMap = {}; // key is entityTypeName; value is array of nav props
        this._incompleteComplexTypeMap = {}; // key is complexTypeName; value is array of complexType props
        this._id = MetadataStore.__id++;
        this.metadataFetched = new BreezeEvent("metadataFetched", this);
    }
    // for debugging use the line below instead.
    //ctor.normalizeTypeName = function (rawTypeName) { return parseTypeName(rawTypeName).typeName; };
    /**
    General purpose property set method
    
    >     // assume em1 is an EntityManager containing a number of existing entities.
    >     em1.metadataStore.setProperties( {
    >         version: "6.1.3",
    >         serializerFn: function(prop, value) {
    >         return (prop.isUnmapped) ? undefined : value;
    >         }
    >     )};
    @param config -  An object containing the selected properties and values to set.
    **/
    MetadataStore.prototype.setProperties = function (config) {
        assertConfig(config)
            .whereParam("name").isString().isOptional()
            .whereParam("serializerFn").isFunction().isOptional()
            .applyAll(this);
    };
    /**
    Adds a DataService to this MetadataStore. If a DataService with the same serviceName is already
    in the MetadataStore an exception will be thrown.
    @param dataService - The [[DataService]] to add
    @param shouldOverwrite - (default=false) Permit overwrite of existing DataService rather than throw exception
    **/
    MetadataStore.prototype.addDataService = function (dataService, shouldOverwrite) {
        assertParam(dataService, "dataService").isInstanceOf(DataService).check();
        assertParam(shouldOverwrite, "shouldOverwrite").isBoolean().isOptional().check();
        var ix = this._getDataServiceIndex(dataService.serviceName);
        if (ix >= 0) {
            if (!!shouldOverwrite) {
                this.dataServices[ix] = dataService;
            }
            else {
                throw new Error("A dataService with this name '" + dataService.serviceName + "' already exists in this MetadataStore");
            }
        }
        else {
            this.dataServices.push(dataService);
        }
    };
    /** @hidden @internal */
    MetadataStore.prototype._getDataServiceIndex = function (serviceName) {
        return core.arrayIndexOf(this.dataServices, function (ds) {
            return ds.serviceName === serviceName;
        });
    };
    /**
    Adds an EntityType to this MetadataStore.  No additional properties may be added to the EntityType after its has
    been added to the MetadataStore.
    @param structuralType - The EntityType or ComplexType to add
    **/
    MetadataStore.prototype.addEntityType = function (stype) {
        var structuralType;
        if (stype instanceof EntityType || stype instanceof ComplexType) {
            structuralType = stype;
        }
        else {
            structuralType = stype.isComplexType ? new ComplexType(stype) : new EntityType(stype);
        }
        // if (!structuralType.isComplexType) { // same as below but isn't a 'type guard'
        if (structuralType instanceof EntityType) {
            if (structuralType.baseTypeName && !structuralType.baseEntityType) {
                var baseEntityType = this._getStructuralType(structuralType.baseTypeName, true);
                // safe cast because we know that baseEntityType must be an EntityType if the structuralType is an EntityType
                structuralType._updateFromBase(baseEntityType);
            }
            if (structuralType.keyProperties.length === 0 && !structuralType.isAbstract) {
                throw new Error("Unable to add " + structuralType.name +
                    " to this MetadataStore.  An EntityType must have at least one property designated as a key property - See the 'DataProperty.isPartOfKey' property.");
            }
        }
        structuralType.metadataStore = this;
        // don't register anon types
        if (!structuralType.isAnonymous) {
            if (this._structuralTypeMap[structuralType.name]) {
                throw new Error("Type " + structuralType.name + " already exists in this MetadataStore.");
            }
            this._structuralTypeMap[structuralType.name] = structuralType;
            this._shortNameMap[structuralType.shortName] = structuralType.name;
        }
        structuralType.getProperties().forEach(function (p) {
            structuralType._updateNames(p);
            if (!p.isUnmapped) {
                structuralType._mappedPropertiesCount++;
            }
        });
        structuralType._updateCps();
        // 'isEntityType' is a type guard
        if (structuralType instanceof EntityType) {
            structuralType._updateNps();
            // give the type it's base's resource name if it doesn't have its own.
            var defResourceName = structuralType.defaultResourceName || (structuralType.baseEntityType && structuralType.baseEntityType.defaultResourceName);
            if (defResourceName && !this.getEntityTypeNameForResourceName(defResourceName)) {
                this.setEntityTypeForResourceName(defResourceName, structuralType.name);
            }
            structuralType.defaultResourceName = defResourceName;
            // check if this structural type's name, short version or qualified version has a registered ctor.
            structuralType.getEntityCtor();
        }
    };
    /**
    Exports this MetadataStore to a serialized string appropriate for local storage.   This operation is also called
    internally when exporting an EntityManager.
    >      // assume ms is a previously created MetadataStore
    >      let metadataAsString = ms.exportMetadata();
    >      window.localStorage.setItem("metadata", metadataAsString);
    >      // and later, usually in a different session imported
    >      let metadataFromStorage = window.localStorage.getItem("metadata");
    >      let newMetadataStore = new MetadataStore();
    >      newMetadataStore.importMetadata(metadataFromStorage);
    @return A serialized version of this MetadataStore that may be stored locally and later restored.
    **/
    MetadataStore.prototype.exportMetadata = function () {
        var result = JSON.stringify({
            "metadataVersion": MetadataStore.metadataVersion,
            "name": this.name,
            "namingConvention": this.namingConvention.name,
            "localQueryComparisonOptions": this.localQueryComparisonOptions.name,
            "dataServices": this.dataServices,
            "structuralTypes": core.objectMap(this._structuralTypeMap),
            "resourceEntityTypeMap": this._resourceEntityTypeMap
        }, null, config.stringifyPad);
        return result;
    };
    /**
    Imports a previously exported serialized MetadataStore into this MetadataStore.
      
    >      // assume ms is a previously created MetadataStore
    >      let metadataAsString = ms.exportMetadata();
    >      window.localStorage.setItem("metadata", metadataAsString);
    >      // and later, usually in a different session
    >      let metadataFromStorage = window.localStorage.getItem("metadata");
    >      let newMetadataStore = new MetadataStore();
    >      newMetadataStore.importMetadata(metadataFromStorage);
    @param exportedMetadata - A previously exported MetadataStore.
    @param allowMerge -  Allows custom metadata to be merged into existing metadata types.
    @return This MetadataStore.
    @chainable
    **/
    MetadataStore.prototype.importMetadata = function (exportedMetadata, allowMerge) {
        var _this = this;
        if (allowMerge === void 0) { allowMerge = false; }
        assertParam(allowMerge, "allowMerge").isOptional().isBoolean().check();
        this._deferredTypes = {};
        // insure that we don't mutate incoming exportedMetadata ( if its an object)
        var metadataAsString = (typeof (exportedMetadata) === "string") ? exportedMetadata : JSON.stringify(exportedMetadata);
        var metadataJson = JSON.parse(metadataAsString);
        if (metadataJson.schema) {
            return CsdlMetadataParser.parse(this, metadataJson.schema, metadataJson.altMetadata);
        }
        var json = metadataJson;
        if (json.metadataVersion && json.metadataVersion !== MetadataStore.metadataVersion) {
            var msg = core.formatString("Cannot import metadata with a different 'metadataVersion' (%1) than the current 'MetadataStore.metadataVersion' (%2) ", json.metadataVersion, MetadataStore.metadataVersion);
            throw new Error(msg);
        }
        var ncName = json.namingConvention;
        var lqcoName = json.localQueryComparisonOptions;
        if (this.isEmpty()) {
            this.namingConvention = config._fetchObject(NamingConvention, ncName) || this.namingConvention;
            this.localQueryComparisonOptions = config._fetchObject(LocalQueryComparisonOptions, lqcoName) || this.localQueryComparisonOptions;
        }
        else {
            if (ncName && this.namingConvention.name !== ncName) {
                throw new Error("Cannot import metadata with a different 'namingConvention' from the current MetadataStore");
            }
            if (lqcoName && this.localQueryComparisonOptions.name !== lqcoName) {
                throw new Error("Cannot import metadata with different 'localQueryComparisonOptions' from the current MetadataStore");
            }
        }
        //noinspection JSHint
        json.dataServices && json.dataServices.forEach(function (ds) {
            var realDs = DataService.fromJSON(ds);
            _this.addDataService(realDs, true);
        });
        json.structuralTypes && json.structuralTypes.forEach(function (stype) {
            structuralTypeFromJson(_this, stype, allowMerge);
        });
        core.extend(this._resourceEntityTypeMap, json.resourceEntityTypeMap);
        core.extend(this._incompleteTypeMap, json.incompleteTypeMap);
        return this;
    };
    /**
    Creates a new MetadataStore from a previously exported serialized MetadataStore
    >      // assume ms is a previously created MetadataStore
    >      let metadataAsString = ms.exportMetadata();
    >      window.localStorage.setItem("metadata", metadataAsString);
    >      // and later, usually in a different session
    >      let metadataFromStorage = window.localStorage.getItem("metadata");
    >      let newMetadataStore = MetadataStore.importMetadata(metadataFromStorage);
    @param exportedString - A previously exported MetadataStore.
    @return A new MetadataStore.
    **/
    MetadataStore.importMetadata = function (exportedString) {
        var ms = new MetadataStore();
        ms.importMetadata(exportedString);
        return ms;
    };
    /**
    Returns whether Metadata has been retrieved for a specified service name.
    >      // Assume em1 is an existing EntityManager.
    >      if (!em1.metadataStore.hasMetadataFor("breeze/NorthwindIBModel"))) {
    >          // do something interesting
    >      }
    @param serviceName - The service name.
    @return Whether metadata has already been retrieved for the specified service name.
    **/
    MetadataStore.prototype.hasMetadataFor = function (serviceName) {
        return !!this.getDataService(serviceName);
    };
    /**
    Returns the DataService for a specified service name
    >      // Assume em1 is an existing EntityManager.
    >      let ds = em1.metadataStore.getDataService("breeze/NorthwindIBModel");
    >      let adapterName = ds.adapterName; // may be null
    @param serviceName - The service name.
    @return The DataService with the specified name.
    **/
    MetadataStore.prototype.getDataService = function (serviceName) {
        assertParam(serviceName, "serviceName").isString().check();
        serviceName = DataService._normalizeServiceName(serviceName);
        return core.arrayFirst(this.dataServices, function (ds) {
            return ds.serviceName === serviceName;
        });
    };
    /**
    Fetches the metadata for a specified 'service'. This method is automatically called
    internally by an EntityManager before its first query against a new service. __Async__
  
    Usually you will not actually process the results of a fetchMetadata call directly, but will instead
    ask for the metadata from the EntityManager after the fetchMetadata call returns.
    >      let ms = new MetadataStore();
    >      // or more commonly
    >      // let ms = anEntityManager.metadataStore;
    >      ms.fetchMetadata("breeze/NorthwindIBModel").then(function(rawMetadata) {
    >            // do something with the metadata
    >      }).catch(function(exception) {
    >          // handle exception here
    >      });
    @param dataService -  Either a DataService or just the name of the DataService to fetch metadata for.
    @param callback - Function called on success.
    @param errorCallback - Function called on failure.
    @return Promise
    **/
    MetadataStore.prototype.fetchMetadata = function (dataService, callback, errorCallback) {
        var _this = this;
        try {
            assertParam(dataService, "dataService").isString().or().isInstanceOf(DataService).check();
            assertParam(callback, "callback").isFunction().isOptional().check();
            assertParam(errorCallback, "errorCallback").isFunction().isOptional().check();
            if (typeof dataService === "string") {
                // use the dataService with a matching name or create a new one.
                dataService = this.getDataService(dataService) || new DataService({ serviceName: dataService });
            }
            dataService = DataService.resolve([dataService]);
            if (this.hasMetadataFor(dataService.serviceName)) {
                throw new Error("Metadata for a specific serviceName may only be fetched once per MetadataStore. ServiceName: " + dataService.serviceName);
            }
            return dataService.adapterInstance.fetchMetadata(this, dataService).then(function (rawMetadata) {
                _this.metadataFetched.publish({ metadataStore: _this, dataService: dataService, rawMetadata: rawMetadata });
                if (callback)
                    callback(rawMetadata);
                return Promise.resolve(rawMetadata);
            }, function (error) {
                if (errorCallback)
                    errorCallback(error);
                return Promise.reject(error);
            });
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    // TODO: strongly type interceptor below.
    /**
    Used to register a constructor for an EntityType that is not known via standard Metadata discovery;
    i.e. an unmapped type.
    @param entityCtor - The constructor function for the 'unmapped' type.
    @param interceptor - An interceptor function
    **/
    MetadataStore.prototype.trackUnmappedType = function (entityCtor, interceptor) {
        assertParam(entityCtor, "entityCtor").isFunction().check();
        assertParam(interceptor, "interceptor").isFunction().isOptional().check();
        // TODO: think about adding this to the MetadataStore.
        var entityType = new EntityType(this);
        entityType._setCtor(entityCtor, interceptor);
    };
    /**
    Provides a mechanism to register a 'custom' constructor to be used when creating new instances
    of the specified entity type.  If this call is not made, a default constructor is created for
    the entity as needed.
    This call may be made before or after the corresponding EntityType has been discovered via
    Metadata discovery.
    >      let Customer = function () {
    >              this.miscData = "asdf";
    >          };
    >      Customer.prototype.doFoo() {
    >              ...
    >          }
    >      // assume em1 is a preexisting EntityManager;
    >      em1.metadataStore.registerEntityTypeCtor("Customer", Customer);
    >      // any queries or EntityType.create calls from this point on will call the Customer constructor
    >      // registered above.
    @param structuralTypeName - The name of the EntityType or ComplexType.
    @param aCtor - The constructor for this EntityType or ComplexType; may be null if all you want to do is set the next parameter.
    @param initFn - A function or the name of a function on the entity that is to be executed immediately after the entity has been created
    and populated with any initial values. Called with 'initFn(entity)'
    @param noTrackingFn - A function that is executed immediately after a noTracking entity has been created and whose return
    value will be used in place of the noTracking entity.
    **/
    MetadataStore.prototype.registerEntityTypeCtor = function (structuralTypeName, aCtor, initFn, noTrackingFn) {
        assertParam(structuralTypeName, "structuralTypeName").isString().check();
        assertParam(aCtor, "aCtor").isFunction().isOptional().check();
        assertParam(initFn, "initFn").isOptional().isFunction().or().isString().check();
        assertParam(noTrackingFn, "noTrackingFn").isOptional().isFunction().check();
        var qualifiedTypeName = getQualifiedTypeName(this, structuralTypeName, false);
        var typeName = qualifiedTypeName || structuralTypeName;
        if (aCtor) {
            if (aCtor._$typeName && aCtor._$typeName !== typeName) {
                // TODO: wrap this - console and especially console.warn does not exist in all browsers.
                console.warn("Registering a constructor for " + typeName + " that is already used for " + aCtor._$typeName + ".");
            }
            aCtor._$typeName = typeName;
        }
        this._ctorRegistry[typeName] = { ctor: aCtor, initFn: initFn, noTrackingFn: noTrackingFn };
        if (qualifiedTypeName) {
            var stype = this._structuralTypeMap[qualifiedTypeName];
            stype && stype.getCtor(true); // this will complete the registration if avail now.
        }
    };
    /**
    Returns whether this MetadataStore contains any metadata yet.
    >      // assume em1 is a preexisting EntityManager;
    >      if (em1.metadataStore.isEmpty()) {
    >          // do something interesting
    >      }
    **/
    MetadataStore.prototype.isEmpty = function () {
        return core.isEmpty(this._structuralTypeMap);
    };
    /**
    Returns an [[EntityType]] or null given its name.
    >      // assume em1 is a preexisting EntityManager
    >      let odType = em1.metadataStore.getAsEntityType("OrderDetail");
  
    or to throw an error if the type is not found
    >      let badType = em1.metadataStore.getAsEntityType("Foo", false);
    >      // badType will not get set and an exception will be thrown.
    @param structuralTypeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share
    that same short name an exception will be thrown.
    @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.
    @return The EntityType. ComplexType or 'null' if not not found.
    **/
    MetadataStore.prototype.getAsEntityType = function (typeName, okIfNotFound) {
        if (okIfNotFound === void 0) { okIfNotFound = false; }
        var st = this.getStructuralType(typeName, okIfNotFound);
        if (st instanceof EntityType) {
            return st;
        }
        else if (okIfNotFound) {
            return null;
        }
        else {
            var msg = core.formatString("Unable to locate an 'EntityType' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.", typeName);
            throw new Error(msg);
        }
    };
    /**
    Returns an [[EntityType]] or null given its name.
    >      // assume em1 is a preexisting EntityManager
    >      let locType = em1.metadataStore.getAsComplexType("Location");
  
    or to throw an error if the type is not found
    >      let badType = em1.metadataStore.getAsComplexType("Foo", false);
    >      // badType will not get set and an exception will be thrown.
    @param structuralTypeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share
    that same short name an exception will be thrown.
    @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.
    @return The EntityType. ComplexType or 'null' if not not found.
    **/
    MetadataStore.prototype.getAsComplexType = function (typeName, okIfNotFound) {
        if (okIfNotFound === void 0) { okIfNotFound = false; }
        var st = this.getStructuralType(typeName, okIfNotFound);
        if (st instanceof ComplexType) {
            return st;
        }
        else if (okIfNotFound) {
            return null;
        }
        else {
            var msg = core.formatString("Unable to locate an 'ComplexType' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.", typeName);
            throw new Error(msg);
        }
    };
    /**
    Returns an [[EntityType]] or a [[ComplexType]] given its name.
    @deprecated Replaced by getStructuralType but ... it is probably more usefull to call either getAsEntityType or getAsComplexType instead
    @param typeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share
    that same short name an exception will be thrown.
    @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.
    @return The EntityType. ComplexType or 'null' if not not found.
    **/
    MetadataStore.prototype.getEntityType = function (typeName, okIfNotFound) {
        if (okIfNotFound === void 0) { okIfNotFound = false; }
        return this.getStructuralType(typeName, okIfNotFound);
    };
    /**
    Returns an [[EntityType]] or a [[ComplexType]] given its name.
    >      // assume em1 is a preexisting EntityManager
    >      let odType = em1.metadataStore.getStructuralType("OrderDetail");
  
    or to throw an error if the type is not found
    >      let badType = em1.metadataStore.getStructuralType("Foo", false);
    >      // badType will not get set and an exception will be thrown.
    @deprecated Preferably use either getAsEntityType or getAsComplexType.  Get
    @param typeName - Either the fully qualified name or a short name may be used. If a short name is specified and multiple types share
    that same short name an exception will be thrown.
    @param okIfNotFound - (default=false) Whether to throw an error if the specified EntityType is not found.
    @return The EntityType. ComplexType or 'null' if not not found.
    **/
    MetadataStore.prototype.getStructuralType = function (typeName, okIfNotFound) {
        if (okIfNotFound === void 0) { okIfNotFound = false; }
        assertParam(typeName, "typeName").isString().check();
        assertParam(okIfNotFound, "okIfNotFound").isBoolean().isOptional().check(false);
        return this._getStructuralType(typeName, okIfNotFound);
    };
    /** @hidden @internal */
    MetadataStore.prototype._getStructuralType = function (typeName, okIfNotFound) {
        if (okIfNotFound === void 0) { okIfNotFound = false; }
        var qualTypeName = getQualifiedTypeName(this, typeName, false);
        var type = this._structuralTypeMap[qualTypeName];
        if (!type) {
            if (okIfNotFound)
                return null;
            var msg = core.formatString("Unable to locate a 'Type' by the name: '%1'. Be sure to execute a query or call fetchMetadata first.", typeName);
            throw new Error(msg);
        }
        return type;
    };
    /**
    Returns an array containing all of the [[EntityType]]s or [[ComplexType]]s in this MetadataStore.
    >      // assume em1 is a preexisting EntityManager
    >      let allTypes = em1.metadataStore.getEntityTypes();
    **/
    MetadataStore.prototype.getEntityTypes = function () {
        return getTypesFromMap(this._structuralTypeMap);
    };
    MetadataStore.prototype.getIncompleteNavigationProperties = function () {
        return core.objectMap(this._incompleteTypeMap, function (key, value) {
            return value;
        });
    };
    /**
    Returns a fully qualified entityTypeName for a specified resource name.  The reverse of this operation
    can be obtained via the  [[EntityType.defaultResourceName]] property
    **/
    MetadataStore.prototype.getEntityTypeNameForResourceName = function (resourceName) {
        assertParam(resourceName, "resourceName").isString().check();
        return this._resourceEntityTypeMap[resourceName];
    };
    /**
    Associates a resourceName with an entityType.
  
    This method is only needed in those cases where multiple resources return the same
    entityType.  In this case Metadata discovery will only determine a single resource name for
    each entityType.
    @param resourceName - The resource name
    @param entityTypeOrName - If passing a string either the fully qualified name or a short name may be used. If a short name is specified and multiple types share
    that same short name an exception will be thrown. If the entityType has not yet been discovered then a fully qualified name must be used.
    **/
    MetadataStore.prototype.setEntityTypeForResourceName = function (resourceName, entityTypeOrName) {
        assertParam(resourceName, "resourceName").isString().check();
        assertParam(entityTypeOrName, "entityTypeOrName").isInstanceOf(EntityType).or().isString().check();
        var entityTypeName;
        if (entityTypeOrName instanceof EntityType) {
            entityTypeName = entityTypeOrName.name;
        }
        else {
            entityTypeName = getQualifiedTypeName(this, entityTypeOrName, true);
        }
        this._resourceEntityTypeMap[resourceName] = entityTypeName;
        var entityType = this._getStructuralType(entityTypeName, true);
        if (entityType && entityType instanceof EntityType && !entityType.defaultResourceName) {
            entityType.defaultResourceName = resourceName;
        }
    };
    /** __Dev Only__ - for use when creating a new MetadataParserAdapter  */
    MetadataStore.parseTypeName = function (entityTypeName) {
        // TODO: removed 
        // if (!entityTypeName) {
        //   return null;
        // }
        var typeParts = entityTypeName.split(":#");
        if (typeParts.length > 1) {
            return MetadataStore.makeTypeHash(typeParts[0], typeParts[1]);
        }
        if (core.stringStartsWith(entityTypeName, MetadataStore.ANONTYPE_PREFIX)) {
            var typeHash = MetadataStore.makeTypeHash(entityTypeName);
            typeHash.isAnonymous = true;
            return typeHash;
        }
        var entityTypeNameNoAssembly = entityTypeName.split(",")[0];
        typeParts = entityTypeNameNoAssembly.split(".");
        if (typeParts.length > 1) {
            var shortName = typeParts[typeParts.length - 1];
            var namespaceParts = typeParts.slice(0, typeParts.length - 1);
            var ns = namespaceParts.join(".");
            return MetadataStore.makeTypeHash(shortName, ns);
        }
        else {
            return MetadataStore.makeTypeHash(entityTypeName);
        }
    };
    /** __Dev Only__ - for use when creating a new MetadataParserAdapter  */
    MetadataStore.makeTypeHash = function (shortName, ns) {
        return {
            shortTypeName: shortName,
            namespace: ns,
            typeName: qualifyTypeName(shortName, ns)
        };
    };
    // protected methods
    /** @hidden @internal */
    MetadataStore.prototype._checkEntityType = function (entity) {
        if (entity.entityType)
            return;
        var typeName = entity.prototype._$typeName;
        if (!typeName) {
            throw new Error("This entity has not been registered. See the MetadataStore.registerEntityTypeCtor method");
        }
        // we know that it is an EntityType ( as opposed to a ComplexType)
        var entityType = this._getStructuralType(typeName);
        if (entityType) {
            entity.entityType = entityType;
        }
    };
    /** @hidden @internal */
    MetadataStore.__id = 0;
    /** @hidden @internal */
    MetadataStore.ANONTYPE_PREFIX = "_IB_";
    /** The version of any MetadataStores created by this class */
    MetadataStore.metadataVersion = '1.0.5';
    // needs to be made avail to dataService.xxx files
    MetadataStore.normalizeTypeName = core.memoize(function (rawTypeName) {
        return rawTypeName && MetadataStore.parseTypeName(rawTypeName).typeName;
    });
    return MetadataStore;
}());
export { MetadataStore };
MetadataStore.prototype._$typeName = "MetadataStore";
BreezeEvent.bubbleEvent(MetadataStore.prototype);
function getTypesFromMap(typeMap) {
    var types = [];
    for (var key in typeMap) {
        var value = typeMap[key];
        // skip 'shortName' entries
        if (key === value.name) {
            types.push(typeMap[key]);
        }
    }
    return types;
}
function structuralTypeFromJson(metadataStore, json, allowMerge) {
    var typeName = qualifyTypeName(json.shortName, json.namespace);
    var stype = metadataStore._getStructuralType(typeName, true);
    if (stype) {
        if (allowMerge) {
            return mergeStructuralType(stype, json);
        }
        else {
            // allow it but don't replace anything.
            return stype;
        }
    }
    var config = {
        shortName: json.shortName,
        namespace: json.namespace,
        isAbstract: json.isAbstract,
        autoGeneratedKeyType: AutoGeneratedKeyType.fromName(json.autoGeneratedKeyType),
        defaultResourceName: json.defaultResourceName,
        custom: json.custom
    };
    stype = json.isComplexType ? new ComplexType(config) : new EntityType(config);
    // baseType may not have been imported yet so we need to defer handling this type until later.
    if (json.baseTypeName && stype instanceof EntityType) {
        stype.baseTypeName = json.baseTypeName;
        var baseEntityType = metadataStore._getStructuralType(json.baseTypeName, true);
        if (baseEntityType) {
            completeStructuralTypeFromJson(metadataStore, json, stype);
        }
        else {
            core.getArray(metadataStore._deferredTypes, json.baseTypeName).push({ json: json, stype: stype });
        }
    }
    else {
        completeStructuralTypeFromJson(metadataStore, json, stype);
    }
    // stype may or may not have been added to the metadataStore at this point.
    return stype;
}
function mergeStructuralType(stype, json) {
    if (json.custom) {
        stype.custom = json.custom;
    }
    mergeProps(stype, json.dataProperties);
    mergeProps(stype, json.navigationProperties);
    return stype;
}
function mergeProps(stype, jsonProps) {
    if (!jsonProps)
        return;
    jsonProps.forEach(function (jsonProp) {
        var propName = jsonProp.name;
        if (!propName) {
            if (jsonProp.nameOnServer) {
                propName = stype.metadataStore.namingConvention.serverPropertyNameToClient(jsonProp.nameOnServer, {});
            }
            else {
                // backslash-quote works around compiler bug
                var msg = "Unable to complete \'importMetadata\' - cannot locate a \'name\' or \'nameOnServer\' for one of the imported property nodes";
                throw new Error(msg);
            }
        }
        if (jsonProp.custom) {
            var prop = stype.getProperty(propName, true);
            prop.custom = jsonProp.custom;
        }
    });
}
function completeStructuralTypeFromJson(metadataStore, json, stype) {
    // validators from baseType work because validation walks thru base types
    // so no need to copy down.
    if (json.validators) {
        stype.validators = json.validators.map(Validator.fromJSON);
    }
    json.dataProperties.forEach(function (dp) {
        stype._addPropertyCore(DataProperty.fromJSON(dp));
    });
    var isEntityType = !json.isComplexType;
    if (isEntityType) {
        //noinspection JSHint
        json.navigationProperties && json.navigationProperties.forEach(function (np) {
            stype._addPropertyCore(NavigationProperty.fromJSON(np));
        });
    }
    metadataStore.addEntityType(stype);
    var deferredTypes = metadataStore._deferredTypes;
    var deferrals = deferredTypes[stype.name];
    if (deferrals) {
        deferrals.forEach(function (d) {
            completeStructuralTypeFromJson(metadataStore, d.json, d.stype);
        });
        delete deferredTypes[stype.name];
    }
}
function getQualifiedTypeName(metadataStore, structTypeName, throwIfNotFound) {
    if (isQualifiedTypeName(structTypeName))
        return structTypeName;
    var result = metadataStore._shortNameMap[structTypeName];
    if (!result && throwIfNotFound) {
        throw new Error("Unable to locate 'entityTypeName' of: " + structTypeName);
    }
    return result;
}
/** Container for all of the metadata about a specific type of Entity.
**/
var EntityType = /** @class */ (function () {
    /** EntityType constructor
    >      let entityType = new EntityType( {
    >          shortName: "person",
    >          namespace: "myAppNamespace"
    >      });
    @param config - Configuration settings or a MetadataStore.  If this parameter is just a MetadataStore
    then what will be created is an 'anonymous' type that will never be communicated to or from the server. It is purely for
    client side use and will be given an automatically generated name. Normally, however, you will use a configuration object.
    **/
    function EntityType(config) {
        /** Always false for an EntityType. **/
        this.isComplexType = false;
        /**
        @deprecated Use [[getCtor]] instead.
        */
        this.getEntityCtor = this.getCtor;
        if (arguments.length > 1) {
            throw new Error("The EntityType ctor has a single argument that is either a 'MetadataStore' or a configuration object.");
        }
        // let etConfig =  <EntityTypeConfig> <any> undefined;
        var etConfig = undefined;
        if (config._$typeName === "MetadataStore") {
            this.metadataStore = config;
            this.shortName = "Anon_" + (++EntityType.__nextAnonIx);
            this.namespace = "";
            this.isAnonymous = true;
            // etConfig = undefined;
        }
        else {
            etConfig = config;
            assertConfig(config)
                .whereParam("shortName").isNonEmptyString()
                .whereParam("namespace").isString().isOptional().withDefault("")
                .whereParam("baseTypeName").isString().isOptional()
                .whereParam("isAbstract").isBoolean().isOptional().withDefault(false)
                .whereParam("autoGeneratedKeyType").isEnumOf(AutoGeneratedKeyType).isOptional().withDefault(AutoGeneratedKeyType.None)
                .whereParam("defaultResourceName").isNonEmptyString().isOptional().withDefault(null)
                .whereParam("dataProperties").isOptional()
                .whereParam("navigationProperties").isOptional()
                .whereParam("serializerFn").isOptional().isFunction()
                .whereParam("custom").isOptional()
                .applyAll(this);
        }
        this.name = qualifyTypeName(this.shortName, this.namespace);
        // the defaultResourceName may also be set up either via metadata lookup or first query or via the 'setProperties' method
        this.dataProperties = [];
        this.navigationProperties = [];
        this.complexProperties = [];
        this.keyProperties = [];
        this.foreignKeyProperties = [];
        this.inverseForeignKeyProperties = [];
        this.concurrencyProperties = [];
        this.unmappedProperties = []; // will be updated later.
        this.validators = [];
        this.warnings = [];
        this._mappedPropertiesCount = 0;
        this.subtypes = [];
        // now process any data/nav props
        if (etConfig && etConfig.dataProperties) {
            addProperties(this, etConfig.dataProperties, DataProperty);
        }
        if (etConfig && etConfig.navigationProperties) {
            addProperties(this, etConfig.navigationProperties, NavigationProperty);
        }
    }
    /**
    General purpose property set method
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      custType.setProperties( {
    >          autoGeneratedKeyType: AutoGeneratedKeyType.Identity;
    >          defaultResourceName: "CustomersAndIncludedOrders"
    >      )};
    @param config - a configuration object
    **/
    EntityType.prototype.setProperties = function (config) {
        assertConfig(config)
            .whereParam("autoGeneratedKeyType").isEnumOf(AutoGeneratedKeyType).isOptional()
            .whereParam("defaultResourceName").isString().isOptional()
            .whereParam("serializerFn").isFunction().isOptional()
            .whereParam("custom").isOptional()
            .applyAll(this);
        if (config.defaultResourceName) {
            this.defaultResourceName = config.defaultResourceName;
        }
    };
    /**
    Returns whether this type is a subtype of a specified type.
    **/
    EntityType.prototype.isSubtypeOf = function (entityType) {
        assertParam(entityType, "entityType").isInstanceOf(EntityType).check();
        var baseType = this;
        do {
            if (baseType === entityType)
                return true;
            baseType = baseType.baseEntityType;
        } while (baseType);
        return false;
    };
    /**
    Returns an array containing this type and any/all subtypes of this type down thru the hierarchy.
    **/
    EntityType.prototype.getSelfAndSubtypes = function () {
        var result = [this];
        this.subtypes.forEach(function (st) {
            var subtypes = st.getSelfAndSubtypes();
            result.push.apply(result, subtypes);
        });
        return result;
    };
    EntityType.prototype.getAllValidators = function () {
        var result = this.validators.slice(0);
        var bt = this.baseEntityType;
        while (bt) {
            result.push.apply(result, bt.validators);
            bt = bt.baseEntityType;
        }
        return result;
    };
    /**
    Adds a  [[DataProperty]] or a [[NavigationProperty]] to this EntityType.
    >      // assume myEntityType is a newly constructed EntityType.
    >      myEntityType.addProperty(dataProperty1);
    >      myEntityType.addProperty(dataProperty2);
    >      myEntityType.addProperty(navigationProperty1);
    **/
    EntityType.prototype.addProperty = function (property) {
        assertParam(property, "property").isInstanceOf(DataProperty).or().isInstanceOf(NavigationProperty).check();
        // true is 2nd arg to force resolve of any navigation properties.
        var newprop = this._addPropertyCore(property, true);
        if (this.subtypes && this.subtypes.length) {
            var stype_1 = this;
            stype_1.getSelfAndSubtypes().forEach(function (st) {
                if (st !== stype_1) {
                    if (property.isNavigationProperty) {
                        st._addPropertyCore(new NavigationProperty(property), true);
                    }
                    else {
                        st._addPropertyCore(new DataProperty(property), true);
                    }
                }
            });
        }
        return newprop;
    };
    /** @hidden @internal */
    EntityType.prototype._updateFromBase = function (baseEntityType) {
        var _this = this;
        this.baseEntityType = baseEntityType;
        if (this.autoGeneratedKeyType === AutoGeneratedKeyType.None) {
            this.autoGeneratedKeyType = baseEntityType.autoGeneratedKeyType;
        }
        baseEntityType.dataProperties.forEach(function (dp) {
            var newDp = new DataProperty(dp);
            // don't need to copy validators becaue we will walk the hierarchy to find them
            newDp.validators = [];
            newDp.baseProperty = dp;
            _this._addPropertyCore(newDp);
        }, this);
        baseEntityType.navigationProperties.forEach(function (np) {
            var newNp = new NavigationProperty(np);
            // don't need to copy validators becaue we will walk the hierarchy to find them
            newNp.validators = [];
            newNp.baseProperty = np;
            _this._addPropertyCore(newNp);
        }, this);
        baseEntityType.subtypes.push(this);
    };
    /** @hidden @internal */
    EntityType.prototype._addPropertyCore = function (property, shouldResolve) {
        if (shouldResolve === void 0) { shouldResolve = false; }
        if (this.isFrozen) {
            throw new Error("The '" + this.name + "' EntityType/ComplexType has been frozen. You can only add properties to an EntityType/ComplexType before any instances of that type have been created and attached to an entityManager.");
        }
        var parentType = property.parentType;
        if (parentType) {
            if (parentType !== this) {
                throw new Error("This property: " + property.name + " has already been added to " + property.parentType.name);
            }
            else {
                // adding the same property more than once to the same entityType is just ignored.
                return;
            }
        }
        property.parentType = this;
        var ms = this.metadataStore;
        // if (property.isDataProperty) { // modified because doesn't act as a type guard 
        if (property instanceof DataProperty) {
            this._addDataProperty(property);
        }
        else {
            this._addNavigationProperty(property);
            // metadataStore can be undefined if this entityType has not yet been added to a MetadataStore.
            if (shouldResolve && ms) {
                tryResolveNp(property, ms);
            }
        }
        // unmapped properties can be added AFTER entityType has already resolved all property names.
        if (ms && !(property.name && property.nameOnServer)) {
            updateClientServerNames(ms.namingConvention, property, "name");
        }
        // props can be added after entity prototype has already been wrapped.
        if (ms && this._extra) {
            if (this._extra.alreadyWrappedProps) {
                var proto_1 = this._ctor.prototype;
                config.interfaceRegistry.modelLibrary.getDefaultInstance().initializeEntityPrototype(proto_1);
            }
        }
    };
    /**
    Create a new entity of this type.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getAsEntityType("Customer");
    >      let cust1 = custType.createEntity();
    >      em1.addEntity(cust1);
    @param initialValues- Configuration object of the properties to set immediately after creation.
    @return The new entity.
    **/
    EntityType.prototype.createEntity = function (initialValues) {
        // ignore the _$eref once the entity is attached to an entityManager.
        if (initialValues && initialValues._$eref && !initialValues._$eref.entityAspect.entityManager)
            return initialValues._$eref;
        var instance = this._createInstanceCore();
        if (initialValues) {
            // only assign an _eref if the object is fully "keyed"
            if (this.keyProperties.every(function (kp) {
                return initialValues[kp.name] != null;
            })) {
                initialValues._$eref = instance;
            }
            this._updateTargetFromRaw(instance, initialValues, getRawValueFromConfig);
            this.navigationProperties.forEach(function (np) {
                var relatedEntity;
                var val = initialValues[np.name];
                if (val != undefined) {
                    var navEntityType_1 = np.entityType;
                    if (np.isScalar) {
                        relatedEntity = val.entityAspect ? val : navEntityType_1.createEntity(val);
                        instance.setProperty(np.name, relatedEntity);
                    }
                    else {
                        var relatedEntities_1 = instance.getProperty(np.name);
                        val.forEach(function (v) {
                            relatedEntity = v.entityAspect ? v : navEntityType_1.createEntity(v);
                            relatedEntities_1.push(relatedEntity);
                        });
                    }
                }
            });
        }
        this._initializeInstance(instance);
        return instance;
    };
    /** @hidden @internal */
    EntityType.prototype._createInstanceCore = function () {
        var aCtor = this.getCtor();
        var instance = new aCtor();
        new EntityAspect(instance);
        return instance;
    };
    /** @hidden @internal */
    EntityType.prototype._initializeInstance = function (instance) {
        if (this.baseEntityType) {
            this.baseEntityType._initializeInstance(instance);
        }
        var initFn = this.initFn;
        if (initFn) {
            var fn = (typeof initFn === "string") ? instance[initFn] : initFn;
            fn(instance);
        }
        this.complexProperties && this.complexProperties.forEach(function (cp) {
            var complexType = cp.dataType;
            var ctInstance = instance.getProperty(cp.name);
            if (Array.isArray(ctInstance)) {
                ctInstance.forEach(function (ctInst) {
                    complexType._initializeInstance(ctInst);
                });
            }
            else {
                complexType._initializeInstance(ctInstance);
            }
        });
        // not needed for complexObjects
        if (instance.entityAspect) {
            instance.entityAspect._initialized = true;
        }
    };
    /**
    Returns the constructor for this EntityType.
    @param forceRefresh - Whether to ignore any cached version of this constructor. (default == false)
    @return The constructor for this EntityType.
    **/
    EntityType.prototype.getCtor = function (forceRefresh) {
        if (forceRefresh === void 0) { forceRefresh = false; }
        if (this._ctor && !forceRefresh)
            return this._ctor;
        var ctorRegistry = this.metadataStore._ctorRegistry;
        var r = ctorRegistry[this.name] || ctorRegistry[this.shortName] || {};
        var aCtor = r.ctor || this._ctor;
        var ctorType = aCtor && aCtor.prototype && (aCtor.prototype.entityType || aCtor.prototype.complexType);
        if (ctorType && ctorType.metadataStore !== this.metadataStore) {
            // We can't risk a mismatch between the ctor and the type info in a specific metadatastore
            // because modelLibraries rely on type info to intercept ctor properties
            throw new Error("Cannot register the same constructor for " + this.name + " in different metadata stores.  Please define a separate constructor for each metadata store.");
        }
        if (r.ctor && forceRefresh) {
            this._extra = undefined;
        }
        if (!aCtor) {
            var createCtor = config.interfaceRegistry.modelLibrary.getDefaultInstance().createCtor;
            aCtor = createCtor ? createCtor(this) : createEmptyCtor(this);
        }
        this.initFn = r.initFn;
        this.noTrackingFn = r.noTrackingFn;
        aCtor.prototype._$typeName = this.name;
        this._setCtor(aCtor);
        return aCtor;
    };
    /** @hidden @internal */
    // May make public later.
    EntityType.prototype._setCtor = function (aCtor, interceptor) {
        var instanceProto = aCtor.prototype;
        // place for extra breeze related data
        this._extra = this._extra || {};
        var instance = new aCtor();
        calcUnmappedProperties(this, instance);
        if (this._$typeName === "EntityType") {
            // insure that all of the properties are on the 'template' instance before watching the class.
            instanceProto.entityType = this;
        }
        else {
            instanceProto.complexType = this;
        }
        // defaultPropertyInterceptor is a 'global' (but internal to breeze) function;
        instanceProto._$interceptor = interceptor || defaultPropertyInterceptor;
        config.interfaceRegistry.modelLibrary.getDefaultInstance().initializeEntityPrototype(instanceProto);
        this._ctor = aCtor;
    };
    /**
    Adds either an entity or property level validator to this EntityType.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let countryProp = custType.getProperty("Country");
    >      let valFn = function (v) {
    >              if (v == null) return true;
    >              return (core.stringStartsWith(v, "US"));
    >          };
    >      let countryValidator = new Validator("countryIsUS", valFn,
    >      { displayName: "Country", messageTemplate: "'%displayName%' must start with 'US'" });
    >      custType.addValidator(countryValidator, countryProp);
  
    This is the same as adding an entity level validator via the 'validators' property of DataProperty or NavigationProperty
    >      countryProp.validators.push(countryValidator);
  
    Entity level validators can also be added by omitting the 'property' parameter.
    >      custType.addValidator(someEntityLevelValidator);
  
    or
    >      custType.validators.push(someEntityLevelValidator);
    @param validator - Validator to add.
    @param property - Property to add this validator to.  If omitted, the validator is assumed to be an
    entity level validator and is added to the EntityType's 'validators'.
    **/
    EntityType.prototype.addValidator = function (validator, property) {
        assertParam(validator, "validator").isInstanceOf(Validator).check();
        assertParam(property, "property").isOptional().isString().or().isEntityProperty().check();
        if (property != null) {
            var prop = (typeof property === 'string') ? this.getProperty(property, true) : property;
            prop.validators.push(validator);
        }
        else {
            this.validators.push(validator);
        }
    };
    /**
    Returns all of the properties ( dataProperties and navigationProperties) for this EntityType.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let arrayOfProps = custType.getProperties();
    @return An array of Data and Navigation properties.
    **/
    EntityType.prototype.getProperties = function () {
        return this.dataProperties.concat(this.navigationProperties);
    };
    /**
    Returns all of the property names ( for both dataProperties and navigationProperties) for this EntityType.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let arrayOfPropNames = custType.getPropertyNames();
    **/
    EntityType.prototype.getPropertyNames = function () {
        return this.getProperties().map(core.pluck('name'));
    };
    /**
    Returns a data property with the specified name or null.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let customerNameDataProp = custType.getDataProperty("CustomerName");
    @return A DataProperty or null if not found.
    **/
    EntityType.prototype.getDataProperty = function (propertyName) {
        return core.arrayFirst(this.dataProperties, core.propEq('name', propertyName));
    };
    /**
    Returns a navigation property with the specified name or null.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let customerOrdersNavProp = custType.getDataProperty("Orders");
    @return A NavigationProperty or null if not found.
    **/
    EntityType.prototype.getNavigationProperty = function (propertyName) {
        return core.arrayFirst(this.navigationProperties, core.propEq('name', propertyName));
    };
    /**
    Returns either a DataProperty or a NavigationProperty with the specified name or null.
    
    This method also accepts a '.' delimited property path and will return the 'property' at the
    end of the path.
    >      let custType = em1.metadataStore.getEntityType("Customer");
    >      let companyNameProp = custType.getProperty("CompanyName");
  
    This method can also walk a property path to return a property
    >      let orderDetailType = em1.metadataStore.getEntityType("OrderDetail");
    >      let companyNameProp2 = orderDetailType.getProperty("Order.Customer.CompanyName");
    >      // companyNameProp === companyNameProp2
    @param [throwIfNotFound=false] {Boolean} Whether to throw an exception if not found.
    @return A DataProperty or NavigationProperty or null if not found.
    **/
    EntityType.prototype.getProperty = function (propertyPath, throwIfNotFound) {
        if (throwIfNotFound === void 0) { throwIfNotFound = false; }
        var props = this.getPropertiesOnPath(propertyPath, false, throwIfNotFound);
        return (props && props.length > 0) ? props[props.length - 1] : null;
    };
    /** @hidden @internal */
    // TODO: have this return empty array instead of null and fix consumers.
    // TODO: think about renaming with '_' prefix.
    EntityType.prototype.getPropertiesOnPath = function (propertyPath, useServerName, throwIfNotFound) {
        if (throwIfNotFound === void 0) { throwIfNotFound = false; }
        var propertyNames = (Array.isArray(propertyPath)) ? propertyPath : propertyPath.trim().split('.');
        var ok = true;
        var key = useServerName === true ? "nameOnServer" : useServerName === false ? "name" : null;
        var parentType = this;
        var getProps = function (propName) {
            var fn = key === null ? core.propsEq("name", "nameOnServer", propName) : core.propEq(key, propName);
            var prop = core.arrayFirst(parentType.getProperties(), fn);
            if (prop) {
                parentType = (prop instanceof NavigationProperty) ? prop.entityType : prop.dataType;
                // parentType = prop.isNavigationProperty ? prop.entityType : prop.dataType;
            }
            else if (throwIfNotFound) {
                throw new Error("unable to locate property: " + propName + " on entityType: " + parentType.name);
            }
            else {
                ok = false;
            }
            return prop;
        };
        var props = propertyNames.map(getProps);
        return ok ? props : null;
    };
    /** For use in pluggable adapters. */
    // TODO: document use
    EntityType.prototype.clientPropertyPathToServer = function (propertyPath, delimiter) {
        if (delimiter === void 0) { delimiter = '.'; }
        var propNames;
        if (this.isAnonymous) {
            var fn_1 = this.metadataStore.namingConvention.clientPropertyNameToServer;
            propNames = propertyPath.split(".").map(function (propName) {
                return fn_1(propName);
            });
        }
        else {
            var props = this.getPropertiesOnPath(propertyPath, false, true);
            propNames = props.map(function (prop) { return prop.nameOnServer; });
        }
        return propNames.join(delimiter);
    };
    /** For use in pluggable adapters. */
    // TODO: document use
    EntityType.prototype.getEntityKeyFromRawEntity = function (rawEntity, rawValueFn) {
        var keyValues = this.keyProperties.map(function (dp) {
            var val = rawValueFn(rawEntity, dp);
            return DataType.parseRawValue(val, dp.dataType);
        });
        return new EntityKey(this, keyValues);
    };
    /** @hidden @internal */
    EntityType.prototype._updateTargetFromRaw = function (target, raw, rawValueFn) {
        // called recursively for complex properties
        this.dataProperties.forEach(function (dp) {
            if (!dp.isSettable)
                return;
            var rawVal = rawValueFn(raw, dp);
            if (rawVal === undefined)
                return;
            var dataType = dp.dataType; // this will be a complexType when dp is a complexProperty
            var oldVal;
            if (dp.isComplexProperty) {
                var complexType_1 = dp.dataType;
                if (rawVal === null)
                    return; // rawVal may be null in nosql dbs where it was never defined for the given row.
                oldVal = target.getProperty(dp.name);
                if (dp.isScalar) {
                    complexType_1._updateTargetFromRaw(oldVal, rawVal, rawValueFn);
                }
                else {
                    if (Array.isArray(rawVal)) {
                        var newVal = rawVal.map(function (rawCo) {
                            var newCo = complexType_1._createInstanceCore(target, dp);
                            complexType_1._updateTargetFromRaw(newCo, rawCo, rawValueFn);
                            complexType_1._initializeInstance(newCo);
                            return newCo;
                        });
                        if (!core.arrayEquals(oldVal, newVal, coEquals)) {
                            // clear the old array and push new objects into it.
                            oldVal.length = 0;
                            newVal.forEach(function (nv) {
                                oldVal.push(nv);
                            });
                        }
                    }
                    else {
                        oldVal.length = 0;
                    }
                }
            }
            else {
                if (dp.isScalar) {
                    var newVal = DataType.parseRawValue(rawVal, dataType);
                    target.setProperty(dp.name, newVal);
                }
                else {
                    oldVal = target.getProperty(dp.name);
                    if (Array.isArray(rawVal)) {
                        // need to compare values
                        var newVal = rawVal.map(function (rv) {
                            return DataType.parseRawValue(rv, dataType);
                        });
                        if (!core.arrayEquals(oldVal, newVal)) {
                            // clear the old array and push new objects into it.
                            oldVal.length = 0;
                            newVal.forEach(function (nv) {
                                oldVal.push(nv);
                            });
                        }
                    }
                    else {
                        oldVal.length = 0;
                    }
                }
            }
        });
        // if merging from an import then raw will have an entityAspect or a complexAspect
        var rawAspect = raw.entityAspect || raw.complexAspect;
        if (rawAspect) {
            var targetAspect = EntityAspect.isEntity(target) ? target.entityAspect : target.complexAspect;
            if (rawAspect.originalValuesMap) {
                targetAspect.originalValues = rawAspect.originalValuesMap;
            }
            if (rawAspect.extraMetadata) {
                targetAspect.extraMetadata = rawAspect.extraMetadata;
            }
        }
    };
    /**
    Returns a string representation of this EntityType.
    **/
    EntityType.prototype.toString = function () {
        return this.name;
    };
    EntityType.prototype.toJSON = function () {
        return core.toJson(this, {
            shortName: null,
            namespace: null,
            baseTypeName: null,
            isAbstract: false,
            autoGeneratedKeyType: null,
            defaultResourceName: null,
            dataProperties: localPropsOnly,
            navigationProperties: localPropsOnly,
            validators: null,
            custom: null
        });
    };
    /** @hidden @internal */
    EntityType.prototype._updateNames = function (property) {
        var nc = this.metadataStore.namingConvention;
        updateClientServerNames(nc, property, "name");
        if (property.isNavigationProperty) {
            updateClientServerNames(nc, property, "foreignKeyNames");
            updateClientServerNames(nc, property, "invForeignKeyNames");
            // these will get set later via _updateNps
            // this.inverse
            // this.entityType
            // this.relatedDataProperties
            //    dataProperty.relatedNavigationProperty
            //    dataProperty.inverseNavigationProperty
        }
    };
    /** @hidden @internal */
    EntityType.prototype._checkNavProperty = function (navigationProperty) {
        // if (navigationProperty.isNavigationProperty) {
        if (navigationProperty instanceof NavigationProperty) {
            if (navigationProperty.parentType !== this) {
                throw new Error(core.formatString("The navigationProperty '%1' is not a property of entity type '%2'", navigationProperty.name, this.name));
            }
            return navigationProperty;
        }
        if (typeof (navigationProperty) === 'string') {
            var np = this.getProperty(navigationProperty);
            // if (np && np.isNavigationProperty) return np;
            if (np && np instanceof NavigationProperty)
                return np;
        }
        throw new Error("The 'navigationProperty' parameter must either be a NavigationProperty or the name of a NavigationProperty");
    };
    /** @hidden @internal */
    EntityType.prototype._addDataProperty = function (dp) {
        this.dataProperties.push(dp);
        if (dp.isPartOfKey) {
            this.keyProperties.push(dp);
        }
        if (dp.isComplexProperty) {
            this.complexProperties.push(dp);
        }
        if (dp.concurrencyMode && dp.concurrencyMode !== "None") {
            this.concurrencyProperties.push(dp);
        }
        if (dp.isUnmapped) {
            this.unmappedProperties.push(dp);
        }
    };
    /** @hidden @internal */
    EntityType.prototype._addNavigationProperty = function (np) {
        this.navigationProperties.push(np);
        if (!isQualifiedTypeName(np.entityTypeName)) {
            np.entityTypeName = qualifyTypeName(np.entityTypeName, this.namespace);
        }
    };
    /** @hidden @internal */
    EntityType.prototype._updateCps = function () {
        var metadataStore = this.metadataStore;
        var incompleteTypeMap = metadataStore._incompleteComplexTypeMap;
        this.complexProperties.forEach(function (cp) {
            if (cp.complexType)
                return;
            if (!resolveCp(cp, metadataStore)) {
                core.getArray(incompleteTypeMap, cp.complexTypeName).push(cp);
            }
        });
        if (this.isComplexType) {
            (incompleteTypeMap[this.name] || []).forEach(function (cp) {
                resolveCp(cp, metadataStore);
            });
            delete incompleteTypeMap[this.name];
        }
    };
    /** @hidden @internal */
    EntityType.prototype._updateNps = function () {
        var metadataStore = this.metadataStore;
        // resolve all navProps for this entityType
        this.navigationProperties.forEach(function (np) {
            tryResolveNp(np, metadataStore);
        });
        var incompleteTypeMap = metadataStore._incompleteTypeMap;
        // next resolve all navProp that point to this entityType.
        (incompleteTypeMap[this.name] || []).forEach(function (np) {
            tryResolveNp(np, metadataStore);
        });
        // every navProp that pointed to this type should now be resolved
        delete incompleteTypeMap[this.name];
    };
    /** @hidden @internal */
    EntityType.__nextAnonIx = 0;
    /** @hidden @internal */
    EntityType.qualifyTypeName = qualifyTypeName;
    return EntityType;
}());
export { EntityType };
EntityType.prototype._$typeName = "EntityType";
function getRawValueFromConfig(rawEntity, dp) {
    // 'true' fork can happen if an initializer contains an actaul instance of an already created complex object.
    return (rawEntity.entityAspect || rawEntity.complexAspect) ? rawEntity.getProperty(dp.name) : rawEntity[dp.name];
}
function updateClientServerNames(nc, parent, clientPropName) {
    var serverPropName = clientPropName + "OnServer";
    var clientName = parent[clientPropName];
    if (clientName && clientName.length) {
        // if (parent.isUnmapped) return;
        var serverNames = core.toArray(clientName).map(function (cName) {
            var sName = nc.clientPropertyNameToServer(cName, parent);
            var testName = nc.serverPropertyNameToClient(sName, parent);
            if (cName !== testName) {
                throw new Error("NamingConvention for this client property name does not roundtrip properly:" + cName + "-->" + testName);
            }
            return sName;
        });
        parent[serverPropName] = Array.isArray(clientName) ? serverNames : serverNames[0];
    }
    else {
        var serverName = parent[serverPropName];
        if ((!serverName) || serverName.length === 0)
            return;
        var clientNames = core.toArray(serverName).map(function (sName) {
            var cName = nc.serverPropertyNameToClient(sName, parent);
            var testName = nc.clientPropertyNameToServer(cName, parent);
            if (sName !== testName) {
                throw new Error("NamingConvention for this server property name does not roundtrip properly:" + sName + "-->" + testName);
            }
            return cName;
        });
        parent[clientPropName] = Array.isArray(serverName) ? clientNames : clientNames[0];
    }
}
function createEmptyCtor(type) {
    if (config.noEval) {
        var Entity = function () { };
        return Entity;
    }
    else {
        var name_1 = type.name.replace(/\W/g, '_');
        return Function('return function ' + name_1 + '(){}')();
    }
}
function coEquals(co1, co2) {
    var complexType = co1.complexAspect.parentProperty.dataType;
    var dataProps = complexType.dataProperties;
    var areEqual = dataProps.every(function (dp) {
        if (!dp.isSettable)
            return true;
        var v1 = co1.getProperty(dp.name);
        var v2 = co2.getProperty(dp.name);
        if (dp.isComplexProperty && dp.isScalar) {
            return coEquals(v1, v2);
        }
        else if (dp.isComplexProperty && !dp.isScalar) {
            return core.arrayEquals(v1, v2, coEquals);
        }
        else {
            var dataType = dp.dataType; // this will be a complexType when dp is a complexProperty
            return (v1 === v2 || (dataType && dataType.normalize && v1 && v2 && dataType.normalize(v1) === dataType.normalize(v2)));
        }
    });
    return areEqual;
}
function localPropsOnly(props) {
    return props.filter(function (prop) {
        return prop.baseProperty == null;
    });
}
function resolveCp(cp, metadataStore) {
    var complexType = metadataStore._getStructuralType(cp.complexTypeName, true);
    if (!complexType)
        return false;
    if (!(complexType instanceof ComplexType)) {
        throw new Error("Unable to resolve ComplexType with the name: " + cp.complexTypeName + " for the property: " + cp.name);
    }
    cp.dataType = complexType;
    cp.defaultValue = null;
    return true;
}
function tryResolveNp(np, metadataStore) {
    if (np.entityType)
        return true;
    var entityType = metadataStore._getStructuralType(np.entityTypeName, true);
    if (entityType) {
        np.entityType = entityType;
        np._resolveNp();
        // don't bother removing - _updateNps will do it later.
        // __arrayRemoveItem(incompleteNps, np, false);
    }
    else {
        var incompleteNps = core.getArray(metadataStore._incompleteTypeMap, np.entityTypeName);
        core.arrayAddItemUnique(incompleteNps, np);
    }
    return !!entityType;
}
function calcUnmappedProperties(stype, instance) {
    var metadataPropNames = stype.getPropertyNames();
    var modelLib = config.interfaceRegistry.modelLibrary.getDefaultInstance();
    var trackablePropNames = modelLib.getTrackablePropertyNames(instance);
    trackablePropNames.forEach(function (pn) {
        if (metadataPropNames.indexOf(pn) === -1) {
            var val = instance[pn];
            try {
                if (typeof val === "function")
                    val = val();
            }
            catch (e) {
            }
            var dt = DataType.fromValue(val);
            var newProp_1 = new DataProperty({
                name: pn,
                dataType: dt,
                isNullable: true,
                isUnmapped: true
            });
            newProp_1.isSettable = core.isSettable(instance, pn);
            if (stype instanceof EntityType && stype.subtypes != null && stype.subtypes.length) {
                stype.getSelfAndSubtypes().forEach(function (st) {
                    st._addPropertyCore(new DataProperty(newProp_1));
                });
            }
            else {
                stype._addPropertyCore(newProp_1);
            }
        }
    });
}
/**  Container for all of the metadata about a specific type of Complex object.
>     let complexType = new ComplexType( {
>         shortName: "address",
>         namespace: "myAppNamespace"
>     });
@param config - Configuration settings
**/
var ComplexType = /** @class */ (function () {
    function ComplexType(config) {
        /** For polymorphic purpose only - always true here */
        this.isComplexType = true;
        // copy entityType methods onto complexType
        /** See [[EntityType.getCtor]] */
        this.getCtor = EntityType.prototype.getCtor;
        // note the name change.
        this.createInstance = EntityType.prototype.createEntity;
        /** See [EntityType.addValidator] */
        this.addValidator = EntityType.prototype.addValidator;
        this.getProperty = EntityType.prototype.getProperty;
        this.getPropertiesOnPath = EntityType.prototype.getPropertiesOnPath;
        this.getPropertyNames = EntityType.prototype.getPropertyNames;
        /** @hidden @internal */
        this._addPropertyCore = EntityType.prototype._addPropertyCore;
        /** @hidden @internal */
        this._addDataProperty = EntityType.prototype._addDataProperty;
        /** @hidden @internal */
        this._updateNames = EntityType.prototype._updateNames;
        /** @hidden @internal */
        this._updateCps = EntityType.prototype._updateCps;
        /** @hidden @internal */
        this._initializeInstance = EntityType.prototype._initializeInstance;
        /** @hidden @internal */
        this._updateTargetFromRaw = EntityType.prototype._updateTargetFromRaw;
        /** @hidden @internal */
        this._setCtor = EntityType.prototype._setCtor;
        if (arguments.length > 1) {
            throw new Error("The ComplexType ctor has a single argument that is a configuration object.");
        }
        assertConfig(config)
            .whereParam("shortName").isNonEmptyString()
            .whereParam("namespace").isString().isOptional().withDefault("")
            .whereParam("dataProperties").isOptional()
            .whereParam("isComplexType").isOptional().isBoolean() // needed because this ctor can get called from the addEntityType method which needs the isComplexType prop
            .whereParam("custom").isOptional()
            .applyAll(this);
        this.name = qualifyTypeName(this.shortName, this.namespace);
        this.isComplexType = true;
        this.dataProperties = [];
        this.complexProperties = [];
        this.validators = [];
        this.concurrencyProperties = [];
        this.unmappedProperties = [];
        this._mappedPropertiesCount = 0;
        // keyProperties and navigationProperties are not used on complexTypes - but here to allow sharing of code between EntityType and ComplexType.
        this.navigationProperties = [];
        this.keyProperties = []; // may be used later to enforce uniqueness on arrays of complextypes.
        if (config.dataProperties) {
            addProperties(this, config.dataProperties, DataProperty);
        }
    }
    /**
    General purpose property set method
    >      // assume em1 is an EntityManager
    >      let addresstType = em1.metadataStore.getEntityType("Address");
    >      addressType.setProperties( {
    >          custom: { foo: 7, bar: "test" }
    >      });
    @param config - Custom config object
    @param config.custom - {Object}
    **/
    ComplexType.prototype.setProperties = function (config) {
        assertConfig(config)
            .whereParam("custom").isOptional()
            .applyAll(this);
    };
    ComplexType.prototype.getAllValidators = function () {
        // ComplexType inheritance is not YET supported.
        return this.validators;
    };
    /** @hidden @internal */
    ComplexType.prototype._createInstanceCore = function (parent, parentProperty) {
        var aCtor = this.getCtor();
        var instance = new aCtor();
        new ComplexAspect(instance, parent, parentProperty);
        // initialization occurs during either attach or in createInstance call.
        return instance;
    };
    ComplexType.prototype.addProperty = function (dataProperty) {
        assertParam(dataProperty, "dataProperty").isInstanceOf(DataProperty).check();
        return this._addPropertyCore(dataProperty);
    };
    ComplexType.prototype.getProperties = function () {
        return this.dataProperties;
    };
    ComplexType.prototype.toJSON = function () {
        return core.toJson(this, {
            shortName: null,
            namespace: null,
            isComplexType: null,
            dataProperties: null,
            validators: null,
            custom: null
        });
    };
    return ComplexType;
}());
export { ComplexType };
ComplexType.prototype._$typeName = "ComplexType";
/** Creates an instance of this complexType */
ComplexType.prototype.createInstance = EntityType.prototype.createEntity;
/**
A DataProperty describes the metadata for a single property of an  [[EntityType]] that contains simple data.

Instances of the DataProperty class are constructed automatically during Metadata retrieval. However it is also possible to construct them
directly via the constructor.
**/
var DataProperty = /** @class */ (function () {
    /** DataProperty constructor
    >      let lastNameProp = new DataProperty( {
    >          name: "lastName",
    >          dataType: DataType.String,
    >          isNullable: true,
    >          maxLength: 20
    >      });
    >      // assuming personEntityType is a newly constructed EntityType
    >      personEntityType.addProperty(lastNameProperty);
    @param config - A configuration Object or a DataProperty
    */
    function DataProperty(config) {
        /** Is this a DataProperty? - always true here. Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */
        this.isDataProperty = true;
        /** Is this a NavigationProperty? - always false here.  Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */
        this.isNavigationProperty = false;
        assertConfig(config)
            .whereParam("name").isString().isOptional()
            .whereParam("nameOnServer").isString().isOptional()
            .whereParam("dataType").isEnumOf(DataType).isOptional().or().isString().or().isInstanceOf(ComplexType)
            .whereParam("complexTypeName").isOptional()
            .whereParam("isNullable").isBoolean().isOptional().withDefault(true)
            .whereParam("isScalar").isOptional().withDefault(true) // will be false for some NoSQL databases.
            .whereParam("defaultValue").isOptional()
            .whereParam("isPartOfKey").isBoolean().isOptional()
            .whereParam("isUnmapped").isBoolean().isOptional()
            .whereParam("isSettable").isBoolean().isOptional().withDefault(true)
            .whereParam("concurrencyMode").isString().isOptional()
            .whereParam("maxLength").isNumber().isOptional()
            .whereParam("validators").isInstanceOf(Validator).isArray().isOptional().withDefault([])
            .whereParam("displayName").isOptional()
            .whereParam("enumType").isOptional()
            .whereParam("rawTypeName").isOptional() // occurs with undefined datatypes
            .whereParam("custom").isOptional()
            .applyAll(this);
        var hasName = !!(this.name || this.nameOnServer);
        if (!hasName) {
            throw new Error("A DataProperty must be instantiated with either a 'name' or a 'nameOnServer' property");
        }
        // name/nameOnServer is resolved later when a metadataStore is available.
        if (this.complexTypeName) {
            this.isComplexProperty = true;
            // this.dataType = null; // TODO: would like to remove this line because dataType will be set later.
        }
        else if (typeof (this.dataType) === "string") {
            var dt = DataType.fromName(this.dataType);
            if (!dt) {
                throw new Error("Unable to find a DataType enumeration by the name of: " + this.dataType);
            }
            this.dataType = dt;
        }
        else if (!this.dataType) {
            this.dataType = DataType.String;
        }
        // == as opposed to === is deliberate here.
        if (this.defaultValue == null) {
            if (this.isNullable) {
                this.defaultValue = null;
            }
            else {
                if (this.isComplexProperty) {
                    // what to do? - shouldn't happen from EF - but otherwise ???
                }
                else if (this.dataType === DataType.Binary) {
                    this.defaultValue = "AAAAAAAAJ3U="; // hack for all binary fields but value is specifically valid for timestamp fields - arbitrary valid 8 byte base64 value.
                }
                else {
                    this.defaultValue = this.dataType.defaultValue;
                    if (this.defaultValue == null) {
                        throw new Error("A nonnullable DataProperty cannot have a null defaultValue. Name: " + (this.name || this.nameOnServer));
                    }
                }
            }
        }
        else if (this.dataType.isNumeric) {
            // in case the defaultValue comes in as a string ( which it does in EF6).
            if (typeof (this.defaultValue) === "string") {
                this.defaultValue = parseFloat(this.defaultValue);
            }
        }
        if (this.isComplexProperty) {
            this.isScalar = this.isScalar == null || this.isScalar === true;
        }
    }
    DataProperty.getRawValueFromServer = function (rawEntity, dp) {
        if (dp.isUnmapped) {
            return rawEntity[dp.nameOnServer || dp.name];
        }
        else {
            var val = rawEntity[dp.nameOnServer];
            return val !== undefined ? val : dp.defaultValue;
        }
    };
    DataProperty.getRawValueFromClient = function (rawEntity, dp) {
        var val = rawEntity[dp.name];
        return val !== undefined ? val : dp.defaultValue;
    };
    DataProperty.prototype.resolveProperty = function (propName) {
        var result = this[propName];
        var baseProp = this.baseProperty;
        while (result == undefined && baseProp != null) {
            result = baseProp[propName];
            baseProp = baseProp.baseProperty;
        }
        return result;
    };
    DataProperty.prototype.formatName = function () {
        return this.parentType.name + "--" + this.name;
    };
    /**
    General purpose property set method
    >      // assume em1 is an EntityManager
    >      let prop = myEntityType.getProperty("myProperty");
    >      prop.setProperties( {
    >          custom: { foo: 7, bar: "test" }
    >      });
    @param config - A configuration object.
    **/
    DataProperty.prototype.setProperties = function (config) {
        assertConfig(config)
            .whereParam("displayName").isOptional()
            .whereParam("custom").isOptional()
            .applyAll(this);
    };
    DataProperty.prototype.getAllValidators = function () {
        var validators = this.validators.slice(0);
        var baseProp = this.baseProperty;
        while (baseProp) {
            validators.push.apply(validators, baseProp.validators);
            baseProp = baseProp.baseProperty;
        }
        return validators;
    };
    DataProperty.prototype.toJSON = function () {
        // do not serialize dataTypes that are complexTypes
        return core.toJson(this, {
            name: null,
            dataType: function (v) {
                return (v && v instanceof DataType) ? v.name : undefined;
            },
            complexTypeName: null,
            isNullable: true,
            defaultValue: null,
            isPartOfKey: false,
            isUnmapped: false,
            isSettable: true,
            concurrencyMode: null,
            maxLength: null,
            validators: null,
            displayName: null,
            enumType: null,
            rawTypeName: null,
            isScalar: true,
            custom: null
        });
    };
    DataProperty.fromJSON = function (json) {
        json.dataType = DataType.fromName(json.dataType);
        // Parse default value into correct data type. (dateTime instances require extra work to deserialize properly.)
        if (json.defaultValue && json.dataType && json.dataType.parse) {
            json.defaultValue = json.dataType.parse(json.defaultValue, typeof json.defaultValue);
        }
        if (json.validators) {
            json.validators = json.validators.map(Validator.fromJSON);
        }
        return new DataProperty(json);
    };
    return DataProperty;
}());
export { DataProperty };
DataProperty.prototype._$typeName = "DataProperty";
/**   A NavigationProperty describes the metadata for a single property of an [[EntityType]] that return instances of other EntityTypes.

Instances of the NavigationProperty class are constructed automatically during Metadata retrieval.   However it is also possible to construct them
directly via the constructor.
**/
var NavigationProperty = /** @class */ (function () {
    /** NavigationProperty constructor
    >      let homeAddressProp = new NavigationProperty( {
    >          name: "homeAddress",
    >          entityTypeName: "Address:#myNamespace",
    >          isScalar: true,
    >          associationName: "address_person",
    >          foreignKeyNames: ["homeAddressId"]
    >      });
    >      let homeAddressIdProp = new DataProperty( {
    >          name: "homeAddressId"
    >          dataType: DataType.Integer
    >      });
    >      // assuming personEntityType is a newly constructed EntityType
    >      personEntityType.addProperty(homeAddressProp);
    >      personEntityType.addProperty(homeAddressIdProp);
    @param config - A configuration object.
    **/
    function NavigationProperty(config) {
        /** Is this a DataProperty? - always false here
        Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */
        this.isDataProperty = false;
        /** Is this a NavigationProperty? - always true here
        Allows polymorphic treatment of DataProperties and NavigationProperties. __Read Only__ */
        this.isNavigationProperty = true;
        this.formatName = DataProperty.prototype.formatName;
        this.getAllValidators = DataProperty.prototype.getAllValidators;
        this.resolveProperty = DataProperty.prototype.resolveProperty;
        assertConfig(config)
            .whereParam("name").isString().isOptional()
            .whereParam("nameOnServer").isString().isOptional()
            .whereParam("entityTypeName").isString()
            .whereParam("isScalar").isBoolean().isOptional().withDefault(true)
            .whereParam("associationName").isString().isOptional()
            .whereParam("foreignKeyNames").isArray().isString().isOptional().withDefault([])
            .whereParam("foreignKeyNamesOnServer").isArray().isString().isOptional().withDefault([])
            .whereParam("invForeignKeyNames").isArray().isString().isOptional().withDefault([])
            .whereParam("invForeignKeyNamesOnServer").isArray().isString().isOptional().withDefault([])
            .whereParam("validators").isInstanceOf(Validator).isArray().isOptional().withDefault([])
            .whereParam("displayName").isOptional()
            .whereParam("custom").isOptional()
            .applyAll(this);
        var hasName = !!(this.name || this.nameOnServer);
        if (!hasName) {
            throw new Error("A Navigation property must be instantiated with either a 'name' or a 'nameOnServer' property");
        }
    }
    /**
    General purpose property set method
    >      // assume myEntityType is an EntityType
    >      let prop = myEntityType.getProperty("myProperty");
    >      prop.setProperties( {
    >          custom: { foo: 7, bar: "test" }
    >      });
    @param config - A config object
    **/
    // TODO: create an interface for this.
    NavigationProperty.prototype.setProperties = function (config) {
        if (!this.parentType) {
            throw new Error("Cannot call NavigationProperty.setProperties until the parent EntityType of the NavigationProperty has been set.");
        }
        var inverse = config.inverse;
        if (inverse)
            delete config.inverse;
        assertConfig(config)
            .whereParam("displayName").isOptional()
            .whereParam("foreignKeyNames").isArray().isString().isOptional().withDefault([])
            .whereParam("invForeignKeyNames").isArray().isString().isOptional().withDefault([])
            .whereParam("custom").isOptional()
            .applyAll(this);
        this.parentType._updateNames(this);
        this._resolveNp();
        if (inverse) {
            this.setInverse(inverse);
        }
    };
    Object.defineProperty(NavigationProperty.prototype, "inverse", {
        /** The inverse of this NavigationProperty.  The NavigationProperty that represents a navigation in the opposite direction
        to this NavigationProperty. May be undefined for a undirectional NavigationProperty. __Read Only__ */
        get: function () {
            return this.getInverse();
        },
        enumerable: true,
        configurable: true
    });
    /** @hidden @internal */
    NavigationProperty.prototype.getInverse = function () {
        var np = this;
        while (!np._inverse && np.baseProperty) {
            np = np.baseProperty;
        }
        return np._inverse;
    };
    NavigationProperty.prototype.setInverse = function (inverseNp) {
        // let invNp: NavigationProperty;
        var invNp = (inverseNp instanceof NavigationProperty) ? inverseNp : this.entityType.getNavigationProperty(inverseNp);
        if (!invNp) {
            throw throwSetInverseError(this, "Unable to find inverse property: " + inverseNp);
        }
        if (this._inverse || invNp._inverse) {
            throwSetInverseError(this, "It has already been set on one side or the other.");
        }
        if (invNp.entityType !== this.parentType) {
            throwSetInverseError(this, invNp.formatName + " is not a valid inverse property for this.");
        }
        if (this.associationName) {
            invNp.associationName = this.associationName;
        }
        else {
            if (!invNp.associationName) {
                invNp.associationName = this.formatName() + "_" + invNp.formatName();
            }
            this.associationName = invNp.associationName;
        }
        this._resolveNp();
        invNp._resolveNp();
    };
    // // In progress - will be used for manual metadata config
    // createInverse(config: any) {
    //   if (!this.entityType) {
    //     throwCreateInverseError(this, "has not yet been defined.");
    //   }
    //   if (this.entityType.isFrozen) {
    //     throwCreateInverseError(this, "is frozen.");
    //   }
    //   let metadataStore = this.entityType.metadataStore;
    //   if (metadataStore == null) {
    //     throwCreateInverseError(this, "has not yet been added to the metadataStore.");
    //   }
    //   config.entityTypeName = this.parentEntityType.name;
    //   config.associationName = this.associationName;
    //   let invNp = new NavigationProperty(config);
    //   this.parentEntityType.addNavigationProperty(invNp);
    //   return invNp;
    // };
    NavigationProperty.prototype.toJSON = function () {
        return core.toJson(this, {
            name: null,
            entityTypeName: null,
            isScalar: null,
            associationName: null,
            validators: null,
            displayName: null,
            foreignKeyNames: null,
            invForeignKeyNames: null,
            custom: null
        });
    };
    NavigationProperty.fromJSON = function (json) {
        if (json.validators) {
            json.validators = json.validators.map(Validator.fromJSON);
        }
        return new NavigationProperty(json);
    };
    /** @hidden @internal */
    NavigationProperty.prototype._resolveNp = function () {
        var np = this;
        var entityType = np.entityType;
        var invNp = core.arrayFirst(entityType.navigationProperties, function (altNp) {
            // Can't do this because of possibility of comparing a base class np with a subclass altNp.
            // return altNp.associationName === np.associationName
            //    && altNp !== np;
            // So use this instead.
            return altNp.associationName === np.associationName &&
                (altNp.name !== np.name || altNp.entityTypeName !== np.entityTypeName);
        });
        np._inverse = invNp || undefined;
        //if (invNp && invNp.inverse == null) {
        //    invNp._resolveNp();
        //}
        if (!invNp) {
            // unidirectional 1-n relationship
            np.invForeignKeyNames.forEach(function (invFkName) {
                var fkProp = entityType.getDataProperty(invFkName);
                if (fkProp == null) {
                    throw new Error("EntityType '" + np.entityTypeName + "' has no foreign key matching '" + invFkName + "'");
                }
                var invEntityType = np.parentType;
                invNp = core.arrayFirst(invEntityType.navigationProperties, function (np2) {
                    return np2.invForeignKeyNames && np2.invForeignKeyNames.indexOf(fkProp.name) >= 0 && np2.entityType === fkProp.parentType;
                });
                fkProp.inverseNavigationProperty = invNp || undefined;
                core.arrayAddItemUnique(entityType.foreignKeyProperties, fkProp);
            });
        }
        resolveRelated(np);
    };
    return NavigationProperty;
}());
export { NavigationProperty };
NavigationProperty.prototype._$typeName = "NavigationProperty";
function throwSetInverseError(np, message) {
    throw new Error("Cannot set the inverse property for: " + np.formatName() + ". " + message);
}
// Not current used.
// function throwCreateInverseError(np: NavigationProperty, message: string) {
//   throw new Error("Cannot create inverse for: " + np.formatName() + ". The entityType for this navigation property " + message);
// }
// sets navigation property: relatedDataProperties and dataProperty: relatedNavigationProperty
function resolveRelated(np) {
    var fkNames = np.foreignKeyNames;
    if (fkNames.length === 0)
        return;
    var parentEntityType = np.parentType;
    var fkProps = fkNames.map(function (fkName) {
        return parentEntityType.getDataProperty(fkName);
    });
    var fkPropCollection = parentEntityType.foreignKeyProperties;
    fkProps.forEach(function (dp) {
        core.arrayAddItemUnique(fkPropCollection, dp);
        dp.relatedNavigationProperty = np;
        // now update the inverse
        core.arrayAddItemUnique(np.entityType.inverseForeignKeyProperties, dp);
        if (np.relatedDataProperties) {
            core.arrayAddItemUnique(np.relatedDataProperties, dp);
        }
        else {
            np.relatedDataProperties = [dp];
        }
    });
}
/**
AutoGeneratedKeyType is an 'Enum' containing all of the valid states for an automatically generated key.
**/
var AutoGeneratedKeyType = /** @class */ (function (_super) {
    tslib_1.__extends(AutoGeneratedKeyType, _super);
    function AutoGeneratedKeyType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    This entity does not have an autogenerated key.
    The client must set the key before adding the entity to the EntityManager
    **/
    AutoGeneratedKeyType.None = new AutoGeneratedKeyType();
    /**
    This entity's key is an Identity column and is set by the backend database.
    Keys for new entities will be temporary until the entities are saved at which point the keys will
    be converted to their 'real' versions.
    **/
    AutoGeneratedKeyType.Identity = new AutoGeneratedKeyType();
    /**
    This entity's key is generated by a KeyGenerator and is set by the backend database.
    Keys for new entities will be temporary until the entities are saved at which point the keys will
    be converted to their 'real' versions.
    **/
    AutoGeneratedKeyType.KeyGenerator = new AutoGeneratedKeyType();
    return AutoGeneratedKeyType;
}(BreezeEnum));
export { AutoGeneratedKeyType };
AutoGeneratedKeyType.prototype._$typeName = "AutoGeneratedKeyType";
Error['x'] = AutoGeneratedKeyType.resolveSymbols();
var proto = Param.prototype;
// 'this' below is TS annotation 
proto.isEntity = function () {
    return this._addContext({
        fn: isEntity,
        msg: " must be an entity"
    });
};
function isEntity(context, v) {
    if (v == null)
        return false;
    return (v.entityType !== undefined);
}
proto.isEntityProperty = function () {
    return this._addContext({
        fn: isEntityProperty,
        msg: " must be either a DataProperty or a NavigationProperty"
    });
};
function isEntityProperty(context, v) {
    if (v == null)
        return false;
    return (v.isDataProperty || v.isNavigationProperty);
}
// functions shared between classes related to Metadata
function isQualifiedTypeName(entityTypeName) {
    return entityTypeName.indexOf(":#") >= 0;
}
export function qualifyTypeName(shortName, ns) {
    if (ns && ns.length > 0) {
        return shortName + ":#" + ns;
    }
    else {
        return shortName;
    }
}
// Used by both ComplexType and EntityType
function addProperties(entityType, propObj, ctor) {
    if (propObj == null)
        return;
    if (Array.isArray(propObj)) {
        propObj.forEach(entityType._addPropertyCore.bind(entityType));
    }
    else if (typeof (propObj) === 'object') {
        for (var key in propObj) {
            if (core.hasOwnProperty(propObj, key)) {
                var value = propObj[key];
                value.name = key;
                var prop = new ctor(value);
                entityType._addPropertyCore(prop);
            }
        }
    }
    else {
        throw new Error("The 'dataProperties' or 'navigationProperties' values must be either an array of data/nav properties or an object where each property defines a data/nav property");
    }
}
//# sourceMappingURL=data:application/json;base64,