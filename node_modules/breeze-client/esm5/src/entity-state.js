import * as tslib_1 from "tslib";
import { BreezeEnum } from './enum';
/**
EntityState is an 'Enum' containing all of the valid states for an 'Entity'.
**/
var EntityState = /** @class */ (function (_super) {
    tslib_1.__extends(EntityState, _super);
    function EntityState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
    Returns whether an entityState instance is EntityState.Unchanged.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isUnchanged();
  
    is the same as
    >     return es === EntityState.Unchanged;
    **/
    EntityState.prototype.isUnchanged = function () {
        return this === EntityState.Unchanged;
    };
    /**
    Return whether an entityState instance is EntityState.Added.
    
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isAdded();
  
    is the same as
    >     return es === EntityState.Added;
    **/
    EntityState.prototype.isAdded = function () {
        return this === EntityState.Added;
    };
    /**
    Returns whether an entityState instance is EntityState.Modified.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isModified();
  
    is the same as
    >     return es === EntityState.Modified;
    **/
    EntityState.prototype.isModified = function () {
        return this === EntityState.Modified;
    };
    /**
    Returns whether an entityState instance is EntityState.Deleted.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isDeleted();
  
    is the same as
    
    >     return es === EntityState.Deleted;
    **/
    EntityState.prototype.isDeleted = function () {
        return this === EntityState.Deleted;
    };
    /**
    Returns whether an entityState instance is EntityState.Detached.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isDetached();
  
    is the same as
    >     return es === EntityState.Detached;
    **/
    EntityState.prototype.isDetached = function () {
        return this === EntityState.Detached;
    };
    /**
    Returns whether an entityState instance is EntityState.Unchanged or EntityState.Modified.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isUnchangedOrModified();
  
    is the same as
    >     return es === EntityState.Unchanged || es === EntityState.Modified
    **/
    EntityState.prototype.isUnchangedOrModified = function () {
        return this === EntityState.Unchanged || this === EntityState.Modified;
    };
    /** Returns whether an entityState instance is EntityState.Added or EntityState.Modified or EntityState.Deleted.
    >     var es = anEntity.entityAspect.entityState;
    >     return es.isAddedModifiedOrDeleted();
  
    is the same as
    >     return es === EntityState.Added || es === EntityState.Modified || es === EntityState.Deleted
    **/
    EntityState.prototype.isAddedModifiedOrDeleted = function () {
        return this === EntityState.Added ||
            this === EntityState.Modified ||
            this === EntityState.Deleted;
    };
    /** The 'Unchanged' state. **/
    EntityState.Unchanged = new EntityState();
    /**  The 'Added' state.  **/
    EntityState.Added = new EntityState();
    /**  The 'Modified' state.   **/
    EntityState.Modified = new EntityState();
    /**  The 'Deleted' state.  **/
    EntityState.Deleted = new EntityState();
    /**  The 'Detached' state.  **/
    EntityState.Detached = new EntityState();
    return EntityState;
}(BreezeEnum));
export { EntityState };
EntityState.prototype._$typeName = "EntityState";
Error['x'] = EntityState.resolveSymbols();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LXN0YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC8iLCJzb3VyY2VzIjpbInNyYy9lbnRpdHktc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFcEM7O0dBRUc7QUFDSDtJQUFpQyx1Q0FBVTtJQUEzQzs7SUFvR0EsQ0FBQztJQXZGQzs7Ozs7OztPQU9HO0lBQ0gsaUNBQVcsR0FBWDtRQUNFLE9BQU8sSUFBSSxLQUFLLFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDeEMsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsNkJBQU8sR0FBUDtRQUNFLE9BQU8sSUFBSSxLQUFLLFdBQVcsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxnQ0FBVSxHQUFWO1FBQ0UsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCwrQkFBUyxHQUFUO1FBQ0UsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILGdDQUFVLEdBQVY7UUFDRSxPQUFPLElBQUksS0FBSyxXQUFXLENBQUMsUUFBUSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsMkNBQXFCLEdBQXJCO1FBQ0UsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDLFNBQVMsSUFBSSxJQUFJLEtBQUssV0FBVyxDQUFDLFFBQVEsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsOENBQXdCLEdBQXhCO1FBQ0UsT0FBTyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUs7WUFDL0IsSUFBSSxLQUFLLFdBQVcsQ0FBQyxRQUFRO1lBQzdCLElBQUksS0FBSyxXQUFXLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7SUFoR0QsOEJBQThCO0lBQ3ZCLHFCQUFTLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUNyQyw0QkFBNEI7SUFDckIsaUJBQUssR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBQ2pDLGdDQUFnQztJQUN6QixvQkFBUSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7SUFDcEMsOEJBQThCO0lBQ3ZCLG1CQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztJQUNuQywrQkFBK0I7SUFDeEIsb0JBQVEsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBeUZ0QyxrQkFBQztDQUFBLEFBcEdELENBQWlDLFVBQVUsR0FvRzFDO1NBcEdZLFdBQVc7QUFxR3hCLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLGFBQWEsQ0FBQztBQUNqRCxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsV0FBVyxDQUFDLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnJlZXplRW51bSB9IGZyb20gJy4vZW51bSc7XHJcblxyXG4vKipcclxuRW50aXR5U3RhdGUgaXMgYW4gJ0VudW0nIGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB2YWxpZCBzdGF0ZXMgZm9yIGFuICdFbnRpdHknLlxyXG4qKi9cclxuZXhwb3J0IGNsYXNzIEVudGl0eVN0YXRlIGV4dGVuZHMgQnJlZXplRW51bSB7XHJcblxyXG4gIC8qKiBUaGUgJ1VuY2hhbmdlZCcgc3RhdGUuICoqL1xyXG4gIHN0YXRpYyBVbmNoYW5nZWQgPSBuZXcgRW50aXR5U3RhdGUoKTtcclxuICAvKiogIFRoZSAnQWRkZWQnIHN0YXRlLiAgKiovXHJcbiAgc3RhdGljIEFkZGVkID0gbmV3IEVudGl0eVN0YXRlKCk7XHJcbiAgLyoqICBUaGUgJ01vZGlmaWVkJyBzdGF0ZS4gICAqKi9cclxuICBzdGF0aWMgTW9kaWZpZWQgPSBuZXcgRW50aXR5U3RhdGUoKTtcclxuICAvKiogIFRoZSAnRGVsZXRlZCcgc3RhdGUuICAqKi9cclxuICBzdGF0aWMgRGVsZXRlZCA9IG5ldyBFbnRpdHlTdGF0ZSgpO1xyXG4gIC8qKiAgVGhlICdEZXRhY2hlZCcgc3RhdGUuICAqKi9cclxuICBzdGF0aWMgRGV0YWNoZWQgPSBuZXcgRW50aXR5U3RhdGUoKTtcclxuXHJcbiAgLyoqXHJcbiAgUmV0dXJucyB3aGV0aGVyIGFuIGVudGl0eVN0YXRlIGluc3RhbmNlIGlzIEVudGl0eVN0YXRlLlVuY2hhbmdlZC5cclxuICA+ICAgICB2YXIgZXMgPSBhbkVudGl0eS5lbnRpdHlBc3BlY3QuZW50aXR5U3RhdGU7XHJcbiAgPiAgICAgcmV0dXJuIGVzLmlzVW5jaGFuZ2VkKCk7XHJcblxyXG4gIGlzIHRoZSBzYW1lIGFzXHJcbiAgPiAgICAgcmV0dXJuIGVzID09PSBFbnRpdHlTdGF0ZS5VbmNoYW5nZWQ7XHJcbiAgKiovXHJcbiAgaXNVbmNoYW5nZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcyA9PT0gRW50aXR5U3RhdGUuVW5jaGFuZ2VkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgUmV0dXJuIHdoZXRoZXIgYW4gZW50aXR5U3RhdGUgaW5zdGFuY2UgaXMgRW50aXR5U3RhdGUuQWRkZWQuXHJcbiAgXHJcbiAgPiAgICAgdmFyIGVzID0gYW5FbnRpdHkuZW50aXR5QXNwZWN0LmVudGl0eVN0YXRlO1xyXG4gID4gICAgIHJldHVybiBlcy5pc0FkZGVkKCk7XHJcblxyXG4gIGlzIHRoZSBzYW1lIGFzXHJcbiAgPiAgICAgcmV0dXJuIGVzID09PSBFbnRpdHlTdGF0ZS5BZGRlZDtcclxuICAqKi9cclxuICBpc0FkZGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMgPT09IEVudGl0eVN0YXRlLkFkZGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgUmV0dXJucyB3aGV0aGVyIGFuIGVudGl0eVN0YXRlIGluc3RhbmNlIGlzIEVudGl0eVN0YXRlLk1vZGlmaWVkLlxyXG4gID4gICAgIHZhciBlcyA9IGFuRW50aXR5LmVudGl0eUFzcGVjdC5lbnRpdHlTdGF0ZTtcclxuICA+ICAgICByZXR1cm4gZXMuaXNNb2RpZmllZCgpO1xyXG5cclxuICBpcyB0aGUgc2FtZSBhc1xyXG4gID4gICAgIHJldHVybiBlcyA9PT0gRW50aXR5U3RhdGUuTW9kaWZpZWQ7XHJcbiAgKiovXHJcbiAgaXNNb2RpZmllZCgpIHtcclxuICAgIHJldHVybiB0aGlzID09PSBFbnRpdHlTdGF0ZS5Nb2RpZmllZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gIFJldHVybnMgd2hldGhlciBhbiBlbnRpdHlTdGF0ZSBpbnN0YW5jZSBpcyBFbnRpdHlTdGF0ZS5EZWxldGVkLlxyXG4gID4gICAgIHZhciBlcyA9IGFuRW50aXR5LmVudGl0eUFzcGVjdC5lbnRpdHlTdGF0ZTtcclxuICA+ICAgICByZXR1cm4gZXMuaXNEZWxldGVkKCk7XHJcblxyXG4gIGlzIHRoZSBzYW1lIGFzXHJcbiAgXHJcbiAgPiAgICAgcmV0dXJuIGVzID09PSBFbnRpdHlTdGF0ZS5EZWxldGVkO1xyXG4gICoqL1xyXG4gIGlzRGVsZXRlZCgpIHtcclxuICAgIHJldHVybiB0aGlzID09PSBFbnRpdHlTdGF0ZS5EZWxldGVkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgUmV0dXJucyB3aGV0aGVyIGFuIGVudGl0eVN0YXRlIGluc3RhbmNlIGlzIEVudGl0eVN0YXRlLkRldGFjaGVkLlxyXG4gID4gICAgIHZhciBlcyA9IGFuRW50aXR5LmVudGl0eUFzcGVjdC5lbnRpdHlTdGF0ZTtcclxuICA+ICAgICByZXR1cm4gZXMuaXNEZXRhY2hlZCgpO1xyXG5cclxuICBpcyB0aGUgc2FtZSBhc1xyXG4gID4gICAgIHJldHVybiBlcyA9PT0gRW50aXR5U3RhdGUuRGV0YWNoZWQ7XHJcbiAgKiovXHJcbiAgaXNEZXRhY2hlZCgpIHtcclxuICAgIHJldHVybiB0aGlzID09PSBFbnRpdHlTdGF0ZS5EZXRhY2hlZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gIFJldHVybnMgd2hldGhlciBhbiBlbnRpdHlTdGF0ZSBpbnN0YW5jZSBpcyBFbnRpdHlTdGF0ZS5VbmNoYW5nZWQgb3IgRW50aXR5U3RhdGUuTW9kaWZpZWQuXHJcbiAgPiAgICAgdmFyIGVzID0gYW5FbnRpdHkuZW50aXR5QXNwZWN0LmVudGl0eVN0YXRlO1xyXG4gID4gICAgIHJldHVybiBlcy5pc1VuY2hhbmdlZE9yTW9kaWZpZWQoKTtcclxuXHJcbiAgaXMgdGhlIHNhbWUgYXNcclxuICA+ICAgICByZXR1cm4gZXMgPT09IEVudGl0eVN0YXRlLlVuY2hhbmdlZCB8fCBlcyA9PT0gRW50aXR5U3RhdGUuTW9kaWZpZWRcclxuICAqKi9cclxuICBpc1VuY2hhbmdlZE9yTW9kaWZpZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcyA9PT0gRW50aXR5U3RhdGUuVW5jaGFuZ2VkIHx8IHRoaXMgPT09IEVudGl0eVN0YXRlLk1vZGlmaWVkO1xyXG4gIH1cclxuXHJcbiAgLyoqIFJldHVybnMgd2hldGhlciBhbiBlbnRpdHlTdGF0ZSBpbnN0YW5jZSBpcyBFbnRpdHlTdGF0ZS5BZGRlZCBvciBFbnRpdHlTdGF0ZS5Nb2RpZmllZCBvciBFbnRpdHlTdGF0ZS5EZWxldGVkLlxyXG4gID4gICAgIHZhciBlcyA9IGFuRW50aXR5LmVudGl0eUFzcGVjdC5lbnRpdHlTdGF0ZTtcclxuICA+ICAgICByZXR1cm4gZXMuaXNBZGRlZE1vZGlmaWVkT3JEZWxldGVkKCk7XHJcblxyXG4gIGlzIHRoZSBzYW1lIGFzXHJcbiAgPiAgICAgcmV0dXJuIGVzID09PSBFbnRpdHlTdGF0ZS5BZGRlZCB8fCBlcyA9PT0gRW50aXR5U3RhdGUuTW9kaWZpZWQgfHwgZXMgPT09IEVudGl0eVN0YXRlLkRlbGV0ZWRcclxuICAqKi9cclxuICBpc0FkZGVkTW9kaWZpZWRPckRlbGV0ZWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcyA9PT0gRW50aXR5U3RhdGUuQWRkZWQgfHxcclxuICAgICAgdGhpcyA9PT0gRW50aXR5U3RhdGUuTW9kaWZpZWQgfHxcclxuICAgICAgdGhpcyA9PT0gRW50aXR5U3RhdGUuRGVsZXRlZDtcclxuICB9XHJcblxyXG59XHJcbkVudGl0eVN0YXRlLnByb3RvdHlwZS5fJHR5cGVOYW1lID0gXCJFbnRpdHlTdGF0ZVwiO1xyXG5FcnJvclsneCddID0gRW50aXR5U3RhdGUucmVzb2x2ZVN5bWJvbHMoKTtcclxuIl19