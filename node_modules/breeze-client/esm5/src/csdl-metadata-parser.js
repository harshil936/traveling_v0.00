import { core } from './core';
import { MetadataStore, EntityType, ComplexType, DataProperty, NavigationProperty, AutoGeneratedKeyType } from './entity-metadata';
import { DataType } from './data-type';
import { Validator } from './validate';
function parse(metadataStore, schemas, altMetadata) {
    metadataStore._entityTypeResourceMap = {};
    schemas = core.toArray(schemas);
    schemas.forEach(function (schema) {
        if (schema.cSpaceOSpaceMapping) {
            // Web api only - not avail in OData.
            // TODO throw informative error if already parsed and converted to map on a previous pass
            var mappings = JSON.parse(schema.cSpaceOSpaceMapping);
            var newMap_1 = {};
            mappings.forEach(function (mapping) {
                newMap_1[mapping[0]] = mapping[1];
            });
            schema.cSpaceOSpaceMapping = newMap_1;
        }
        if (schema.entityContainer) {
            core.toArray(schema.entityContainer).forEach(function (container) {
                core.toArray(container.entitySet).forEach(function (entitySet) {
                    var entityTypeName = parseTypeNameWithSchema(entitySet.entityType, schema).typeName;
                    metadataStore.setEntityTypeForResourceName(entitySet.name, entityTypeName);
                    metadataStore._entityTypeResourceMap[entityTypeName] = entitySet.name;
                });
            });
        }
        // process complextypes before entity types.
        if (schema.complexType) {
            core.toArray(schema.complexType).forEach(function (ct) {
                parseCsdlComplexType(ct, schema, metadataStore);
            });
        }
        if (schema.entityType) {
            core.toArray(schema.entityType).forEach(function (et) {
                parseCsdlEntityType(et, schema, schemas, metadataStore);
            });
        }
    });
    var badNavProps = metadataStore.getIncompleteNavigationProperties();
    if (badNavProps.length > 0) {
        var msg = badNavProps.map(function (npa) {
            if (Array.isArray(npa)) {
                return npa.map(function (np) {
                    return np.parentType.name + ":" + np.name;
                }).join(', ');
            }
            return npa.parentType.name + ":" + npa.name;
        }).join(', ');
        throw new Error("Incomplete navigation properties: " + msg);
    }
    if (altMetadata) {
        metadataStore.importMetadata(altMetadata, true);
    }
    return metadataStore;
}
function parseCsdlEntityType(csdlEntityType, schema, schemas, metadataStore) {
    var shortName = csdlEntityType.name;
    var ns = getNamespaceFor(shortName, schema);
    var entityType = new EntityType({
        shortName: shortName,
        namespace: ns,
        isAbstract: csdlEntityType.abstract && csdlEntityType.abstract === 'true'
    });
    if (csdlEntityType.baseType) {
        var baseTypeName = parseTypeNameWithSchema(csdlEntityType.baseType, schema).typeName;
        entityType.baseTypeName = baseTypeName;
        var baseEntityType = metadataStore._getStructuralType(baseTypeName, true);
        if (baseEntityType) {
            completeParseCsdlEntityType(entityType, csdlEntityType, schema, schemas, metadataStore);
        }
        else {
            var deferrals = metadataStore._deferredTypes[baseTypeName];
            if (!deferrals) {
                deferrals = [];
                metadataStore._deferredTypes[baseTypeName] = deferrals;
            }
            deferrals.push({ entityType: entityType, csdlEntityType: csdlEntityType });
        }
    }
    else {
        completeParseCsdlEntityType(entityType, csdlEntityType, schema, schemas, metadataStore);
    }
    // entityType may or may not have been added to the metadataStore at this point.
    return entityType;
}
function completeParseCsdlEntityType(entityType, csdlEntityType, schema, schemas, metadataStore) {
    var keyNamesOnServer = csdlEntityType.key ? core.toArray(csdlEntityType.key.propertyRef).map(core.pluck("name")) : [];
    core.toArray(csdlEntityType.property).forEach(function (prop) {
        parseCsdlDataProperty(entityType, prop, schema, keyNamesOnServer);
    });
    core.toArray(csdlEntityType.navigationProperty).forEach(function (prop) {
        parseCsdlNavProperty(entityType, prop, schema, schemas);
    });
    metadataStore.addEntityType(entityType);
    entityType.defaultResourceName = metadataStore._entityTypeResourceMap[entityType.name];
    var deferredTypes = metadataStore._deferredTypes;
    var deferrals = deferredTypes[entityType.name];
    if (deferrals) {
        deferrals.forEach(function (d) {
            completeParseCsdlEntityType(d.entityType, d.csdlEntityType, schema, schemas, metadataStore);
        });
        delete deferredTypes[entityType.name];
    }
}
function parseCsdlComplexType(csdlComplexType, schema, metadataStore) {
    var shortName = csdlComplexType.name;
    var ns = getNamespaceFor(shortName, schema);
    var complexType = new ComplexType({
        shortName: shortName,
        namespace: ns
    });
    core.toArray(csdlComplexType.property).forEach(function (prop) {
        parseCsdlDataProperty(complexType, prop, schema);
    });
    metadataStore.addEntityType(complexType);
    return complexType;
}
function parseCsdlDataProperty(parentType, csdlProperty, schema, keyNamesOnServer) {
    var dp;
    var typeParts = csdlProperty.type.split(".");
    // Both tests on typeParts are necessary because of differing metadata conventions for OData and Edmx feeds.
    if (typeParts[0] === "Edm" && typeParts.length === 2) {
        dp = parseCsdlSimpleProperty(parentType, csdlProperty, keyNamesOnServer);
    }
    else {
        if (isEnumType(csdlProperty, schema)) {
            dp = parseCsdlSimpleProperty(parentType, csdlProperty, keyNamesOnServer);
            if (dp) {
                dp.enumType = csdlProperty.type;
            }
        }
        else {
            dp = parseCsdlComplexProperty(parentType, csdlProperty, schema);
        }
    }
    if (dp) {
        parentType._addPropertyCore(dp);
        addValidators(dp);
    }
    return dp;
}
function parseCsdlSimpleProperty(parentType, csdlProperty, keyNamesOnServer) {
    var dataType = DataType.fromEdmDataType(csdlProperty.type);
    if (dataType == null) {
        parentType.warnings.push("Unable to recognize DataType for property: " + csdlProperty.name + " DateType: " + csdlProperty.type);
        return undefined;
    }
    var isNullable = csdlProperty.nullable === 'true' || csdlProperty.nullable == null;
    // let fixedLength = csdlProperty.fixedLength ? csdlProperty.fixedLength === true : undefined;
    var isPartOfKey = keyNamesOnServer != null && keyNamesOnServer.indexOf(csdlProperty.name) >= 0;
    if (isPartOfKey && parentType instanceof EntityType && parentType.autoGeneratedKeyType === AutoGeneratedKeyType.None) {
        if (isIdentityProperty(csdlProperty)) {
            parentType.autoGeneratedKeyType = AutoGeneratedKeyType.Identity;
        }
    }
    // TODO: nit - don't set maxLength if null;
    var maxLength = csdlProperty.maxLength;
    maxLength = (maxLength == null || maxLength === "Max") ? null : parseInt(maxLength, 10);
    // can't set the name until we go thru namingConventions and these need the dp.
    var dp = new DataProperty({
        nameOnServer: csdlProperty.name,
        dataType: dataType,
        isNullable: isNullable,
        isPartOfKey: isPartOfKey,
        maxLength: maxLength,
        defaultValue: csdlProperty.defaultValue,
        // fixedLength: fixedLength,
        concurrencyMode: csdlProperty.concurrencyMode
    });
    if (dataType === DataType.Undefined) {
        dp.rawTypeName = csdlProperty.type;
    }
    return dp;
}
function parseCsdlComplexProperty(parentType, csdlProperty, schema) {
    // Complex properties are never nullable ( per EF specs)
    // let isNullable = csdlProperty.nullable === 'true' || csdlProperty.nullable == null;
    // let complexTypeName = csdlProperty.type.split("Edm.")[1];
    var complexTypeName = parseTypeNameWithSchema(csdlProperty.type, schema).typeName;
    // can't set the name until we go thru namingConventions and these need the dp.
    var dp = new DataProperty({
        nameOnServer: csdlProperty.name,
        complexTypeName: complexTypeName,
        isNullable: false
    });
    return dp;
}
function parseCsdlNavProperty(entityType, csdlProperty, schema, schemas) {
    var association = getAssociation(csdlProperty, schema, schemas);
    if (!association) {
        throw new Error("Unable to resolve Foreign Key Association: " + csdlProperty.relationship);
    }
    var toEnd = core.arrayFirst(association.end, function (assocEnd) {
        return assocEnd.role === csdlProperty.toRole;
    });
    var isScalar = toEnd.multiplicity !== "*";
    var dataType = parseTypeNameWithSchema(toEnd.type, schema).typeName;
    var constraint = association.referentialConstraint;
    if (!constraint) {
        // TODO: Revisit this later - right now we just ignore many-many and assocs with missing constraints.
        // Think about adding this back later.
        if (association.end[0].multiplicity === "*" && association.end[1].multiplicity === "*") {
            // ignore many to many relations for now
            return;
        }
        else {
            // For now assume it will be set later directly on the client.
            // other alternative is to throw an error:
            // throw new Error("Foreign Key Associations must be turned on for this model");
        }
    }
    var cfg = {
        nameOnServer: csdlProperty.name,
        entityTypeName: dataType,
        isScalar: isScalar,
        associationName: association.name,
    };
    if (constraint) {
        var principal = constraint.principal;
        var dependent = constraint.dependent;
        var propRefs = core.toArray(dependent.propertyRef);
        var fkNames = propRefs.map(core.pluck("name"));
        if (csdlProperty.fromRole === principal.role) {
            cfg.invForeignKeyNamesOnServer = fkNames;
        }
        else {
            // will be used later by np._update
            cfg.foreignKeyNamesOnServer = fkNames;
        }
    }
    var np = new NavigationProperty(cfg);
    entityType._addPropertyCore(np);
    return np;
}
function isEnumType(csdlProperty, schema) {
    if (schema.enumType)
        return isEdmxEnumType(csdlProperty, schema);
    else if (schema.extensions)
        return isODataEnumType(csdlProperty, schema);
    else
        return false;
}
function isEdmxEnumType(csdlProperty, schema) {
    var enumTypes = core.toArray(schema.enumType);
    var typeParts = csdlProperty.type.split(".");
    var baseTypeName = typeParts[typeParts.length - 1];
    return enumTypes.some(function (enumType) {
        return enumType.name === baseTypeName;
    });
}
function isODataEnumType(csdlProperty, schema) {
    var enumTypes = schema.extensions.filter(function (ext) {
        return ext.name === "EnumType";
    });
    var typeParts = csdlProperty.type.split(".");
    var baseTypeName = typeParts[typeParts.length - 1];
    return enumTypes.some(function (enumType) {
        return enumType.attributes.some(function (attr) {
            return attr.name === "Name" && attr.value === baseTypeName;
        });
    });
}
function addValidators(dataProperty) {
    var typeValidator;
    if (!dataProperty.isNullable) {
        dataProperty.validators.push(Validator.required());
    }
    if (dataProperty.isComplexProperty)
        return;
    if (dataProperty.dataType === DataType.String) {
        if (dataProperty.maxLength) {
            var validatorArgs = { maxLength: dataProperty.maxLength };
            typeValidator = Validator.maxLength(validatorArgs);
        }
        else {
            typeValidator = Validator.string();
        }
    }
    else {
        var validatorCtor = dataProperty.dataType.validatorCtor;
        if (!validatorCtor)
            return;
        typeValidator = validatorCtor();
    }
    dataProperty.validators.push(typeValidator);
}
function isIdentityProperty(csdlProperty) {
    // see if web api feed
    var propName = core.arrayFirst(Object.keys(csdlProperty), function (pn) {
        return pn.indexOf("StoreGeneratedPattern") >= 0;
    });
    if (propName) {
        return (csdlProperty[propName] === "Identity");
    }
    else {
        // see if Odata feed
        var extensions = csdlProperty.extensions;
        if (!extensions) {
            return false;
        }
        var identityExtn = core.arrayFirst(extensions, function (extension) {
            return extension.name === "StoreGeneratedPattern" && extension.value === "Identity";
        });
        return !!identityExtn;
    }
}
// Fast version
// np: schema.entityType[].navigationProperty.relationship -> schema.association
//   match( shortName(np.relationship) == schema.association[].name
//      --> association__
// Correct version
// np: schema.entityType[].navigationProperty.relationship -> schema.association
//   match( np.relationship == schema.entityContainer[0].associationSet[].association )
//      -> associationSet.name
//   match ( associationSet.name == schema.association[].name )
//      -> association
function getAssociation(csdlNavProperty, containingSchema, schemas) {
    var assocFullName = parseTypeNameWithSchema(csdlNavProperty.relationship, containingSchema);
    var assocNamespace = assocFullName.namespace;
    var assocSchema = core.arrayFirst(schemas, function (schema) {
        return schema.namespace === assocNamespace;
    });
    if (!assocSchema)
        return null;
    var assocName = assocFullName.shortTypeName;
    var assocs = assocSchema.association;
    if (!assocs)
        return null;
    if (!Array.isArray(assocs)) {
        assocs = [assocs];
    }
    var association = core.arrayFirst(assocs, function (assoc) {
        return assoc.name === assocName;
    });
    return association;
}
// schema is only needed for navProperty type name
function parseTypeNameWithSchema(entityTypeName, schema) {
    var result = MetadataStore.parseTypeName(entityTypeName);
    if (schema && schema.cSpaceOSpaceMapping) {
        var ns = getNamespaceFor(result.shortTypeName, schema);
        if (ns) {
            result = MetadataStore.makeTypeHash(result.shortTypeName, ns);
        }
    }
    return result;
}
function getNamespaceFor(shortName, schema) {
    var ns;
    var mapping = schema.cSpaceOSpaceMapping;
    if (mapping) {
        var fullName = mapping[schema.namespace + "." + shortName];
        ns = fullName && fullName.substr(0, fullName.length - (shortName.length + 1));
        if (ns)
            return ns;
    }
    // if schema does not also have an entityType node then
    // this is an WebApi2 OData schema which is usually equal to 'Default'; which is useless.
    if (schema.entityType || schema.namespace !== 'Default') {
        return schema.namespace;
    }
    return null;
}
/** @hidden @internal */
export var CsdlMetadataParser = {
    parse: parse
};
//# sourceMappingURL=data:application/json;base64,