import * as tslib_1 from "tslib";
import { BreezeEnum } from './enum';
/** EntityAction is an 'Enum' containing all of the valid actions that can occur to an 'Entity'.
 
*/
var EntityAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntityAction, _super);
    function EntityAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** Is this an 'attach' operation? ( Attach, AttachOnQuery or AttachOnImport) */
    EntityAction.prototype.isAttach = function () {
        return !!this._isAttach;
    };
    /** Is this a 'detach' operation? ( Detach, Clear) */
    EntityAction.prototype.isDetach = function () {
        return !!this._isDetach;
    };
    /** Is this a 'modification' operation? ( PropertyChange, MergeOnQuery, MergeOnSave, MergeOnImport, RejectChanges) */
    EntityAction.prototype.isModification = function () {
        return !!this._isModification;
    };
    /** Entity was attached via an AttachEntity call. */
    EntityAction.Attach = new EntityAction({ _isAttach: true });
    /**  Entity was attached as a result of a query. */
    EntityAction.AttachOnQuery = new EntityAction({ _isAttach: true });
    /**  Entity was attached as a result of an import. */
    EntityAction.AttachOnImport = new EntityAction({ _isAttach: true });
    /** Entity was detached */
    EntityAction.Detach = new EntityAction({ _isDetach: true });
    /** Properties on the entity were merged as a result of a query. */
    EntityAction.MergeOnQuery = new EntityAction({ _isModification: true });
    /** Properties on the entity were merged as a result of an import. */
    EntityAction.MergeOnImport = new EntityAction({ _isModification: true });
    /** Properties on the entity were merged as a result of a save */
    EntityAction.MergeOnSave = new EntityAction({ _isModification: true });
    /** A property on the entity was changed. */
    EntityAction.PropertyChange = new EntityAction({ _isModification: true });
    /** The EntityState of the entity was changed. */
    EntityAction.EntityStateChange = new EntityAction();
    /** AcceptChanges was called on the entity, or its entityState was set to Unmodified. */
    EntityAction.AcceptChanges = new EntityAction();
    /** RejectChanges was called on the entity. */
    EntityAction.RejectChanges = new EntityAction({ _isModification: true });
    /** The EntityManager was cleared.  All entities detached. */
    EntityAction.Clear = new EntityAction({ _isDetach: true });
    return EntityAction;
}(BreezeEnum));
export { EntityAction };
EntityAction.prototype._$typeName = "EntityAction";
Error['x'] = EntityAction.resolveSymbols();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JyZWV6ZS1jbGllbnQvIiwic291cmNlcyI6WyJzcmMvZW50aXR5LWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUVuQzs7RUFFRTtBQUVGO0lBQWtDLHdDQUFVO0lBQTVDOztJQW1EQSxDQUFDO0lBWkMsZ0ZBQWdGO0lBQ2hGLCtCQUFRLEdBQVI7UUFDRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFDRCxxREFBcUQ7SUFDckQsK0JBQVEsR0FBUjtRQUNFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUNELHFIQUFxSDtJQUNySCxxQ0FBYyxHQUFkO1FBQ0UsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBaERELG9EQUFvRDtJQUM3QyxtQkFBTSxHQUFHLElBQUksWUFBWSxDQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkQsbURBQW1EO0lBQzVDLDBCQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUM1RCxxREFBcUQ7SUFDOUMsMkJBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0lBRTdELDBCQUEwQjtJQUNuQixtQkFBTSxHQUFHLElBQUksWUFBWSxDQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFdkQsbUVBQW1FO0lBQzVELHlCQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsRSxxRUFBcUU7SUFDOUQsMEJBQWEsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ25FLGlFQUFpRTtJQUMxRCx3QkFBVyxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFakUsNENBQTRDO0lBQ3JDLDJCQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUVuRSxpREFBaUQ7SUFDMUMsOEJBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUU5Qyx3RkFBd0Y7SUFDakYsMEJBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQzFDLDhDQUE4QztJQUN2QywwQkFBYSxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7SUFFbEUsNkRBQTZEO0lBQ3RELGtCQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQW9CdEQsbUJBQUM7Q0FBQSxBQW5ERCxDQUFrQyxVQUFVLEdBbUQzQztTQW5EWSxZQUFZO0FBb0R6QixZQUFZLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxjQUFjLENBQUM7QUFDbkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQyxjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJyZWV6ZUVudW19IGZyb20gJy4vZW51bSc7XHJcblxyXG4vKiogRW50aXR5QWN0aW9uIGlzIGFuICdFbnVtJyBjb250YWluaW5nIGFsbCBvZiB0aGUgdmFsaWQgYWN0aW9ucyB0aGF0IGNhbiBvY2N1ciB0byBhbiAnRW50aXR5Jy4gXHJcbiBcclxuKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBFbnRpdHlBY3Rpb24gZXh0ZW5kcyBCcmVlemVFbnVtIHtcclxuXHJcbiAgLyoqIEVudGl0eSB3YXMgYXR0YWNoZWQgdmlhIGFuIEF0dGFjaEVudGl0eSBjYWxsLiAqL1xyXG4gIHN0YXRpYyBBdHRhY2ggPSBuZXcgRW50aXR5QWN0aW9uKCB7IF9pc0F0dGFjaDogdHJ1ZSB9KTtcclxuICAvKiogIEVudGl0eSB3YXMgYXR0YWNoZWQgYXMgYSByZXN1bHQgb2YgYSBxdWVyeS4gKi9cclxuICBzdGF0aWMgQXR0YWNoT25RdWVyeSA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNBdHRhY2g6IHRydWV9KTtcclxuICAvKiogIEVudGl0eSB3YXMgYXR0YWNoZWQgYXMgYSByZXN1bHQgb2YgYW4gaW1wb3J0LiAqL1xyXG4gIHN0YXRpYyBBdHRhY2hPbkltcG9ydCA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNBdHRhY2g6IHRydWV9KTtcclxuXHJcbiAgLyoqIEVudGl0eSB3YXMgZGV0YWNoZWQgKi9cclxuICBzdGF0aWMgRGV0YWNoID0gbmV3IEVudGl0eUFjdGlvbiggeyBfaXNEZXRhY2g6IHRydWUgfSk7XHJcblxyXG4gIC8qKiBQcm9wZXJ0aWVzIG9uIHRoZSBlbnRpdHkgd2VyZSBtZXJnZWQgYXMgYSByZXN1bHQgb2YgYSBxdWVyeS4gKi9cclxuICBzdGF0aWMgTWVyZ2VPblF1ZXJ5ID0gbmV3IEVudGl0eUFjdGlvbih7IF9pc01vZGlmaWNhdGlvbjogdHJ1ZSB9KTtcclxuICAvKiogUHJvcGVydGllcyBvbiB0aGUgZW50aXR5IHdlcmUgbWVyZ2VkIGFzIGEgcmVzdWx0IG9mIGFuIGltcG9ydC4gKi9cclxuICBzdGF0aWMgTWVyZ2VPbkltcG9ydCA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNNb2RpZmljYXRpb246IHRydWUgfSk7XHJcbiAgLyoqIFByb3BlcnRpZXMgb24gdGhlIGVudGl0eSB3ZXJlIG1lcmdlZCBhcyBhIHJlc3VsdCBvZiBhIHNhdmUgKi9cclxuICBzdGF0aWMgTWVyZ2VPblNhdmUgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzTW9kaWZpY2F0aW9uOiB0cnVlIH0pO1xyXG5cclxuICAvKiogQSBwcm9wZXJ0eSBvbiB0aGUgZW50aXR5IHdhcyBjaGFuZ2VkLiAqL1xyXG4gIHN0YXRpYyBQcm9wZXJ0eUNoYW5nZSA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNNb2RpZmljYXRpb246IHRydWV9KTtcclxuXHJcbiAgLyoqIFRoZSBFbnRpdHlTdGF0ZSBvZiB0aGUgZW50aXR5IHdhcyBjaGFuZ2VkLiAqL1xyXG4gIHN0YXRpYyBFbnRpdHlTdGF0ZUNoYW5nZSA9IG5ldyBFbnRpdHlBY3Rpb24oKTtcclxuXHJcbiAgLyoqIEFjY2VwdENoYW5nZXMgd2FzIGNhbGxlZCBvbiB0aGUgZW50aXR5LCBvciBpdHMgZW50aXR5U3RhdGUgd2FzIHNldCB0byBVbm1vZGlmaWVkLiAqL1xyXG4gIHN0YXRpYyBBY2NlcHRDaGFuZ2VzID0gbmV3IEVudGl0eUFjdGlvbigpO1xyXG4gIC8qKiBSZWplY3RDaGFuZ2VzIHdhcyBjYWxsZWQgb24gdGhlIGVudGl0eS4gKi9cclxuICBzdGF0aWMgUmVqZWN0Q2hhbmdlcyA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNNb2RpZmljYXRpb246IHRydWV9KTtcclxuXHJcbiAgLyoqIFRoZSBFbnRpdHlNYW5hZ2VyIHdhcyBjbGVhcmVkLiAgQWxsIGVudGl0aWVzIGRldGFjaGVkLiAqL1xyXG4gIHN0YXRpYyBDbGVhciA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNEZXRhY2g6IHRydWV9KTtcclxuXHJcbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXHJcbiAgX2lzQXR0YWNoPzogYm9vbGVhbjtcclxuICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cclxuICBfaXNEZXRhY2g/OiBib29sZWFuO1xyXG4gIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xyXG4gIF9pc01vZGlmaWNhdGlvbjogYm9vbGVhbjtcclxuICAvKiogSXMgdGhpcyBhbiAnYXR0YWNoJyBvcGVyYXRpb24/ICggQXR0YWNoLCBBdHRhY2hPblF1ZXJ5IG9yIEF0dGFjaE9uSW1wb3J0KSAqL1xyXG4gIGlzQXR0YWNoKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5faXNBdHRhY2g7XHJcbiAgfVxyXG4gIC8qKiBJcyB0aGlzIGEgJ2RldGFjaCcgb3BlcmF0aW9uPyAoIERldGFjaCwgQ2xlYXIpICovXHJcbiAgaXNEZXRhY2goKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLl9pc0RldGFjaDtcclxuICB9XHJcbiAgLyoqIElzIHRoaXMgYSAnbW9kaWZpY2F0aW9uJyBvcGVyYXRpb24/ICggUHJvcGVydHlDaGFuZ2UsIE1lcmdlT25RdWVyeSwgTWVyZ2VPblNhdmUsIE1lcmdlT25JbXBvcnQsIFJlamVjdENoYW5nZXMpICovXHJcbiAgaXNNb2RpZmljYXRpb24oKSB7XHJcbiAgICByZXR1cm4gISF0aGlzLl9pc01vZGlmaWNhdGlvbjtcclxuICB9XHJcbn1cclxuRW50aXR5QWN0aW9uLnByb3RvdHlwZS5fJHR5cGVOYW1lID0gXCJFbnRpdHlBY3Rpb25cIjtcclxuRXJyb3JbJ3gnXSA9IEVudGl0eUFjdGlvbi5yZXNvbHZlU3ltYm9scygpO1xyXG5cclxuXHJcblxyXG4iXX0=