import { core } from './core';
import { assertParam } from './assert-param';
import { EntityType } from './entity-metadata';
import { DataType } from './data-type';
/**
An EntityKey is an object that represents the unique identity of an entity.  EntityKey's are immutable.


**/
var EntityKey = /** @class */ (function () {
    /**
    Constructs a new EntityKey.  Each entity within an EntityManager will have a unique EntityKey.
    >     // assume em1 is an EntityManager containing a number of existing entities.
    >     var empType = em1.metadataStore.getEntityType("Employee");
    >     var entityKey = new EntityKey(empType, 1);
  
    EntityKey's may also be found by calling EntityAspect.getKey()
    >     // assume employee1 is an existing Employee entity
    >     var empKey = employee1.entityAspect.getKey();
  
    Multipart keys are created by passing an array as the 'keyValues' parameter
    >     var empTerrType = em1.metadataStore.getEntityType("EmployeeTerritory");
    >     var empTerrKey = new EntityKey(empTerrType, [ 1, 77]);
    >     // The order of the properties in the 'keyValues' array must be the same as that
    >     // returned by empTerrType.keyProperties
    @param entityType - The [[EntityType]] of the entity.
    @param keyValues - A single value or an array of values.
    */
    function EntityKey(entityType, keyValues) {
        assertParam(entityType, "entityType").isInstanceOf(EntityType).check();
        var subtypes = entityType.getSelfAndSubtypes();
        if (subtypes.length > 1) {
            this._subtypes = subtypes.filter(function (st) {
                return st.isAbstract === false;
            });
        }
        if (!Array.isArray(keyValues)) {
            keyValues = [keyValues];
        }
        this.entityType = entityType;
        entityType.keyProperties.forEach(function (kp, i) {
            // insure that guid keys are comparable.
            if (kp.dataType === DataType.Guid) {
                keyValues[i] = keyValues[i] && keyValues[i].toLowerCase ? keyValues[i].toLowerCase() : keyValues[i];
            }
        });
        this.values = keyValues;
        this._keyInGroup = EntityKey.createKeyString(keyValues);
    }
    EntityKey.prototype.toJSON = function () {
        return {
            entityType: this.entityType.name,
            values: this.values
        };
    };
    EntityKey.fromJSON = function (json, metadataStore) {
        var et = metadataStore._getStructuralType(json.entityType, true);
        return new EntityKey(et, json.values);
    };
    /**
    Used to compare EntityKeys are determine if they refer to the same Entity.
    There is also an static version of 'equals' with the same functionality.
    
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      var empType = em1.metadataStore.getEntityType("Employee");
    >      var empKey1 = new EntityKey(empType, 1);
    >      // assume employee1 is an existing Employee entity
    >      var empKey2 = employee1.entityAspect.getKey();
    >      if (empKey1.equals(empKey2)) {
    >          // do something  ...
    >      }
    **/
    EntityKey.prototype.equals = function (entityKey) {
        if (!(entityKey instanceof EntityKey))
            return false;
        return (this.entityType === entityKey.entityType) &&
            core.arrayEquals(this.values, entityKey.values);
    };
    /*
    Returns a human readable representation of this EntityKey.
    */
    EntityKey.prototype.toString = function (altEntityType) {
        return (altEntityType || this.entityType).name + '-' + this._keyInGroup;
    };
    /**
    Used to compare EntityKeys are determine if they refer to the same Entity.
    There is also an instance version of 'equals' with the same functionality.
    >      // assume em1 is an EntityManager containing a number of existing entities.
    >      var empType = em1.metadataStore.getEntityType("Employee");
    >      var empKey1 = new EntityKey(empType, 1);
    >      // assume employee1 is an existing Employee entity
    >      var empKey2 = employee1.entityAspect.getKey();
    >      if (EntityKey.equals(empKey1, empKey2)) {
    >          // do something  ...
    >      }
    **/
    EntityKey.equals = function (k1, k2) {
        if (!(k1 instanceof EntityKey))
            return false;
        return k1.equals(k2);
    };
    /** @hidden @internal */
    // TODO: we may want to compare to default values later.
    EntityKey.prototype._isEmpty = function () {
        return this.values.join("").length === 0;
    };
    /** hidden */
    // TODO: think about giving _ prefix or documenting.
    EntityKey.createKeyString = function (keyValues) {
        return keyValues.join(EntityKey.ENTITY_KEY_DELIMITER);
    };
    /** @hidden @internal */
    EntityKey.ENTITY_KEY_DELIMITER = ":::";
    return EntityKey;
}());
export { EntityKey };
EntityKey.prototype._$typeName = "EntityKey";
//# sourceMappingURL=data:application/json;base64,