import { core } from './core';
/** @hidden @internal */
// Represents entities not yet attached to navigationProperties. 
var UnattachedChildrenMap = /** @class */ (function () {
    function UnattachedChildrenMap() {
        // key is EntityKey.toString(), value is array of { navigationProperty, children }
        this.map = {};
    }
    UnattachedChildrenMap.prototype.addChild = function (parentEntityKey, navigationProperty, child) {
        var tuple = this.getTuple(parentEntityKey, navigationProperty);
        if (!tuple) {
            tuple = { navigationProperty: navigationProperty, children: [] };
            core.getArray(this.map, parentEntityKey.toString()).push(tuple);
        }
        tuple.children.push(child);
    };
    UnattachedChildrenMap.prototype.removeChildren = function (parentEntityKeyString, navigationProperty) {
        var tuples = this.map[parentEntityKeyString];
        if (!tuples)
            return;
        core.arrayRemoveItem(tuples, function (t) {
            return t.navigationProperty === navigationProperty;
        });
        if (!tuples.length) {
            delete this.map[parentEntityKeyString];
        }
    };
    UnattachedChildrenMap.prototype.getTuple = function (parentEntityKey, navigationProperty) {
        var tuples = this.getTuples(parentEntityKey);
        if (!tuples)
            return null;
        var tuple = core.arrayFirst(tuples, function (t) {
            return t.navigationProperty === navigationProperty;
        });
        return tuple;
    };
    UnattachedChildrenMap.prototype.getTuples = function (parentEntityKey) {
        var allTuples = [];
        var tuples = this.map[parentEntityKey.toString()];
        if (tuples) {
            allTuples = allTuples.concat(tuples);
        }
        var entityType = parentEntityKey.entityType;
        while (entityType.baseEntityType) {
            entityType = entityType.baseEntityType;
            var baseKey = parentEntityKey.toString(entityType);
            tuples = this.map[baseKey];
            if (tuples) {
                allTuples = allTuples.concat(tuples);
            }
        }
        return (allTuples.length) ? allTuples : undefined;
    };
    UnattachedChildrenMap.prototype.getTuplesByString = function (parentEntityKeyString) {
        return this.map[parentEntityKeyString];
    };
    return UnattachedChildrenMap;
}());
export { UnattachedChildrenMap };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5hdHRhY2hlZC1jaGlsZHJlbi1tYXAuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9icmVlemUtY2xpZW50LyIsInNvdXJjZXMiOlsic3JjL3VuYXR0YWNoZWQtY2hpbGRyZW4tbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFXOUIsd0JBQXdCO0FBQ3hCLGlFQUFpRTtBQUNqRTtJQUFBO1FBQ0Usa0ZBQWtGO1FBQ2xGLFFBQUcsR0FBcUMsRUFBRSxDQUFDO0lBc0Q3QyxDQUFDO0lBbkRDLHdDQUFRLEdBQVIsVUFBUyxlQUEwQixFQUFFLGtCQUFzQyxFQUFFLEtBQWE7UUFDeEYsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ2pFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakU7UUFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsOENBQWMsR0FBZCxVQUFlLHFCQUE2QixFQUFFLGtCQUFzQztRQUNsRixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQ3BCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFVBQUMsQ0FBTTtZQUNsQyxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsS0FBSyxrQkFBa0IsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0gsQ0FBQztJQUVELHdDQUFRLEdBQVIsVUFBUyxlQUEwQixFQUFFLGtCQUFzQztRQUN6RSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDekIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDO1lBQzdDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixLQUFLLGtCQUFrQixDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQseUNBQVMsR0FBVCxVQUFVLGVBQTBCO1FBQ2xDLElBQUksU0FBUyxHQUFnQixFQUFFLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUNsRCxJQUFJLE1BQU0sRUFBRTtZQUNWLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxVQUFVLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQztRQUM1QyxPQUFPLFVBQVUsQ0FBQyxjQUFjLEVBQUU7WUFDaEMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxjQUFjLENBQUM7WUFDdkMsSUFBSSxPQUFPLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNuRCxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQixJQUFJLE1BQU0sRUFBRTtnQkFDVixTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN0QztTQUNGO1FBQ0QsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDcEQsQ0FBQztJQUVELGlEQUFpQixHQUFqQixVQUFrQixxQkFBNkI7UUFDN0MsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVILDRCQUFDO0FBQUQsQ0FBQyxBQXhERCxJQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvcmUgfSBmcm9tICcuL2NvcmUnO1xyXG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuL2VudGl0eS1hc3BlY3QnO1xyXG5pbXBvcnQgeyBOYXZpZ2F0aW9uUHJvcGVydHkgfSBmcm9tICcuL2VudGl0eS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IEVudGl0eUtleSB9IGZyb20gJy4vZW50aXR5LWtleSc7XHJcblxyXG4vKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cclxuZXhwb3J0IGludGVyZmFjZSBJTmF2VHVwbGUge1xyXG4gIG5hdmlnYXRpb25Qcm9wZXJ0eTogTmF2aWdhdGlvblByb3BlcnR5O1xyXG4gIGNoaWxkcmVuOiBFbnRpdHlbXTtcclxufVxyXG5cclxuLyoqIEBoaWRkZW4gQGludGVybmFsICovXHJcbi8vIFJlcHJlc2VudHMgZW50aXRpZXMgbm90IHlldCBhdHRhY2hlZCB0byBuYXZpZ2F0aW9uUHJvcGVydGllcy4gXHJcbmV4cG9ydCBjbGFzcyBVbmF0dGFjaGVkQ2hpbGRyZW5NYXAge1xyXG4gIC8vIGtleSBpcyBFbnRpdHlLZXkudG9TdHJpbmcoKSwgdmFsdWUgaXMgYXJyYXkgb2YgeyBuYXZpZ2F0aW9uUHJvcGVydHksIGNoaWxkcmVuIH1cclxuICBtYXA6IHsgW2luZGV4OiBzdHJpbmddOiBJTmF2VHVwbGVbXSB9ID0ge307XHJcblxyXG5cclxuICBhZGRDaGlsZChwYXJlbnRFbnRpdHlLZXk6IEVudGl0eUtleSwgbmF2aWdhdGlvblByb3BlcnR5OiBOYXZpZ2F0aW9uUHJvcGVydHksIGNoaWxkOiBFbnRpdHkpIHtcclxuICAgIGxldCB0dXBsZSA9IHRoaXMuZ2V0VHVwbGUocGFyZW50RW50aXR5S2V5LCBuYXZpZ2F0aW9uUHJvcGVydHkpO1xyXG4gICAgaWYgKCF0dXBsZSkge1xyXG4gICAgICB0dXBsZSA9IHsgbmF2aWdhdGlvblByb3BlcnR5OiBuYXZpZ2F0aW9uUHJvcGVydHksIGNoaWxkcmVuOiBbXSB9O1xyXG4gICAgICBjb3JlLmdldEFycmF5KHRoaXMubWFwLCBwYXJlbnRFbnRpdHlLZXkudG9TdHJpbmcoKSkucHVzaCh0dXBsZSk7XHJcbiAgICB9XHJcbiAgICB0dXBsZS5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuICB9XHJcblxyXG4gIHJlbW92ZUNoaWxkcmVuKHBhcmVudEVudGl0eUtleVN0cmluZzogc3RyaW5nLCBuYXZpZ2F0aW9uUHJvcGVydHk6IE5hdmlnYXRpb25Qcm9wZXJ0eSkge1xyXG4gICAgbGV0IHR1cGxlcyA9IHRoaXMubWFwW3BhcmVudEVudGl0eUtleVN0cmluZ107XHJcbiAgICBpZiAoIXR1cGxlcykgcmV0dXJuO1xyXG4gICAgY29yZS5hcnJheVJlbW92ZUl0ZW0odHVwbGVzLCAodDogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiB0Lm5hdmlnYXRpb25Qcm9wZXJ0eSA9PT0gbmF2aWdhdGlvblByb3BlcnR5O1xyXG4gICAgfSk7XHJcbiAgICBpZiAoIXR1cGxlcy5sZW5ndGgpIHtcclxuICAgICAgZGVsZXRlIHRoaXMubWFwW3BhcmVudEVudGl0eUtleVN0cmluZ107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRUdXBsZShwYXJlbnRFbnRpdHlLZXk6IEVudGl0eUtleSwgbmF2aWdhdGlvblByb3BlcnR5OiBOYXZpZ2F0aW9uUHJvcGVydHkpIHtcclxuICAgIGxldCB0dXBsZXMgPSB0aGlzLmdldFR1cGxlcyhwYXJlbnRFbnRpdHlLZXkpO1xyXG4gICAgaWYgKCF0dXBsZXMpIHJldHVybiBudWxsO1xyXG4gICAgbGV0IHR1cGxlID0gY29yZS5hcnJheUZpcnN0KHR1cGxlcywgZnVuY3Rpb24gKHQpIHtcclxuICAgICAgcmV0dXJuIHQubmF2aWdhdGlvblByb3BlcnR5ID09PSBuYXZpZ2F0aW9uUHJvcGVydHk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0dXBsZTtcclxuICB9XHJcblxyXG4gIGdldFR1cGxlcyhwYXJlbnRFbnRpdHlLZXk6IEVudGl0eUtleSkge1xyXG4gICAgbGV0IGFsbFR1cGxlczogSU5hdlR1cGxlW10gPSBbXTtcclxuICAgIGxldCB0dXBsZXMgPSB0aGlzLm1hcFtwYXJlbnRFbnRpdHlLZXkudG9TdHJpbmcoKV07XHJcbiAgICBpZiAodHVwbGVzKSB7XHJcbiAgICAgIGFsbFR1cGxlcyA9IGFsbFR1cGxlcy5jb25jYXQodHVwbGVzKTtcclxuICAgIH1cclxuICAgIGxldCBlbnRpdHlUeXBlID0gcGFyZW50RW50aXR5S2V5LmVudGl0eVR5cGU7XHJcbiAgICB3aGlsZSAoZW50aXR5VHlwZS5iYXNlRW50aXR5VHlwZSkge1xyXG4gICAgICBlbnRpdHlUeXBlID0gZW50aXR5VHlwZS5iYXNlRW50aXR5VHlwZTtcclxuICAgICAgbGV0IGJhc2VLZXkgPSBwYXJlbnRFbnRpdHlLZXkudG9TdHJpbmcoZW50aXR5VHlwZSk7XHJcbiAgICAgIHR1cGxlcyA9IHRoaXMubWFwW2Jhc2VLZXldO1xyXG4gICAgICBpZiAodHVwbGVzKSB7XHJcbiAgICAgICAgYWxsVHVwbGVzID0gYWxsVHVwbGVzLmNvbmNhdCh0dXBsZXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGFsbFR1cGxlcy5sZW5ndGgpID8gYWxsVHVwbGVzIDogdW5kZWZpbmVkO1xyXG4gIH1cclxuXHJcbiAgZ2V0VHVwbGVzQnlTdHJpbmcocGFyZW50RW50aXR5S2V5U3RyaW5nOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiB0aGlzLm1hcFtwYXJlbnRFbnRpdHlLZXlTdHJpbmddO1xyXG4gIH1cclxuXHJcbn1cclxuIl19