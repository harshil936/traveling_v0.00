import { assertConfig } from './assert-param';
import { config } from './config';
import { core } from './core';
/**
A DataService instance is used to encapsulate the details of a single 'service'; this includes a serviceName, a dataService adapterInstance,
and whether the service has server side metadata.

You can construct an EntityManager with either a serviceName or a DataService instance, if you use a serviceName then a DataService
is constructed for you.  (It can also be set via the EntityManager.setProperties method).

The same applies to the MetadataStore.fetchMetadata method, i.e. it takes either a serviceName or a DataService instance.

Each metadataStore contains a list of DataServices, each accessible via its ‘serviceName’.
( see MetadataStore.getDataService and MetadataStore.addDataService).  The ‘addDataService’ method is called internally
anytime a MetadataStore.fetchMetadata call occurs with a new dataService ( or service name).

**/
var DataService = /** @class */ (function () {
    /**   DataService constructor
    >     var dataService = new DataService({
    >         serviceName: altServiceName,
    >         hasServerMetadata: false
    >     });
  
    >     var metadataStore = new MetadataStore({
    >         namingConvention: NamingConvention.camelCase
    >     });
  
    >     return new EntityManager({
    >         dataService: dataService,
    >         metadataStore: metadataStore
    >     });
    @param config - A configuration object.
    **/
    function DataService(config) {
        updateWithConfig(this, config);
    }
    /**
    Returns a copy of this DataService with the specified properties applied.
    @param config - The configuration object to apply to create a new DataService.
    **/
    DataService.prototype.using = function (config) {
        if (!config)
            return this;
        var result = new DataService(this);
        return updateWithConfig(result, config);
    };
    DataService.resolve = function (dataServices) {
        // final defaults
        // Deliberate use of 'as any' below.
        dataServices.push({
            hasServerMetadata: true,
            useJsonp: false
        });
        var ds = new DataService(core.resolveProperties(dataServices, ["serviceName", "adapterName", "uriBuilderName", "hasServerMetadata", "jsonResultsAdapter", "useJsonp"]));
        if (!ds.serviceName) {
            throw new Error("Unable to resolve a 'serviceName' for this dataService");
        }
        ds.adapterInstance = ds.adapterInstance || config.getAdapterInstance("dataService", ds.adapterName);
        ds.jsonResultsAdapter = ds.jsonResultsAdapter || ds.adapterInstance.jsonResultsAdapter;
        ds.uriBuilder = ds.uriBuilder || config.getAdapterInstance("uriBuilder", ds.uriBuilderName);
        return ds;
    };
    /** @hidden @internal */
    DataService._normalizeServiceName = function (serviceName) {
        serviceName = serviceName.trim();
        if (serviceName.substr(-1) !== "/") {
            return serviceName + '/';
        }
        else {
            return serviceName;
        }
    };
    /**  */
    DataService.prototype.toJSON = function () {
        // don't use default value here - because we want to be able to distinguish undefined props for inheritence purposes.
        return core.toJson(this, {
            serviceName: null,
            adapterName: null,
            uriBuilderName: null,
            hasServerMetadata: null,
            jsonResultsAdapter: function (v) {
                return v && v.name;
            },
            useJsonp: null
        });
    };
    DataService.fromJSON = function (json) {
        json.jsonResultsAdapter = config._fetchObject(JsonResultsAdapter, json.jsonResultsAdapter);
        return new DataService(json);
    };
    /**
     Returns a url for this dataService with the specified suffix. This method handles dataService names either
     with or without trailing '/'s.  If the suffix starts with "http" then it will be returned as-is.
     @method qualifyUrl
     @param suffix {String} The resulting url.
     @return {a Url string}
     **/
    DataService.prototype.qualifyUrl = function (suffix) {
        if (suffix && suffix.startsWith("http")) {
            return suffix;
        }
        var url = this.serviceName;
        // remove any trailing "/"
        if (core.stringEndsWith(url, "/")) {
            url = url.substr(0, url.length - 1);
        }
        // ensure that it ends with "/" + suffix
        suffix = "/" + suffix;
        if (!core.stringEndsWith(url, suffix)) {
            url = url + suffix;
        }
        return url;
    };
    return DataService;
}());
export { DataService };
DataService.prototype._$typeName = "DataService";
function updateWithConfig(obj, dsConfig) {
    if (dsConfig) {
        assertConfig(dsConfig)
            .whereParam("serviceName").isOptional()
            .whereParam("adapterName").isString().isOptional()
            .whereParam("uriBuilderName").isString().isOptional()
            .whereParam("hasServerMetadata").isBoolean().isOptional()
            .whereParam("jsonResultsAdapter").isInstanceOf(JsonResultsAdapter).isOptional()
            .whereParam("useJsonp").isBoolean().isOptional()
            .applyAll(obj);
        obj.serviceName = obj.serviceName && DataService._normalizeServiceName(obj.serviceName);
        obj.adapterInstance = obj.adapterName ? config.getAdapterInstance("dataService", obj.adapterName) : undefined;
        obj.uriBuilder = obj.uriBuilderName ? config.getAdapterInstance("uriBuilder", obj.uriBuilderName) : undefined;
    }
    return obj;
}
/**
A JsonResultsAdapter instance is used to provide custom extraction and parsing logic on the json results returned by any web service.
This facility makes it possible for breeze to talk to virtually any web service and return objects that will be first class 'breeze' citizens.
**/
var JsonResultsAdapter = /** @class */ (function () {
    /**
    JsonResultsAdapter constructor
  
    @example
        //
        var jsonResultsAdapter = new JsonResultsAdapter({
            name: "test1e",
            extractResults: function(json) {
                return json.results;
            },
            visitNode: function(node, mappingContext, nodeContext) {
                var entityType = normalizeTypeName(node.$type);
                var propertyName = nodeContext.propertyName;
                var ignore = propertyName && propertyName.substr(0, 1) === "$";
  
                return {
                    entityType: entityType,
                    nodeId: node.$id,
                    nodeRefId: node.$ref,
                    ignore: ignore,
                    passThru: false // default
                };
            }
        });
  
        var dataService = new DataService( {
                serviceName: "breeze/foo",
                jsonResultsAdapter: jsonResultsAdapter
        });
  
        var entityManager = new EntityManager( {
            dataService: dataService
        });
  
    @param config - A configuration object.
  
    **/
    function JsonResultsAdapter(jsConfig) {
        if (arguments.length !== 1) {
            throw new Error("The JsonResultsAdapter ctor should be called with a single argument that is a configuration object.");
        }
        assertConfig(jsConfig)
            .whereParam("name").isNonEmptyString()
            .whereParam("extractResults").isFunction().isOptional().withDefault(extractResultsDefault)
            .whereParam("extractSaveResults").isFunction().isOptional().withDefault(extractSaveResultsDefault)
            .whereParam("extractKeyMappings").isFunction().isOptional().withDefault(extractKeyMappingsDefault)
            .whereParam("extractDeletedKeys").isFunction().isOptional().withDefault(extractDeletedKeysDefault)
            .whereParam("visitNode").isFunction()
            .applyAll(this);
        config._storeObject(this, "JsonResultsAdapter", this.name);
    }
    return JsonResultsAdapter;
}());
export { JsonResultsAdapter };
JsonResultsAdapter.prototype._$typeName = "JsonResultsAdapter";
function extractResultsDefault(data) {
    return data.results;
}
function extractSaveResultsDefault(data) {
    return data.entities || data.Entities || [];
}
function extractKeyMappingsDefault(data) {
    return data.keyMappings || data.KeyMappings || [];
}
function extractDeletedKeysDefault(data) {
    return data.deletedKeys || data.DeletedKeys || [];
}
//# sourceMappingURL=data:application/json;base64,