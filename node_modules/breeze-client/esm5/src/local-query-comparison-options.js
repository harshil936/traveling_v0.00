import { core } from './core';
import { assertConfig } from './assert-param';
import { config } from './config';
/**
A LocalQueryComparisonOptions instance is used to specify the "comparison rules" used when performing "local queries" in order
to match the semantics of these same queries when executed against a remote service.  These options should be set based on the
manner in which your remote service interprets certain comparison operations.

The default LocalQueryComparisonOptions stipulates 'caseInsensitive" queries with ANSI SQL rules regarding comparisons of unequal
length strings.
**/
var LocalQueryComparisonOptions = /** @class */ (function () {
    /**
    LocalQueryComparisonOptions constructor
    >      // create a 'caseSensitive - non SQL' instance.
    >      var lqco = new LocalQueryComparisonOptions({
    >              name: "caseSensitive-nonSQL"
    >              isCaseSensitive: true;
    >              usesSql92CompliantStringComparison: false;
    >          });
    >      // either apply it globally
    >      lqco.setAsDefault();
    >      // or to a specific MetadataStore
    >      var ms = new MetadataStore({ localQueryComparisonOptions: lqco });
    >      var em = new EntityManager( { metadataStore: ms });
    @param config - A configuration object.
    **/
    function LocalQueryComparisonOptions(lqcoConfig) {
        assertConfig(lqcoConfig || {})
            .whereParam("name").isOptional().isString()
            .whereParam("isCaseSensitive").isOptional().isBoolean()
            .whereParam("usesSql92CompliantStringComparison").isBoolean()
            .applyAll(this);
        if (!this.name) {
            this.name = core.getUuid();
        }
        config._storeObject(this, "LocalQueryComparisonOptions", this.name);
    }
    /**
    Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.
    The current instance is returned unchanged.
    >     var lqco = new LocalQueryComparisonOptions({
    >        isCaseSensitive: false;
    >        usesSql92CompliantStringComparison: true;
    >     });
    >     lqco.setAsDefault();
    **/
    LocalQueryComparisonOptions.prototype.setAsDefault = function () {
        return core.setAsDefault(this, LocalQueryComparisonOptions);
    };
    /**
    Case insensitive SQL compliant options - this is also the default unless otherwise changed.
    **/
    LocalQueryComparisonOptions.caseInsensitiveSQL = new LocalQueryComparisonOptions({
        name: "caseInsensitiveSQL",
        isCaseSensitive: false,
        usesSql92CompliantStringComparison: true
    });
    /**
    The default value whenever LocalQueryComparisonOptions are not specified. By default this is 'caseInsensitiveSQL'.
    **/
    LocalQueryComparisonOptions.defaultInstance = new LocalQueryComparisonOptions(LocalQueryComparisonOptions.caseInsensitiveSQL);
    return LocalQueryComparisonOptions;
}());
export { LocalQueryComparisonOptions };
LocalQueryComparisonOptions.prototype._$typeName = "LocalQueryComparisonOptions";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtcXVlcnktY29tcGFyaXNvbi1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC8iLCJzb3VyY2VzIjpbInNyYy9sb2NhbC1xdWVyeS1jb21wYXJpc29uLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWVsQzs7Ozs7OztHQU9HO0FBQ0g7SUFZRTs7Ozs7Ozs7Ozs7Ozs7T0FjRztJQUNILHFDQUFZLFVBQTZDO1FBQ3ZELFlBQVksQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO2FBQ3pCLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUU7YUFDMUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUyxFQUFFO2FBQ3RELFVBQVUsQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDLFNBQVMsRUFBRTthQUM1RCxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUM1QjtRQUNELE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLDZCQUE2QixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBZ0JEOzs7Ozs7OztPQVFHO0lBQ0gsa0RBQVksR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBekJEOztPQUVHO0lBQ0ksOENBQWtCLEdBQUcsSUFBSSwyQkFBMkIsQ0FBQztRQUMxRCxJQUFJLEVBQUUsb0JBQW9CO1FBQzFCLGVBQWUsRUFBRSxLQUFLO1FBQ3RCLGtDQUFrQyxFQUFFLElBQUk7S0FDekMsQ0FBQyxDQUFDO0lBRUg7O09BRUc7SUFDSSwyQ0FBZSxHQUFHLElBQUksMkJBQTJCLENBQUMsMkJBQTJCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQWUzRyxrQ0FBQztDQUFBLEFBbEVELElBa0VDO1NBbEVZLDJCQUEyQjtBQW1FeEMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyw2QkFBNkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvcmUgfSBmcm9tICcuL2NvcmUnO1xyXG5pbXBvcnQgeyBhc3NlcnRDb25maWcgfSBmcm9tICcuL2Fzc2VydC1wYXJhbSc7XHJcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcclxuXHJcblxyXG4vKiogQ29uZmlndXJhdGlvbiBpbmZvIHRvIGJlIHBhc3NlZCB0byB0aGUgW1tMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnNdXSBjb25zdHJ1Y3Rvci4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnNDb25maWcge1xyXG4gIC8qKiBUaGUgbmFtZSBvZiB0aGlzIGNvbGxlY3Rpb24gb2YgY29uZmlndXJhdGlvbiBzZXR0aW5ncy4gKi9cclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIC8qKiBXaGV0aGVyIHByZWRpY2F0ZXMgdGhhdCBpbnZvbHZlIHN0cmluZ3Mgd2lsbCBiZSBpbnRlcnByZXRlZCBpbiBhIFwiY2FzZVNlbnNpdGl2ZVwiIG1hbm5lci4gRGVmYXVsdCBpcyAnZmFsc2UnLiAqL1xyXG4gIGlzQ2FzZVNlbnNpdGl2ZT86IGJvb2xlYW47XHJcbiAgLyogV2hldGhlciBvciBub3QgdG8gZW5mb3JjZSB0aGUgQU5TSSBTUUwgc3RhbmRhcmRcclxuICBvZiBwYWRkaW5nIHN0cmluZ3Mgb2YgdW5lcXVhbCBsZW5ndGhzIGJlZm9yZSBjb21wYXJpc29uIHdpdGggc3BhY2VzLiBOb3RlIHRoYXQgcGVyIHRoZSBzdGFuZGFyZCwgcGFkZGluZyBvbmx5IG9jY3VycyB3aXRoIGVxdWFsaXR5IGFuZFxyXG4gIGluZXF1YWxpdHkgcHJlZGljYXRlcywgYW5kIG5vdCB3aXRoIG9wZXJhdGlvbnMgbGlrZSAnc3RhcnRzV2l0aCcsICdlbmRzV2l0aCcgb3IgJ2NvbnRhaW5zJy4gIERlZmF1bHQgaXMgdHJ1ZS4gKi9cclxuICB1c2VzU3FsOTJDb21wbGlhbnRTdHJpbmdDb21wYXJpc29uPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbkEgTG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zIGluc3RhbmNlIGlzIHVzZWQgdG8gc3BlY2lmeSB0aGUgXCJjb21wYXJpc29uIHJ1bGVzXCIgdXNlZCB3aGVuIHBlcmZvcm1pbmcgXCJsb2NhbCBxdWVyaWVzXCIgaW4gb3JkZXJcclxudG8gbWF0Y2ggdGhlIHNlbWFudGljcyBvZiB0aGVzZSBzYW1lIHF1ZXJpZXMgd2hlbiBleGVjdXRlZCBhZ2FpbnN0IGEgcmVtb3RlIHNlcnZpY2UuICBUaGVzZSBvcHRpb25zIHNob3VsZCBiZSBzZXQgYmFzZWQgb24gdGhlXHJcbm1hbm5lciBpbiB3aGljaCB5b3VyIHJlbW90ZSBzZXJ2aWNlIGludGVycHJldHMgY2VydGFpbiBjb21wYXJpc29uIG9wZXJhdGlvbnMuXHJcblxyXG5UaGUgZGVmYXVsdCBMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnMgc3RpcHVsYXRlcyAnY2FzZUluc2Vuc2l0aXZlXCIgcXVlcmllcyB3aXRoIEFOU0kgU1FMIHJ1bGVzIHJlZ2FyZGluZyBjb21wYXJpc29ucyBvZiB1bmVxdWFsXHJcbmxlbmd0aCBzdHJpbmdzLlxyXG4qKi9cclxuZXhwb3J0IGNsYXNzIExvY2FsUXVlcnlDb21wYXJpc29uT3B0aW9ucyB7XHJcbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXHJcbiAgXyR0eXBlTmFtZTogc3RyaW5nOyAvLyBvbiBwcm90b3R5cGVcclxuICAvKiogVGhlIG5hbWUgZm9yIHRoaXMgaW5zdGFuY2UuICovXHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIC8qKiBXaGV0aGVyIHByZWRpY2F0ZXMgdGhhdCBpbnZvbHZlIHN0cmluZ3Mgd2lsbCBiZSBpbnRlcnByZXRlZCBpbiBhIFwiY2FzZVNlbnNpdGl2ZVwiIG1hbm5lci4gKGRlZmF1bHQgPSBmYWxzZSkuICAqL1xyXG4gIGlzQ2FzZVNlbnNpdGl2ZTogYm9vbGVhbjtcclxuICAvKiBXaGV0aGVyIG9yIG5vdCB0byBlbmZvcmNlIHRoZSBBTlNJIFNRTCBzdGFuZGFyZFxyXG4gIG9mIHBhZGRpbmcgc3RyaW5ncyBvZiB1bmVxdWFsIGxlbmd0aHMgYmVmb3JlIGNvbXBhcmlzb24gd2l0aCBzcGFjZXMuIE5vdGUgdGhhdCBwZXIgdGhlIHN0YW5kYXJkLCBwYWRkaW5nIG9ubHkgb2NjdXJzIHdpdGggZXF1YWxpdHkgYW5kXHJcbiAgaW5lcXVhbGl0eSBwcmVkaWNhdGVzLCBhbmQgbm90IHdpdGggb3BlcmF0aW9ucyBsaWtlICdzdGFydHNXaXRoJywgJ2VuZHNXaXRoJyBvciAnY29udGFpbnMnLiAgRGVmYXVsdCBpcyB0cnVlLiAqL1xyXG4gIHVzZXNTcWw5MkNvbXBsaWFudFN0cmluZ0NvbXBhcmlzb246IGJvb2xlYW47XHJcblxyXG4gIC8qKlxyXG4gIExvY2FsUXVlcnlDb21wYXJpc29uT3B0aW9ucyBjb25zdHJ1Y3RvclxyXG4gID4gICAgICAvLyBjcmVhdGUgYSAnY2FzZVNlbnNpdGl2ZSAtIG5vbiBTUUwnIGluc3RhbmNlLlxyXG4gID4gICAgICB2YXIgbHFjbyA9IG5ldyBMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnMoe1xyXG4gID4gICAgICAgICAgICAgIG5hbWU6IFwiY2FzZVNlbnNpdGl2ZS1ub25TUUxcIlxyXG4gID4gICAgICAgICAgICAgIGlzQ2FzZVNlbnNpdGl2ZTogdHJ1ZTtcclxuICA+ICAgICAgICAgICAgICB1c2VzU3FsOTJDb21wbGlhbnRTdHJpbmdDb21wYXJpc29uOiBmYWxzZTtcclxuICA+ICAgICAgICAgIH0pO1xyXG4gID4gICAgICAvLyBlaXRoZXIgYXBwbHkgaXQgZ2xvYmFsbHlcclxuICA+ICAgICAgbHFjby5zZXRBc0RlZmF1bHQoKTtcclxuICA+ICAgICAgLy8gb3IgdG8gYSBzcGVjaWZpYyBNZXRhZGF0YVN0b3JlXHJcbiAgPiAgICAgIHZhciBtcyA9IG5ldyBNZXRhZGF0YVN0b3JlKHsgbG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zOiBscWNvIH0pO1xyXG4gID4gICAgICB2YXIgZW0gPSBuZXcgRW50aXR5TWFuYWdlciggeyBtZXRhZGF0YVN0b3JlOiBtcyB9KTtcclxuICBAcGFyYW0gY29uZmlnIC0gQSBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICAqKi9cclxuICBjb25zdHJ1Y3RvcihscWNvQ29uZmlnOiBMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnNDb25maWcpIHtcclxuICAgIGFzc2VydENvbmZpZyhscWNvQ29uZmlnIHx8IHt9KVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwibmFtZVwiKS5pc09wdGlvbmFsKCkuaXNTdHJpbmcoKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwiaXNDYXNlU2Vuc2l0aXZlXCIpLmlzT3B0aW9uYWwoKS5pc0Jvb2xlYW4oKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwidXNlc1NxbDkyQ29tcGxpYW50U3RyaW5nQ29tcGFyaXNvblwiKS5pc0Jvb2xlYW4oKVxyXG4gICAgICAgIC5hcHBseUFsbCh0aGlzKTtcclxuICAgIGlmICghdGhpcy5uYW1lKSB7XHJcbiAgICAgIHRoaXMubmFtZSA9IGNvcmUuZ2V0VXVpZCgpO1xyXG4gICAgfVxyXG4gICAgY29uZmlnLl9zdG9yZU9iamVjdCh0aGlzLCBcIkxvY2FsUXVlcnlDb21wYXJpc29uT3B0aW9uc1wiLCB0aGlzLm5hbWUpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgQ2FzZSBpbnNlbnNpdGl2ZSBTUUwgY29tcGxpYW50IG9wdGlvbnMgLSB0aGlzIGlzIGFsc28gdGhlIGRlZmF1bHQgdW5sZXNzIG90aGVyd2lzZSBjaGFuZ2VkLlxyXG4gICoqL1xyXG4gIHN0YXRpYyBjYXNlSW5zZW5zaXRpdmVTUUwgPSBuZXcgTG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zKHtcclxuICAgIG5hbWU6IFwiY2FzZUluc2Vuc2l0aXZlU1FMXCIsXHJcbiAgICBpc0Nhc2VTZW5zaXRpdmU6IGZhbHNlLFxyXG4gICAgdXNlc1NxbDkyQ29tcGxpYW50U3RyaW5nQ29tcGFyaXNvbjogdHJ1ZVxyXG4gIH0pO1xyXG5cclxuICAvKipcclxuICBUaGUgZGVmYXVsdCB2YWx1ZSB3aGVuZXZlciBMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnMgYXJlIG5vdCBzcGVjaWZpZWQuIEJ5IGRlZmF1bHQgdGhpcyBpcyAnY2FzZUluc2Vuc2l0aXZlU1FMJy5cclxuICAqKi9cclxuICBzdGF0aWMgZGVmYXVsdEluc3RhbmNlID0gbmV3IExvY2FsUXVlcnlDb21wYXJpc29uT3B0aW9ucyhMb2NhbFF1ZXJ5Q29tcGFyaXNvbk9wdGlvbnMuY2FzZUluc2Vuc2l0aXZlU1FMKTtcclxuXHJcbiAgLyoqXHJcbiAgU2V0cyB0aGUgJ2RlZmF1bHRJbnN0YW5jZScgYnkgY3JlYXRpbmcgYSBjb3B5IG9mIHRoZSBjdXJyZW50ICdkZWZhdWx0SW5zdGFuY2UnIGFuZCB0aGVuIGFwcGx5aW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBpbnN0YW5jZS5cclxuICBUaGUgY3VycmVudCBpbnN0YW5jZSBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXHJcbiAgPiAgICAgdmFyIGxxY28gPSBuZXcgTG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zKHtcclxuICA+ICAgICAgICBpc0Nhc2VTZW5zaXRpdmU6IGZhbHNlO1xyXG4gID4gICAgICAgIHVzZXNTcWw5MkNvbXBsaWFudFN0cmluZ0NvbXBhcmlzb246IHRydWU7XHJcbiAgPiAgICAgfSk7XHJcbiAgPiAgICAgbHFjby5zZXRBc0RlZmF1bHQoKTtcclxuICAqKi9cclxuICBzZXRBc0RlZmF1bHQoKSB7XHJcbiAgICByZXR1cm4gY29yZS5zZXRBc0RlZmF1bHQodGhpcywgTG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zKTtcclxuICB9XHJcblxyXG59XHJcbkxvY2FsUXVlcnlDb21wYXJpc29uT3B0aW9ucy5wcm90b3R5cGUuXyR0eXBlTmFtZSA9IFwiTG9jYWxRdWVyeUNvbXBhcmlzb25PcHRpb25zXCI7XHJcbiJdfQ==