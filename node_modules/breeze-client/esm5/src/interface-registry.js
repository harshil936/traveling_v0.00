import { core } from './core';
import { assertConfig } from './assert-param';
import { config, InterfaceDef } from './config';
var InterfaceRegistry = /** @class */ (function () {
    function InterfaceRegistry() {
        this.ajax = new InterfaceDef("ajax");
        this.modelLibrary = new InterfaceDef("modelLibrary");
        this.dataService = new InterfaceDef("dataService");
        this.uriBuilder = new InterfaceDef("uriBuilder");
    }
    return InterfaceRegistry;
}());
export { InterfaceRegistry };
config.interfaceRegistry = new InterfaceRegistry();
config._interfaceRegistry = config.interfaceRegistry;
config.interfaceRegistry.modelLibrary.getDefaultInstance = function () {
    if (!this.defaultInstance) {
        throw new Error("Unable to locate the default implementation of the '" + this.name +
            "' interface.  Possible options are 'ko', 'backingStore' or 'backbone'. See the breeze.config.initializeAdapterInstances method.");
    }
    return this.defaultInstance;
};
/**
Initializes a collection of adapter implementations and makes each one the default for its corresponding interface.
@method initializeAdapterInstances
@param config {Object}
@param [config.ajax] {String} - the name of a previously registered "ajax" adapter
@param [config.dataService] {String} - the name of a previously registered "dataService" adapter
@param [config.modelLibrary] {String} - the name of a previously registered "modelLibrary" adapter
@param [config.uriBuilder] {String} - the name of a previously registered "uriBuilder" adapter
@return [array of instances]
**/
config.initializeAdapterInstances = function (irConfig) {
    assertConfig(irConfig)
        .whereParam("dataService").isOptional()
        .whereParam("modelLibrary").isOptional()
        .whereParam("ajax").isOptional()
        .whereParam("uriBuilder").isOptional()
        .applyAll(this, false);
    return core.objectMap(config, this.initializeAdapterInstance);
};
//# sourceMappingURL=data:application/json;base64,