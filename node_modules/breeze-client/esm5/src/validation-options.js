import { core } from './core';
import { assertConfig } from './assert-param';
/**
A ValidationOptions instance is used to specify the conditions under which validation will be executed.

*/
var ValidationOptions = /** @class */ (function () {
    /**
    ValidationOptions constructor
    >     var newVo = new ValidationOptions( { validateOnSave: false, validateOnAttach: false });
    >     // assume em1 is a preexisting EntityManager
    >     em1.setProperties( { validationOptions: newVo });
    @param config - A configuration object.
    **/
    function ValidationOptions(config) {
        updateWithConfig(this, config);
    }
    /**
    Returns a copy of this ValidationOptions with changes to the specified config properties.
    >     var validationOptions = new ValidationOptions();
    >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );
    @param config - A configuration object
    @return A new ValidationOptions instance.
    **/
    ValidationOptions.prototype.using = function (config) {
        if (!config)
            return this;
        var result = new ValidationOptions(this);
        updateWithConfig(result, config);
        return result;
    };
    /**
    Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.
    The current instance is returned unchanged.
    >     var validationOptions = new ValidationOptions()
    >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );
    >     var newOptions.setAsDefault();
    **/
    ValidationOptions.prototype.setAsDefault = function () {
        return core.setAsDefault(this, ValidationOptions);
    };
    /**
    The default instance for use whenever ValidationOptions are not specified.
    **/
    ValidationOptions.defaultInstance = new ValidationOptions({
        validateOnAttach: true,
        validateOnSave: true,
        validateOnQuery: false,
        validateOnPropertyChange: true
    });
    return ValidationOptions;
}());
export { ValidationOptions };
ValidationOptions.prototype._$typeName = "ValidationOptions";
function updateWithConfig(options, config) {
    if (config) {
        assertConfig(config)
            .whereParam("validateOnAttach").isBoolean().isOptional()
            .whereParam("validateOnSave").isBoolean().isOptional()
            .whereParam("validateOnQuery").isBoolean().isOptional()
            .whereParam("validateOnPropertyChange").isBoolean().isOptional()
            .applyAll(options);
    }
    return options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC8iLCJzb3VyY2VzIjpbInNyYy92YWxpZGF0aW9uLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRyxNQUFNLFFBQVEsQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFrQjlDOzs7RUFHRTtBQUNGO0lBa0JFOzs7Ozs7T0FNRztJQUNILDJCQUFZLE1BQWdDO1FBQzFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBR0Q7Ozs7OztPQU1HO0lBQ0gsaUNBQUssR0FBTCxVQUFNLE1BQStCO1FBQ25DLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDekIsSUFBSSxNQUFNLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6QyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDakMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILHdDQUFZLEdBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksaUNBQWUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO1FBQzdDLGdCQUFnQixFQUFFLElBQUk7UUFDdEIsY0FBYyxFQUFFLElBQUk7UUFDcEIsZUFBZSxFQUFFLEtBQUs7UUFDdEIsd0JBQXdCLEVBQUUsSUFBSTtLQUMvQixDQUFDLENBQUM7SUFDTCx3QkFBQztDQUFBLEFBaEVELElBZ0VDO1NBaEVZLGlCQUFpQjtBQWlFOUIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztBQUU3RCxTQUFTLGdCQUFnQixDQUFDLE9BQTBCLEVBQUUsTUFBK0I7SUFDbkYsSUFBSSxNQUFNLEVBQUU7UUFDVixZQUFZLENBQUMsTUFBTSxDQUFDO2FBQ2YsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFO2FBQ3ZELFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRTthQUNyRCxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUU7YUFDdEQsVUFBVSxDQUFDLDBCQUEwQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFO2FBQy9ELFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN4QjtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb3JlICB9IGZyb20gJy4vY29yZSc7XHJcbmltcG9ydCB7IGFzc2VydENvbmZpZyB9IGZyb20gJy4vYXNzZXJ0LXBhcmFtJztcclxuXHJcbi8qKiBDb25maWd1cmF0aW9uIGluZm8gdG8gYmUgcGFzc2VkIHRvIHRoZSBbW1ZhbGlkYXRpb25PcHRpb25zXV0gY29uc3RydWN0b3IgKi9cclxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uT3B0aW9uc0NvbmZpZyB7XHJcbiAgLyoqIFdoZXRoZXIgZW50aXR5IGFuZCBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciB3aGVuIGVudGl0aWVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRW50aXR5TWFuYWdlciBcclxuICBvdGhlciB0aGFuIHZpYSBhIHF1ZXJ5LiAoZGVmYXVsdCA9IHRydWUpICovXHJcbiAgdmFsaWRhdGVPbkF0dGFjaD86IGJvb2xlYW47XHJcbiAgLyoqICBXaGV0aGVyIGVudGl0eSBhbmQgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgYmVmb3JlIGVudGl0aWVzIGFyZSBzYXZlZC4gXHJcbiAgQSBmYWlsZWQgdmFsaWRhdGlvbiB3aWxsIGZvcmNlIHRoZSBzYXZlIHRvIGZhaWwgZWFybHkuIChkZWZhdWx0ID0gdHJ1ZSkgICovXHJcbiAgdmFsaWRhdGVPblNhdmU/OiBib29sZWFuO1xyXG4gIC8qKiBXaGV0aGVyIGVudGl0eSBhbmQgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgYWZ0ZXIgZW50aXRpZXMgYXJlIHF1ZXJpZWQgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIuXHJcbiAgKGRlZmF1bHQgPSBmYWxzZSkgICoqL1xyXG4gIHZhbGlkYXRlT25RdWVyeT86IGJvb2xlYW47XHJcbiAgLyoqIFdoZXRoZXIgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgYWZ0ZXIgZW50aXRpZXMgYXJlIG1vZGlmaWVkLlxyXG4gIChkZWZhdWx0ID0gdHJ1ZSkgICoqL1xyXG4gIHZhbGlkYXRlT25Qcm9wZXJ0eUNoYW5nZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbi8qKlxyXG5BIFZhbGlkYXRpb25PcHRpb25zIGluc3RhbmNlIGlzIHVzZWQgdG8gc3BlY2lmeSB0aGUgY29uZGl0aW9ucyB1bmRlciB3aGljaCB2YWxpZGF0aW9uIHdpbGwgYmUgZXhlY3V0ZWQuXHJcblxyXG4qL1xyXG5leHBvcnQgY2xhc3MgVmFsaWRhdGlvbk9wdGlvbnMgaW1wbGVtZW50cyBWYWxpZGF0aW9uT3B0aW9uc0NvbmZpZyB7XHJcbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXHJcbiAgXyR0eXBlTmFtZTogc3RyaW5nOyAvLyBvbiBwcm90b1xyXG4gIC8qKiBXaGV0aGVyIGVudGl0eSBhbmQgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgd2hlbiBlbnRpdGllcyBhcmUgYXR0YWNoZWQgdG8gdGhlIEVudGl0eU1hbmFnZXIgXHJcbiAgb3RoZXIgdGhhbiB2aWEgYSBxdWVyeS4gKGRlZmF1bHQgPSB0cnVlKSBfX1JlYWQgT25seV9fICovXHJcbiAgdmFsaWRhdGVPbkF0dGFjaDogYm9vbGVhbjtcclxuICAvKiogV2hldGhlciBlbnRpdHkgYW5kIHByb3BlcnR5IGxldmVsIHZhbGlkYXRpb24gc2hvdWxkIG9jY3VyIGJlZm9yZSBlbnRpdGllcyBhcmUgc2F2ZWQuIFxyXG4gIEEgZmFpbGVkIHZhbGlkYXRpb24gd2lsbCBmb3JjZSB0aGUgc2F2ZSB0byBmYWlsIGVhcmx5LiAoZGVmYXVsdCA9IHRydWUpIF9fUmVhZCBPbmx5X18gKi9cclxuICB2YWxpZGF0ZU9uU2F2ZTogYm9vbGVhbjtcclxuICAvKiogV2hldGhlciBlbnRpdHkgYW5kIHByb3BlcnR5IGxldmVsIHZhbGlkYXRpb24gc2hvdWxkIG9jY3VyIGFmdGVyIGVudGl0aWVzIGFyZSBxdWVyaWVkIGZyb20gYSByZW1vdGUgc2VydmVyLlxyXG4gIChkZWZhdWx0ID0gZmFsc2UpIF9fUmVhZCBPbmx5X18gICoqL1xyXG4gIHZhbGlkYXRlT25RdWVyeTogYm9vbGVhbjtcclxuICAvKiogV2hldGhlciBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciBhZnRlciBlbnRpdGllcyBhcmUgbW9kaWZpZWQuXHJcbiAgKGRlZmF1bHQgPSB0cnVlKSBfX1JlYWQgT25seV9fICoqL1xyXG4gIHZhbGlkYXRlT25Qcm9wZXJ0eUNoYW5nZTogYm9vbGVhbjtcclxuXHJcblxyXG5cclxuICAvKiogXHJcbiAgVmFsaWRhdGlvbk9wdGlvbnMgY29uc3RydWN0b3JcclxuICA+ICAgICB2YXIgbmV3Vm8gPSBuZXcgVmFsaWRhdGlvbk9wdGlvbnMoIHsgdmFsaWRhdGVPblNhdmU6IGZhbHNlLCB2YWxpZGF0ZU9uQXR0YWNoOiBmYWxzZSB9KTtcclxuICA+ICAgICAvLyBhc3N1bWUgZW0xIGlzIGEgcHJlZXhpc3RpbmcgRW50aXR5TWFuYWdlclxyXG4gID4gICAgIGVtMS5zZXRQcm9wZXJ0aWVzKCB7IHZhbGlkYXRpb25PcHRpb25zOiBuZXdWbyB9KTtcclxuICBAcGFyYW0gY29uZmlnIC0gQSBjb25maWd1cmF0aW9uIG9iamVjdC5cclxuICAqKi9cclxuICBjb25zdHJ1Y3Rvcihjb25maWc/OiBWYWxpZGF0aW9uT3B0aW9uc0NvbmZpZykge1xyXG4gICAgdXBkYXRlV2l0aENvbmZpZyh0aGlzLCBjb25maWcpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gIFJldHVybnMgYSBjb3B5IG9mIHRoaXMgVmFsaWRhdGlvbk9wdGlvbnMgd2l0aCBjaGFuZ2VzIHRvIHRoZSBzcGVjaWZpZWQgY29uZmlnIHByb3BlcnRpZXMuXHJcbiAgPiAgICAgdmFyIHZhbGlkYXRpb25PcHRpb25zID0gbmV3IFZhbGlkYXRpb25PcHRpb25zKCk7XHJcbiAgPiAgICAgdmFyIG5ld09wdGlvbnMgPSB2YWxpZGF0aW9uT3B0aW9ucy51c2luZyggeyB2YWxpZGF0ZU9uUXVlcnk6IHRydWUsIHZhbGlkYXRlT25TYXZlOiBmYWxzZX0gKTtcclxuICBAcGFyYW0gY29uZmlnIC0gQSBjb25maWd1cmF0aW9uIG9iamVjdFxyXG4gIEByZXR1cm4gQSBuZXcgVmFsaWRhdGlvbk9wdGlvbnMgaW5zdGFuY2UuXHJcbiAgKiovXHJcbiAgdXNpbmcoY29uZmlnOiBWYWxpZGF0aW9uT3B0aW9uc0NvbmZpZykge1xyXG4gICAgaWYgKCFjb25maWcpIHJldHVybiB0aGlzO1xyXG4gICAgbGV0IHJlc3VsdCA9IG5ldyBWYWxpZGF0aW9uT3B0aW9ucyh0aGlzKTtcclxuICAgIHVwZGF0ZVdpdGhDb25maWcocmVzdWx0LCBjb25maWcpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gIFNldHMgdGhlICdkZWZhdWx0SW5zdGFuY2UnIGJ5IGNyZWF0aW5nIGEgY29weSBvZiB0aGUgY3VycmVudCAnZGVmYXVsdEluc3RhbmNlJyBhbmQgdGhlbiBhcHBseWluZyBhbGwgb2YgdGhlIHByb3BlcnRpZXMgb2YgdGhlIGN1cnJlbnQgaW5zdGFuY2UuXHJcbiAgVGhlIGN1cnJlbnQgaW5zdGFuY2UgaXMgcmV0dXJuZWQgdW5jaGFuZ2VkLlxyXG4gID4gICAgIHZhciB2YWxpZGF0aW9uT3B0aW9ucyA9IG5ldyBWYWxpZGF0aW9uT3B0aW9ucygpXHJcbiAgPiAgICAgdmFyIG5ld09wdGlvbnMgPSB2YWxpZGF0aW9uT3B0aW9ucy51c2luZyggeyB2YWxpZGF0ZU9uUXVlcnk6IHRydWUsIHZhbGlkYXRlT25TYXZlOiBmYWxzZX0gKTtcclxuICA+ICAgICB2YXIgbmV3T3B0aW9ucy5zZXRBc0RlZmF1bHQoKTtcclxuICAqKi9cclxuICBzZXRBc0RlZmF1bHQoKSB7XHJcbiAgICByZXR1cm4gY29yZS5zZXRBc0RlZmF1bHQodGhpcywgVmFsaWRhdGlvbk9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgVGhlIGRlZmF1bHQgaW5zdGFuY2UgZm9yIHVzZSB3aGVuZXZlciBWYWxpZGF0aW9uT3B0aW9ucyBhcmUgbm90IHNwZWNpZmllZC5cclxuICAqKi9cclxuICBzdGF0aWMgZGVmYXVsdEluc3RhbmNlID0gbmV3IFZhbGlkYXRpb25PcHRpb25zKHtcclxuICAgIHZhbGlkYXRlT25BdHRhY2g6IHRydWUsXHJcbiAgICB2YWxpZGF0ZU9uU2F2ZTogdHJ1ZSxcclxuICAgIHZhbGlkYXRlT25RdWVyeTogZmFsc2UsXHJcbiAgICB2YWxpZGF0ZU9uUHJvcGVydHlDaGFuZ2U6IHRydWVcclxuICB9KTtcclxufVxyXG5WYWxpZGF0aW9uT3B0aW9ucy5wcm90b3R5cGUuXyR0eXBlTmFtZSA9IFwiVmFsaWRhdGlvbk9wdGlvbnNcIjtcclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVdpdGhDb25maWcob3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMsIGNvbmZpZzogVmFsaWRhdGlvbk9wdGlvbnNDb25maWcpIHtcclxuICBpZiAoY29uZmlnKSB7XHJcbiAgICBhc3NlcnRDb25maWcoY29uZmlnKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwidmFsaWRhdGVPbkF0dGFjaFwiKS5pc0Jvb2xlYW4oKS5pc09wdGlvbmFsKClcclxuICAgICAgICAud2hlcmVQYXJhbShcInZhbGlkYXRlT25TYXZlXCIpLmlzQm9vbGVhbigpLmlzT3B0aW9uYWwoKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwidmFsaWRhdGVPblF1ZXJ5XCIpLmlzQm9vbGVhbigpLmlzT3B0aW9uYWwoKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwidmFsaWRhdGVPblByb3BlcnR5Q2hhbmdlXCIpLmlzQm9vbGVhbigpLmlzT3B0aW9uYWwoKVxyXG4gICAgICAgIC5hcHBseUFsbChvcHRpb25zKTtcclxuICB9XHJcbiAgcmV0dXJuIG9wdGlvbnM7XHJcbn1cclxuIl19