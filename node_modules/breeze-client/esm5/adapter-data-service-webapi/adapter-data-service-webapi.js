import * as tslib_1 from "tslib";
import * as breeze from 'breeze-client';
// import { JsonResultsAdapter, KeyMapping } from './breeze';
/** @hidden */
var DataServiceWebApiAdapter = /** @class */ (function (_super) {
    tslib_1.__extends(DataServiceWebApiAdapter, _super);
    function DataServiceWebApiAdapter() {
        var _this = _super.call(this) || this;
        _this.jsonResultsAdapter = new breeze.JsonResultsAdapter({
            name: "webApi_default",
            visitNode: function (node, mappingContext, nodeContext) {
                if (node == null)
                    return {};
                var entityTypeName = breeze.MetadataStore.normalizeTypeName(node.$type);
                var entityType = entityTypeName && mappingContext.entityManager.metadataStore.getEntityType(entityTypeName, true);
                var propertyName = nodeContext.propertyName;
                var ignore = propertyName && propertyName.substr(0, 1) === "$";
                return {
                    entityType: entityType,
                    nodeId: node.$id,
                    nodeRefId: node.$ref,
                    ignore: ignore
                };
            }
        });
        _this.name = "webApi";
        return _this;
    }
    DataServiceWebApiAdapter.register = function (config) {
        config = config || breeze.config;
        config.registerAdapter("dataService", DataServiceWebApiAdapter);
        return config.initializeAdapterInstance("dataService", "webApi", true);
    };
    /** @hidden @internal */
    DataServiceWebApiAdapter.prototype._prepareSaveBundle = function (saveContext, saveBundle) {
        var changeRequestInterceptor = this._createChangeRequestInterceptor(saveContext, saveBundle);
        var em = saveContext.entityManager;
        var metadataStore = em.metadataStore;
        var helper = em.helper;
        var serSaveBundle = {};
        serSaveBundle.entities = saveBundle.entities.map(function (e, ix) {
            var rawEntity = helper.unwrapInstance(e);
            var autoGeneratedKey;
            if (e.entityType.autoGeneratedKeyType !== breeze.AutoGeneratedKeyType.None) {
                autoGeneratedKey = {
                    propertyName: e.entityType.keyProperties[0].nameOnServer,
                    autoGeneratedKeyType: e.entityType.autoGeneratedKeyType.name
                };
            }
            var originalValuesOnServer = helper.unwrapOriginalValues(e, metadataStore);
            rawEntity.entityAspect = {
                entityTypeName: e.entityType.name,
                defaultResourceName: e.entityType.defaultResourceName,
                entityState: e.entityAspect.entityState.name,
                originalValuesMap: originalValuesOnServer,
                autoGeneratedKey: autoGeneratedKey
            };
            rawEntity = changeRequestInterceptor.getRequest(rawEntity, e, ix);
            return rawEntity;
        });
        serSaveBundle.saveOptions = { tag: saveBundle.saveOptions.tag };
        changeRequestInterceptor.done(serSaveBundle.entities);
        return serSaveBundle;
    };
    /** @hidden @internal */
    DataServiceWebApiAdapter.prototype._prepareSaveResult = function (saveContext, data) {
        // use the jsonResultAdapter to extractResults and extractKeyMappings
        var jra = saveContext.dataService.jsonResultsAdapter || this.jsonResultsAdapter;
        var entities = jra.extractSaveResults(data) || [];
        var keyMappings = jra.extractKeyMappings(data) || [];
        var deletedKeys = jra.extractDeletedKeys ? (jra.extractDeletedKeys(data)) || [] : [];
        if (keyMappings.length) {
            // HACK: need to change the 'case' of properties in the saveResult
            // but KeyMapping properties internally are still ucase. ugh...
            keyMappings = keyMappings.map(function (km) {
                if (km.entityTypeName)
                    return km; // it's already lower case
                var kmHack = km;
                var entityTypeName = breeze.MetadataStore.normalizeTypeName(kmHack.EntityTypeName);
                return { entityTypeName: entityTypeName, tempValue: kmHack.TempValue, realValue: kmHack.RealValue };
            });
        }
        if (deletedKeys.length) {
            deletedKeys = deletedKeys.map(function (dk) {
                if (dk.entityTypeName)
                    return dk; // it's already lower case
                var entityTypeName = breeze.MetadataStore.normalizeTypeName(dk.EntityTypeName);
                // NOTE the dk.KeyValue => keyValues transition - needed because we are deserializing an .NET EntityKey
                return { entityTypeName: entityTypeName, keyValues: dk.KeyValue };
            });
        }
        return { entities: entities, keyMappings: keyMappings, deletedKeys: deletedKeys };
    };
    return DataServiceWebApiAdapter;
}(breeze.AbstractDataServiceAdapter));
export { DataServiceWebApiAdapter };
breeze.config.registerAdapter("dataService", DataServiceWebApiAdapter);
//# sourceMappingURL=data:application/json;base64,