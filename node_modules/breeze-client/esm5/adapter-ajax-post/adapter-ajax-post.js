/**
 *  Functions to enable Breeze to use POST for queries when
 *  special parameters are passed using the .withParameters function.
 *
 * Copyright 2015-2019 IdeaBlade, Inc.  All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the IdeaBlade Breeze license, available at http://www.breezejs.com/license
 *
 * Author: Steve Schmitt
 * Version:
 *  1.2.0 - Moved into breeze-client repo and npm package
 *  1.1.0 - revised: eliminated return object, configAjaxAdapter method; add ajaxPostEnabled flag
 *  1.0.6 - original
 *
 * Special parameters:
 *  $method: ‘POST’ or ‘GET’ (the default)
 *  $encoding: ‘JSON’ or x-www-form-urlencoded (the default)
 *  $data: contains the data to be sent to the server
 *
 * Installation:
 *    var ajaxAdapter = config.initializeAdapterInstance('ajax', adapterName, true);
 *    AjaxPostWrapper.wrapAjax(ajaxAdapter);
 *
 * Example:
 *   var query = breeze.EntityQuery.from('SimilarCustomersPOST')
 *            .withParameters({
 *                $method: 'POST',
 *                $encoding: 'JSON',
 *               $data: { CompanyName: 'Hilo Hattie', ContactName: 'Donald', City: 'Duck', Country: 'USA', Phone: '808-234-5678' }
 *           });
 *
 **/
var AjaxPostWrapper = /** @class */ (function () {
    function AjaxPostWrapper() {
    }
    AjaxPostWrapper.wrapAjax = function (ajaxAdapter) {
        if (ajaxAdapter.ajaxPostEnabled) {
            return; // already wrapped it.
        }
        var ajaxFunction = ajaxAdapter.ajax;
        if (ajaxFunction) {
            ajaxAdapter.ajax = function (settings) {
                processSettings(settings);
                return ajaxFunction.call(ajaxAdapter, settings);
            };
            ajaxAdapter.ajaxPostEnabled = true;
        }
        // Handle the POST-specific properties in the settings - $method, $data, $encoding
        function processSettings(settings) {
            var parameters = settings && settings.params;
            if (!parameters)
                return settings;
            // wrapped data; handle the special properties
            settings.type = parameters.$method || settings.type; // GET is default method
            var data = parameters.$data;
            if (data) {
                // if $data exists, assume all of other parameters are guidance for building a POST
                if (parameters.$encoding === 'JSON') {
                    // JSON encoding
                    settings.processData = false; // don't let JQuery form-encode it
                    settings.contentType = "application/json; charset=UTF-8";
                    if (typeof (data) === 'object') {
                        settings.data = JSON.stringify(data); // encode parameters as JSON
                    }
                    else {
                        settings.data = data;
                    }
                }
                else {
                    settings.data = data;
                }
                // must be null or jQuery ajax adapter won't see settings.data
                settings.params = null;
            }
            return settings;
        }
    };
    return AjaxPostWrapper;
}());
export { AjaxPostWrapper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci1hamF4LXBvc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9icmVlemUtY2xpZW50L2FkYXB0ZXItYWpheC1wb3N0LyIsInNvdXJjZXMiOlsiYWRhcHRlci1hamF4LXBvc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUErQkk7QUFDSjtJQUFBO0lBbURBLENBQUM7SUFqRFEsd0JBQVEsR0FBZixVQUFnQixXQUErQjtRQUU3QyxJQUFLLFdBQW1CLENBQUMsZUFBZSxFQUFFO1lBQ3hDLE9BQU8sQ0FBQyxzQkFBc0I7U0FDL0I7UUFFRCxJQUFJLFlBQVksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQUksWUFBWSxFQUFFO1lBQ2hCLFdBQVcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxRQUFRO2dCQUNuQyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxDQUFDO1lBQ0QsV0FBbUIsQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1NBQzdDO1FBR0Qsa0ZBQWtGO1FBQ2xGLFNBQVMsZUFBZSxDQUFDLFFBQWE7WUFDcEMsSUFBSSxVQUFVLEdBQUcsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUM7WUFDN0MsSUFBSSxDQUFDLFVBQVU7Z0JBQUUsT0FBTyxRQUFRLENBQUM7WUFFakMsOENBQThDO1lBQzlDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsd0JBQXdCO1lBRTdFLElBQUksSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDNUIsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsbUZBQW1GO2dCQUNuRixJQUFJLFVBQVUsQ0FBQyxTQUFTLEtBQUssTUFBTSxFQUFFO29CQUNuQyxnQkFBZ0I7b0JBQ2hCLFFBQVEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLENBQUMsa0NBQWtDO29CQUNoRSxRQUFRLENBQUMsV0FBVyxHQUFHLGlDQUFpQyxDQUFDO29CQUV6RCxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7d0JBQzlCLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDRCQUE0QjtxQkFDbkU7eUJBQU07d0JBQ0wsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7cUJBQ3RCO2lCQUNGO3FCQUFNO29CQUNMLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO2lCQUN0QjtnQkFDRCw4REFBOEQ7Z0JBQzlELFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ3hCO1lBRUQsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQztJQUNILENBQUM7SUFHSCxzQkFBQztBQUFELENBQUMsQUFuREQsSUFtREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBicmVlemUgZnJvbSAnYnJlZXplLWNsaWVudCc7XHJcblxyXG4vKipcclxuICogIEZ1bmN0aW9ucyB0byBlbmFibGUgQnJlZXplIHRvIHVzZSBQT1NUIGZvciBxdWVyaWVzIHdoZW5cclxuICogIHNwZWNpYWwgcGFyYW1ldGVycyBhcmUgcGFzc2VkIHVzaW5nIHRoZSAud2l0aFBhcmFtZXRlcnMgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIENvcHlyaWdodCAyMDE1LTIwMTkgSWRlYUJsYWRlLCBJbmMuICBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBVc2UsIHJlcHJvZHVjdGlvbiwgZGlzdHJpYnV0aW9uLCBhbmQgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29kZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmRcclxuICogY29uZGl0aW9ucyBvZiB0aGUgSWRlYUJsYWRlIEJyZWV6ZSBsaWNlbnNlLCBhdmFpbGFibGUgYXQgaHR0cDovL3d3dy5icmVlemVqcy5jb20vbGljZW5zZVxyXG4gKlxyXG4gKiBBdXRob3I6IFN0ZXZlIFNjaG1pdHRcclxuICogVmVyc2lvbjogXHJcbiAqICAxLjIuMCAtIE1vdmVkIGludG8gYnJlZXplLWNsaWVudCByZXBvIGFuZCBucG0gcGFja2FnZVxyXG4gKiAgMS4xLjAgLSByZXZpc2VkOiBlbGltaW5hdGVkIHJldHVybiBvYmplY3QsIGNvbmZpZ0FqYXhBZGFwdGVyIG1ldGhvZDsgYWRkIGFqYXhQb3N0RW5hYmxlZCBmbGFnXHJcbiAqICAxLjAuNiAtIG9yaWdpbmFsXHJcbiAqXHJcbiAqIFNwZWNpYWwgcGFyYW1ldGVyczpcclxuICogICRtZXRob2Q6IOKAmFBPU1TigJkgb3Ig4oCYR0VU4oCZICh0aGUgZGVmYXVsdClcclxuICogICRlbmNvZGluZzog4oCYSlNPTuKAmSBvciB4LXd3dy1mb3JtLXVybGVuY29kZWQgKHRoZSBkZWZhdWx0KVxyXG4gKiAgJGRhdGE6IGNvbnRhaW5zIHRoZSBkYXRhIHRvIGJlIHNlbnQgdG8gdGhlIHNlcnZlclxyXG4gKlxyXG4gKiBJbnN0YWxsYXRpb246XHJcbiAqICAgIHZhciBhamF4QWRhcHRlciA9IGNvbmZpZy5pbml0aWFsaXplQWRhcHRlckluc3RhbmNlKCdhamF4JywgYWRhcHRlck5hbWUsIHRydWUpO1xyXG4gKiAgICBBamF4UG9zdFdyYXBwZXIud3JhcEFqYXgoYWpheEFkYXB0ZXIpO1xyXG4gKlxyXG4gKiBFeGFtcGxlOlxyXG4gKiAgIHZhciBxdWVyeSA9IGJyZWV6ZS5FbnRpdHlRdWVyeS5mcm9tKCdTaW1pbGFyQ3VzdG9tZXJzUE9TVCcpXHJcbiAqICAgICAgICAgICAgLndpdGhQYXJhbWV0ZXJzKHtcclxuICogICAgICAgICAgICAgICAgJG1ldGhvZDogJ1BPU1QnLFxyXG4gKiAgICAgICAgICAgICAgICAkZW5jb2Rpbmc6ICdKU09OJyxcclxuICogICAgICAgICAgICAgICAkZGF0YTogeyBDb21wYW55TmFtZTogJ0hpbG8gSGF0dGllJywgQ29udGFjdE5hbWU6ICdEb25hbGQnLCBDaXR5OiAnRHVjaycsIENvdW50cnk6ICdVU0EnLCBQaG9uZTogJzgwOC0yMzQtNTY3OCcgfVxyXG4gKiAgICAgICAgICAgfSk7XHJcbiAqXHJcbiAqKi9cclxuZXhwb3J0IGNsYXNzIEFqYXhQb3N0V3JhcHBlciB7XHJcblxyXG4gIHN0YXRpYyB3cmFwQWpheChhamF4QWRhcHRlcjogYnJlZXplLkFqYXhBZGFwdGVyKSB7XHJcblxyXG4gICAgaWYgKChhamF4QWRhcHRlciBhcyBhbnkpLmFqYXhQb3N0RW5hYmxlZCkge1xyXG4gICAgICByZXR1cm47IC8vIGFscmVhZHkgd3JhcHBlZCBpdC5cclxuICAgIH1cclxuXHJcbiAgICBsZXQgYWpheEZ1bmN0aW9uID0gYWpheEFkYXB0ZXIuYWpheDtcclxuICAgIGlmIChhamF4RnVuY3Rpb24pIHtcclxuICAgICAgYWpheEFkYXB0ZXIuYWpheCA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xyXG4gICAgICAgIHByb2Nlc3NTZXR0aW5ncyhzZXR0aW5ncyk7XHJcbiAgICAgICAgcmV0dXJuIGFqYXhGdW5jdGlvbi5jYWxsKGFqYXhBZGFwdGVyLCBzZXR0aW5ncyk7XHJcbiAgICAgIH07XHJcbiAgICAgIChhamF4QWRhcHRlciBhcyBhbnkpLmFqYXhQb3N0RW5hYmxlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIEhhbmRsZSB0aGUgUE9TVC1zcGVjaWZpYyBwcm9wZXJ0aWVzIGluIHRoZSBzZXR0aW5ncyAtICRtZXRob2QsICRkYXRhLCAkZW5jb2RpbmdcclxuICAgIGZ1bmN0aW9uIHByb2Nlc3NTZXR0aW5ncyhzZXR0aW5nczogYW55KSB7XHJcbiAgICAgIGxldCBwYXJhbWV0ZXJzID0gc2V0dGluZ3MgJiYgc2V0dGluZ3MucGFyYW1zO1xyXG4gICAgICBpZiAoIXBhcmFtZXRlcnMpIHJldHVybiBzZXR0aW5ncztcclxuXHJcbiAgICAgIC8vIHdyYXBwZWQgZGF0YTsgaGFuZGxlIHRoZSBzcGVjaWFsIHByb3BlcnRpZXNcclxuICAgICAgc2V0dGluZ3MudHlwZSA9IHBhcmFtZXRlcnMuJG1ldGhvZCB8fCBzZXR0aW5ncy50eXBlOyAvLyBHRVQgaXMgZGVmYXVsdCBtZXRob2RcclxuXHJcbiAgICAgIGxldCBkYXRhID0gcGFyYW1ldGVycy4kZGF0YTtcclxuICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAvLyBpZiAkZGF0YSBleGlzdHMsIGFzc3VtZSBhbGwgb2Ygb3RoZXIgcGFyYW1ldGVycyBhcmUgZ3VpZGFuY2UgZm9yIGJ1aWxkaW5nIGEgUE9TVFxyXG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLiRlbmNvZGluZyA9PT0gJ0pTT04nKSB7XHJcbiAgICAgICAgICAvLyBKU09OIGVuY29kaW5nXHJcbiAgICAgICAgICBzZXR0aW5ncy5wcm9jZXNzRGF0YSA9IGZhbHNlOyAvLyBkb24ndCBsZXQgSlF1ZXJ5IGZvcm0tZW5jb2RlIGl0XHJcbiAgICAgICAgICBzZXR0aW5ncy5jb250ZW50VHlwZSA9IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOFwiO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlb2YgKGRhdGEpID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICBzZXR0aW5ncy5kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7IC8vIGVuY29kZSBwYXJhbWV0ZXJzIGFzIEpTT05cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZXR0aW5ncy5kYXRhID0gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbXVzdCBiZSBudWxsIG9yIGpRdWVyeSBhamF4IGFkYXB0ZXIgd29uJ3Qgc2VlIHNldHRpbmdzLmRhdGFcclxuICAgICAgICBzZXR0aW5ncy5wYXJhbXMgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc2V0dGluZ3M7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbn0iXX0=