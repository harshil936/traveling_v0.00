import * as breeze from 'breeze-client';
var UriBuilderJsonAdapter = /** @class */ (function () {
    function UriBuilderJsonAdapter() {
        this.name = "json";
    }
    UriBuilderJsonAdapter.register = function (config) {
        config = config || breeze.config;
        config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
        return config.initializeAdapterInstance("uriBuilder", "json", true);
    };
    UriBuilderJsonAdapter.prototype.initialize = function () { };
    UriBuilderJsonAdapter.prototype.buildUri = function (entityQuery, metadataStore) {
        // force entityType validation;
        var entityType = entityQuery._getFromEntityType(metadataStore, false);
        if (!entityType)
            entityType = new breeze.EntityType(metadataStore);
        var json = entityQuery.toJSONExt({ entityType: entityType, toNameOnServer: true });
        json.from = undefined;
        json.queryOptions = undefined;
        if (json.parameters && json.parameters.$data) {
            // remove parameters if doing ajax post
            json.parameters = undefined;
        }
        var jsonString = JSON.stringify(json);
        if (jsonString.length > 2) {
            var urlBody = encodeURIComponent(jsonString);
            var sep = entityQuery.resourceName.includes("?") ? "&" : "?";
            return entityQuery.resourceName + sep + urlBody;
        }
        else {
            return entityQuery.resourceName;
        }
    };
    return UriBuilderJsonAdapter;
}());
export { UriBuilderJsonAdapter };
breeze.config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci11cmktYnVpbGRlci1qc29uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC9hZGFwdGVyLXVyaS1idWlsZGVyLWpzb24vIiwic291cmNlcyI6WyJhZGFwdGVyLXVyaS1idWlsZGVyLWpzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFFeEM7SUFHRTtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFTSw4QkFBUSxHQUFmLFVBQWdCLE1BQTRCO1FBQzFDLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVELE9BQU8sTUFBTSxDQUFDLHlCQUF5QixDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUEwQixDQUFDO0lBQy9GLENBQUM7SUFFRCwwQ0FBVSxHQUFWLGNBQWMsQ0FBQztJQUVmLHdDQUFRLEdBQVIsVUFBUyxXQUErQixFQUFFLGFBQW1DO1FBQzNFLCtCQUErQjtRQUMvQixJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxVQUFVO1lBQUUsVUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFDLENBQVEsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUU7WUFDNUMsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzdDLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUM3RCxPQUFPLFdBQVcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNqRDthQUFNO1lBQ0wsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDO1NBQ2pDO0lBRUgsQ0FBQztJQUVILDRCQUFDO0FBQUQsQ0FBQyxBQXRDRCxJQXNDQzs7QUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUscUJBQXFCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGJyZWV6ZSBmcm9tICdicmVlemUtY2xpZW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBVcmlCdWlsZGVySnNvbkFkYXB0ZXIgaW1wbGVtZW50cyBicmVlemUuVXJpQnVpbGRlckFkYXB0ZXIge1xyXG4gIG5hbWU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBcImpzb25cIjtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWdpc3Rlcihjb25maWc/OiBicmVlemUuQnJlZXplQ29uZmlnKSB7XHJcbiAgICBjb25maWcgPSBjb25maWcgfHwgYnJlZXplLmNvbmZpZztcclxuICAgIGNvbmZpZy5yZWdpc3RlckFkYXB0ZXIoXCJ1cmlCdWlsZGVyXCIsIFVyaUJ1aWxkZXJKc29uQWRhcHRlcik7XHJcbiAgICByZXR1cm4gY29uZmlnLmluaXRpYWxpemVBZGFwdGVySW5zdGFuY2UoXCJ1cmlCdWlsZGVyXCIsIFwianNvblwiLCB0cnVlKSBhcyBVcmlCdWlsZGVySnNvbkFkYXB0ZXI7XHJcbiAgfVxyXG5cclxuICBpbml0aWFsaXplKCkge31cclxuXHJcbiAgYnVpbGRVcmkoZW50aXR5UXVlcnk6IGJyZWV6ZS5FbnRpdHlRdWVyeSwgbWV0YWRhdGFTdG9yZTogYnJlZXplLk1ldGFkYXRhU3RvcmUpIHtcclxuICAgIC8vIGZvcmNlIGVudGl0eVR5cGUgdmFsaWRhdGlvbjtcclxuICAgIGxldCBlbnRpdHlUeXBlID0gZW50aXR5UXVlcnkuX2dldEZyb21FbnRpdHlUeXBlKG1ldGFkYXRhU3RvcmUsIGZhbHNlKTtcclxuICAgIGlmICghZW50aXR5VHlwZSkgZW50aXR5VHlwZSA9IG5ldyBicmVlemUuRW50aXR5VHlwZShtZXRhZGF0YVN0b3JlKTtcclxuICAgIGxldCBqc29uID0gZW50aXR5UXVlcnkudG9KU09ORXh0KCB7IGVudGl0eVR5cGU6IGVudGl0eVR5cGUsIHRvTmFtZU9uU2VydmVyOiB0cnVlfSkgYXMgYW55O1xyXG4gICAganNvbi5mcm9tID0gdW5kZWZpbmVkO1xyXG4gICAganNvbi5xdWVyeU9wdGlvbnMgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAoanNvbi5wYXJhbWV0ZXJzICYmIGpzb24ucGFyYW1ldGVycy4kZGF0YSkge1xyXG4gICAgICAvLyByZW1vdmUgcGFyYW1ldGVycyBpZiBkb2luZyBhamF4IHBvc3RcclxuICAgICAganNvbi5wYXJhbWV0ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBqc29uU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoanNvbik7XHJcbiAgICBpZiAoanNvblN0cmluZy5sZW5ndGggPiAyKSB7XHJcbiAgICAgIGxldCB1cmxCb2R5ID0gZW5jb2RlVVJJQ29tcG9uZW50KGpzb25TdHJpbmcpO1xyXG4gICAgICBsZXQgc2VwID0gZW50aXR5UXVlcnkucmVzb3VyY2VOYW1lLmluY2x1ZGVzKFwiP1wiKSA/IFwiJlwiIDogXCI/XCI7XHJcbiAgICAgIHJldHVybiBlbnRpdHlRdWVyeS5yZXNvdXJjZU5hbWUgKyBzZXAgKyB1cmxCb2R5O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGVudGl0eVF1ZXJ5LnJlc291cmNlTmFtZTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuYnJlZXplLmNvbmZpZy5yZWdpc3RlckFkYXB0ZXIoXCJ1cmlCdWlsZGVyXCIsIFVyaUJ1aWxkZXJKc29uQWRhcHRlcik7XHJcblxyXG5cclxuXHJcbiJdfQ==