import * as breeze from 'breeze-client';
var UriBuilderODataAdapter = /** @class */ (function () {
    function UriBuilderODataAdapter() {
        this.name = "odata";
    }
    UriBuilderODataAdapter.register = function (config) {
        config = config || breeze.config;
        config.registerAdapter("uriBuilder", UriBuilderODataAdapter);
        return config.initializeAdapterInstance("uriBuilder", "odata", true);
    };
    UriBuilderODataAdapter.prototype.initialize = function () { };
    UriBuilderODataAdapter.prototype.buildUri = function (entityQuery, metadataStore) {
        // force entityType validation;
        var entityType = entityQuery._getFromEntityType(metadataStore, false);
        if (!entityType) {
            // anonymous type but still has naming convention info avail
            entityType = new breeze.EntityType(metadataStore);
        }
        var queryOptions = {};
        queryOptions["$filter"] = toWhereODataFragment(entityQuery.wherePredicate);
        queryOptions["$orderby"] = toOrderByODataFragment(entityQuery.orderByClause);
        if (entityQuery.skipCount) {
            queryOptions["$skip"] = entityQuery.skipCount;
        }
        if (entityQuery.takeCount != null) {
            queryOptions["$top"] = entityQuery.takeCount;
        }
        queryOptions["$expand"] = toExpandODataFragment(entityQuery.expandClause);
        queryOptions["$select"] = toSelectODataFragment(entityQuery.selectClause);
        if (entityQuery.inlineCountEnabled) {
            queryOptions["$inlinecount"] = "allpages";
        }
        var qoText = toQueryOptionsString(queryOptions);
        var sep = entityQuery.resourceName.includes("?") ? "&" : "?";
        return entityQuery.resourceName + sep + qoText;
        // private methods to this func.
        function toWhereODataFragment(wherePredicate) {
            if (!wherePredicate)
                return undefined;
            // validation occurs inside of the toODataFragment call here.
            var frag = wherePredicate.visit({ entityType: entityType }, toODataFragmentVisitor);
            return (frag && frag.length > 0) ? frag : undefined;
        }
        function toOrderByODataFragment(orderByClause) {
            if (!orderByClause)
                return undefined;
            orderByClause.validate(entityType);
            var strings = orderByClause.items.map(function (item) {
                return entityType.clientPropertyPathToServer(item.propertyPath, "/") + (item.isDesc ? " desc" : "");
            });
            // should return something like CompanyName,Address/City desc
            return strings.join(',');
        }
        function toSelectODataFragment(selectClause) {
            if (!selectClause)
                return undefined;
            selectClause.validate(entityType);
            var frag = selectClause.propertyPaths.map(function (pp) {
                return entityType.clientPropertyPathToServer(pp, "/");
            }).join(",");
            return frag;
        }
        function toExpandODataFragment(expandClause) {
            if (!expandClause)
                return undefined;
            // no validate on expand clauses currently.
            // expandClause.validate(entityType);
            var frag = expandClause.propertyPaths.map(function (pp) {
                return entityType.clientPropertyPathToServer(pp, "/");
            }).join(",");
            return frag;
        }
        function toQueryOptionsString(queryOptions) {
            var qoStrings = [];
            var _loop_1 = function (qoName) {
                var qoValue = queryOptions[qoName];
                if (qoValue !== undefined) {
                    if (qoValue instanceof Array) {
                        qoValue.forEach(function (qov) {
                            qoStrings.push(qoName + "=" + encodeURIComponent(qov));
                        });
                    }
                    else {
                        qoStrings.push(qoName + "=" + encodeURIComponent(qoValue));
                    }
                }
            };
            for (var qoName in queryOptions) {
                _loop_1(qoName);
            }
            if (qoStrings.length > 0) {
                return qoStrings.join("&");
            }
            else {
                return "";
            }
        }
    };
    return UriBuilderODataAdapter;
}());
export { UriBuilderODataAdapter };
breeze.Predicate.prototype.toODataFragment = function (context) {
    return this.visit(context, toODataFragmentVisitor);
};
var ɵ0 = function () {
    return this.value;
}, ɵ1 = function (context) {
    var predVal = this.pred.visit(context);
    return odataOpFrom(this) + " " + "(" + predVal + ")";
}, ɵ2 = function (context) {
    var expr1Val = this.expr1.visit(context);
    var expr2Val = this.expr2.visit(context);
    var prefix = context.prefix;
    if (prefix) {
        expr1Val = prefix + "/" + expr1Val;
    }
    var odataOp = odataOpFrom(this);
    if (this.op.key === 'in') {
        var result = expr2Val.map(function (v) {
            return "(" + expr1Val + " eq " + v + ")";
        }).join(" or ");
        return result;
    }
    else if (this.op.isFunction) {
        if (odataOp === "substringof") {
            return odataOp + "(" + expr2Val + "," + expr1Val + ") eq true";
        }
        else {
            return odataOp + "(" + expr1Val + "," + expr2Val + ") eq true";
        }
    }
    else {
        return expr1Val + " " + odataOp + " " + expr2Val;
    }
}, ɵ3 = function (context) {
    var result = this.preds.map(function (pred) {
        var predVal = pred.visit(context);
        return "(" + predVal + ")";
    }).join(" " + odataOpFrom(this) + " ");
    return result;
}, ɵ4 = function (context) {
    var exprVal = this.expr.visit(context);
    if (!this.pred.op) { // added 21-Oct-2016 to fix breeze.js issue #172
        return exprVal + "/" + odataOpFrom(this) + "()";
    }
    var prefix = context.prefix;
    if (prefix) {
        exprVal = prefix + "/" + exprVal;
        prefix = "x" + (parseInt(prefix.substring(1)) + 1);
    }
    else {
        prefix = "x1";
    }
    // need to create a new context because of 'prefix'
    var newContext = breeze.core.extend({}, context);
    newContext.entityType = this.expr.dataType;
    newContext.prefix = prefix;
    var newPredVal = this.pred.visit(newContext);
    return exprVal + "/" + odataOpFrom(this) + "(" + prefix + ": " + newPredVal + ")";
}, ɵ5 = function () {
    if (Array.isArray(this.value)) {
        return this.value.map(function (v) { return this.dataType.fmtOData(v); }, this);
    }
    else {
        return this.dataType.fmtOData(this.value);
    }
}, ɵ6 = function (context) {
    var entityType = context.entityType;
    // '/' is the OData path delimiter
    return entityType ? entityType.clientPropertyPathToServer(this.propertyPath, "/") : this.propertyPath;
}, ɵ7 = function (context) {
    var exprVals = this.exprs.map(function (expr) {
        return expr.visit(context);
    });
    return this.fnName + "(" + exprVals.join(",") + ")";
};
var toODataFragmentVisitor = {
    passthruPredicate: ɵ0,
    unaryPredicate: ɵ1,
    binaryPredicate: ɵ2,
    andOrPredicate: ɵ3,
    anyAllPredicate: ɵ4,
    litExpr: ɵ5,
    propExpr: ɵ6,
    fnExpr: ɵ7
};
var _operatorMap = {
    'contains': 'substringof'
};
function odataOpFrom(node) {
    var op = node.op.key;
    var odataOp = _operatorMap[op];
    return odataOp || op;
}
breeze.config.registerAdapter("uriBuilder", UriBuilderODataAdapter);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,