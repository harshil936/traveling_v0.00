import { core } from './core';
/** @hidden @internal */
export class Param {
    constructor(v, name) {
        /** @hidden @internal */
        this._applyOne = function (instance) {
            if (this.v !== undefined) {
                instance[this.name] = this.v;
            }
            else {
                if (this.defaultValue !== undefined) {
                    instance[this.name] = this.defaultValue;
                }
            }
        };
        this.MESSAGE_PREFIX = "The '%1' parameter ";
        this.v = v;
        this.name = name;
        this._contexts = [null];
    }
    isObject() {
        return this.isTypeOf('object');
    }
    isBoolean() {
        return this.isTypeOf('boolean');
    }
    isString() {
        return this.isTypeOf('string');
    }
    isNumber() {
        return this.isTypeOf('number');
    }
    isFunction() {
        return this.isTypeOf('function');
    }
    isNonEmptyString() {
        return addContext(this, {
            fn: isNonEmptyString,
            msg: "must be a nonEmpty string"
        });
    }
    isTypeOf(typeName) {
        return addContext(this, {
            fn: isTypeOf,
            typeName: typeName,
            msg: "must be a '" + typeName + "'"
        });
    }
    isInstanceOf(type, typeName) {
        typeName = typeName || type.prototype._$typeName;
        return addContext(this, {
            fn: isInstanceOf,
            type: type,
            typeName: typeName,
            msg: "must be an instance of '" + typeName + "'"
        });
    }
    hasProperty(propertyName) {
        return addContext(this, {
            fn: hasProperty,
            propertyName: propertyName,
            msg: "must have a '" + propertyName + "' property"
        });
    }
    isEnumOf(enumType) {
        return addContext(this, {
            fn: isEnumOf,
            enumType: enumType,
            msg: "must be an instance of the '" + (enumType.name || 'unknown') + "' enumeration"
        });
    }
    isRequired(allowNull = false) {
        return addContext(this, {
            fn: isRequired,
            allowNull: allowNull,
            msg: "is required"
        });
    }
    isOptional() {
        let context = {
            fn: isOptional,
            prevContext: null,
            msg: isOptionalMessage
        };
        return addContext(this, context);
    }
    isNonEmptyArray() {
        return this.isArray(true);
    }
    isArray(mustNotBeEmpty) {
        let context = {
            fn: isArray,
            mustNotBeEmpty: mustNotBeEmpty,
            prevContext: null,
            msg: isArrayMessage
        };
        return addContext(this, context);
    }
    or() {
        this._contexts.push(null);
        this._context = null;
        return this;
    }
    check(defaultValue) {
        let ok = exec(this);
        if (ok === undefined)
            return;
        if (!ok) {
            throw new Error(this.getMessage());
        }
        if (this.v !== undefined) {
            return this.v;
        }
        else {
            return defaultValue;
        }
    }
    /** @hidden @internal */
    // called from outside this file.
    _addContext(context) {
        return addContext(this, context);
    }
    getMessage() {
        let that = this;
        let message = this._contexts.map(function (context) {
            return getMessage(context, that.v);
        }).join(", or it ");
        return core.formatString(this.MESSAGE_PREFIX, this.name) + " " + message;
    }
    withDefault(defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }
    whereParam(propName) {
        return this.parent.whereParam(propName);
    }
    applyAll(instance, checkOnly = false) {
        let parentTypeName = instance._$typeName;
        let allowUnknownProperty = (parentTypeName && this.parent.config._$typeName === parentTypeName);
        let clone = core.extend({}, this.parent.config);
        this.parent.params.forEach(function (p) {
            if (!allowUnknownProperty)
                delete clone[p.name];
            try {
                p.check();
            }
            catch (e) {
                throwConfigError(instance, e.message);
            }
            (!checkOnly) && p._applyOne(instance);
        });
        // should be no properties left in the clone
        if (!allowUnknownProperty) {
            for (let key in clone) {
                // allow props with an undefined value
                if (clone[key] !== undefined) {
                    throwConfigError(instance, core.formatString("Unknown property: '%1'.", key));
                }
            }
        }
    }
}
/** @hidden @internal */
export let assertParam = function (v, name) {
    return new Param(v, name);
};
function isTypeOf(context, v) {
    if (v == null)
        return false;
    if (typeof (v) === context.typeName)
        return true;
    return false;
}
function isNonEmptyString(context, v) {
    if (v == null)
        return false;
    return (typeof (v) === 'string') && v.length > 0;
}
function isInstanceOf(context, v) {
    if (v == null || context.type == null)
        return false;
    return (v instanceof context.type);
}
function isEnumOf(context, v) {
    if (v == null || context.enumType == null)
        return false;
    return context.enumType.contains(v);
}
function hasProperty(context, v) {
    if (v == null || context.propertyName == null)
        return false;
    return (v[context.propertyName] !== undefined);
}
function isRequired(context, v) {
    if (context.allowNull) {
        return v !== undefined;
    }
    else {
        return v != null;
    }
}
function isOptional(context, v) {
    if (v == null)
        return true;
    let prevContext = context.prevContext;
    if (prevContext && prevContext.fn) {
        return prevContext.fn(prevContext, v);
    }
    else {
        return true;
    }
}
function isOptionalMessage(context, v) {
    let prevContext = context.prevContext;
    let element = prevContext ? " or it " + getMessage(prevContext, v) : "";
    return "is optional" + element;
}
function isArray(context, v) {
    if (!Array.isArray(v)) {
        return false;
    }
    if (context.mustNotBeEmpty) {
        if (v.length === 0)
            return false;
    }
    // allow standalone is array call.
    let prevContext = context.prevContext;
    if (!prevContext)
        return true;
    let pc = prevContext;
    return v.every(function (v1) {
        return pc.fn && pc.fn(pc, v1);
    });
}
function isArrayMessage(context, v) {
    let arrayDescr = context.mustNotBeEmpty ? "a nonEmpty array" : "an array";
    let prevContext = context.prevContext;
    let element = prevContext ? " where each element " + getMessage(prevContext, v) : "";
    return " must be " + arrayDescr + element;
}
function getMessage(context, v) {
    let msg = context.msg;
    if (typeof (msg) === "function") {
        msg = msg(context, v);
    }
    return msg;
}
function addContext(that, context) {
    if (that._context) {
        let curContext = that._context;
        while (curContext.prevContext != null) {
            curContext = curContext.prevContext;
        }
        if (curContext.prevContext === null) {
            curContext.prevContext = context;
            // just update the prevContext but don't change the curContext.
            return that;
        }
        else if (context.prevContext == null) {
            context.prevContext = that._context;
        }
        else {
            throw new Error("Illegal construction - use 'or' to combine checks");
        }
    }
    return setContext(that, context);
}
function setContext(that, context) {
    that._contexts[that._contexts.length - 1] = context;
    that._context = context;
    return that;
}
function exec(self) {
    // clear off last one if null
    let contexts = self._contexts;
    if (contexts[contexts.length - 1] == null) {
        contexts.pop();
    }
    if (contexts.length === 0) {
        return undefined;
    }
    return contexts.some(function (context) {
        return context.fn ? context.fn(context, self.v) : false;
    });
}
function throwConfigError(instance, message) {
    throw new Error(core.formatString("Error configuring an instance of '%1'. %2", (instance && instance._$typeName) || "object", message));
}
class ConfigParam {
    constructor(config) {
        if (typeof (config) !== "object") {
            throw new Error("Configuration parameter should be an object, instead it is a: " + typeof (config));
        }
        this.config = config;
        this.params = [];
    }
    whereParam(propName) {
        let param = new Param(this.config[propName], propName);
        param.parent = this;
        this.params.push(param);
        return param;
    }
}
/** @hidden @internal */
export let assertConfig = function (config) {
    return new ConfigParam(config);
};
// Param is exposed so that additional 'is' methods can be added to the prototype.
core.Param = Param;
core.assertParam = assertParam;
core.assertConfig = assertConfig;
//# sourceMappingURL=data:application/json;base64,