import { BreezeEnum } from './enum';
/** EntityAction is an 'Enum' containing all of the valid actions that can occur to an 'Entity'.
 
*/
export class EntityAction extends BreezeEnum {
    /** Is this an 'attach' operation? ( Attach, AttachOnQuery or AttachOnImport) */
    isAttach() {
        return !!this._isAttach;
    }
    /** Is this a 'detach' operation? ( Detach, Clear) */
    isDetach() {
        return !!this._isDetach;
    }
    /** Is this a 'modification' operation? ( PropertyChange, MergeOnQuery, MergeOnSave, MergeOnImport, RejectChanges) */
    isModification() {
        return !!this._isModification;
    }
}
/** Entity was attached via an AttachEntity call. */
EntityAction.Attach = new EntityAction({ _isAttach: true });
/**  Entity was attached as a result of a query. */
EntityAction.AttachOnQuery = new EntityAction({ _isAttach: true });
/**  Entity was attached as a result of an import. */
EntityAction.AttachOnImport = new EntityAction({ _isAttach: true });
/** Entity was detached */
EntityAction.Detach = new EntityAction({ _isDetach: true });
/** Properties on the entity were merged as a result of a query. */
EntityAction.MergeOnQuery = new EntityAction({ _isModification: true });
/** Properties on the entity were merged as a result of an import. */
EntityAction.MergeOnImport = new EntityAction({ _isModification: true });
/** Properties on the entity were merged as a result of a save */
EntityAction.MergeOnSave = new EntityAction({ _isModification: true });
/** A property on the entity was changed. */
EntityAction.PropertyChange = new EntityAction({ _isModification: true });
/** The EntityState of the entity was changed. */
EntityAction.EntityStateChange = new EntityAction();
/** AcceptChanges was called on the entity, or its entityState was set to Unmodified. */
EntityAction.AcceptChanges = new EntityAction();
/** RejectChanges was called on the entity. */
EntityAction.RejectChanges = new EntityAction({ _isModification: true });
/** The EntityManager was cleared.  All entities detached. */
EntityAction.Clear = new EntityAction({ _isDetach: true });
EntityAction.prototype._$typeName = "EntityAction";
Error['x'] = EntityAction.resolveSymbols();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JyZWV6ZS1jbGllbnQvIiwic291cmNlcyI6WyJzcmMvZW50aXR5LWFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRW5DOztFQUVFO0FBRUYsTUFBTSxPQUFPLFlBQWEsU0FBUSxVQUFVO0lBdUMxQyxnRkFBZ0Y7SUFDaEYsUUFBUTtRQUNOLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUNELHFEQUFxRDtJQUNyRCxRQUFRO1FBQ04sT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBQ0QscUhBQXFIO0lBQ3JILGNBQWM7UUFDWixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7O0FBaERELG9EQUFvRDtBQUM3QyxtQkFBTSxHQUFHLElBQUksWUFBWSxDQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFDdkQsbURBQW1EO0FBQzVDLDBCQUFhLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztBQUM1RCxxREFBcUQ7QUFDOUMsMkJBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDO0FBRTdELDBCQUEwQjtBQUNuQixtQkFBTSxHQUFHLElBQUksWUFBWSxDQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFdkQsbUVBQW1FO0FBQzVELHlCQUFZLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNsRSxxRUFBcUU7QUFDOUQsMEJBQWEsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ25FLGlFQUFpRTtBQUMxRCx3QkFBVyxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFakUsNENBQTRDO0FBQ3JDLDJCQUFjLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztBQUVuRSxpREFBaUQ7QUFDMUMsOEJBQWlCLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUU5Qyx3RkFBd0Y7QUFDakYsMEJBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0FBQzFDLDhDQUE4QztBQUN2QywwQkFBYSxHQUFHLElBQUksWUFBWSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7QUFFbEUsNkRBQTZEO0FBQ3RELGtCQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztBQXFCdEQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsY0FBYyxDQUFDO0FBQ25ELEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxZQUFZLENBQUMsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcmVlemVFbnVtfSBmcm9tICcuL2VudW0nO1xyXG5cclxuLyoqIEVudGl0eUFjdGlvbiBpcyBhbiAnRW51bScgY29udGFpbmluZyBhbGwgb2YgdGhlIHZhbGlkIGFjdGlvbnMgdGhhdCBjYW4gb2NjdXIgdG8gYW4gJ0VudGl0eScuIFxyXG4gXHJcbiovXHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5QWN0aW9uIGV4dGVuZHMgQnJlZXplRW51bSB7XHJcblxyXG4gIC8qKiBFbnRpdHkgd2FzIGF0dGFjaGVkIHZpYSBhbiBBdHRhY2hFbnRpdHkgY2FsbC4gKi9cclxuICBzdGF0aWMgQXR0YWNoID0gbmV3IEVudGl0eUFjdGlvbiggeyBfaXNBdHRhY2g6IHRydWUgfSk7XHJcbiAgLyoqICBFbnRpdHkgd2FzIGF0dGFjaGVkIGFzIGEgcmVzdWx0IG9mIGEgcXVlcnkuICovXHJcbiAgc3RhdGljIEF0dGFjaE9uUXVlcnkgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzQXR0YWNoOiB0cnVlfSk7XHJcbiAgLyoqICBFbnRpdHkgd2FzIGF0dGFjaGVkIGFzIGEgcmVzdWx0IG9mIGFuIGltcG9ydC4gKi9cclxuICBzdGF0aWMgQXR0YWNoT25JbXBvcnQgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzQXR0YWNoOiB0cnVlfSk7XHJcblxyXG4gIC8qKiBFbnRpdHkgd2FzIGRldGFjaGVkICovXHJcbiAgc3RhdGljIERldGFjaCA9IG5ldyBFbnRpdHlBY3Rpb24oIHsgX2lzRGV0YWNoOiB0cnVlIH0pO1xyXG5cclxuICAvKiogUHJvcGVydGllcyBvbiB0aGUgZW50aXR5IHdlcmUgbWVyZ2VkIGFzIGEgcmVzdWx0IG9mIGEgcXVlcnkuICovXHJcbiAgc3RhdGljIE1lcmdlT25RdWVyeSA9IG5ldyBFbnRpdHlBY3Rpb24oeyBfaXNNb2RpZmljYXRpb246IHRydWUgfSk7XHJcbiAgLyoqIFByb3BlcnRpZXMgb24gdGhlIGVudGl0eSB3ZXJlIG1lcmdlZCBhcyBhIHJlc3VsdCBvZiBhbiBpbXBvcnQuICovXHJcbiAgc3RhdGljIE1lcmdlT25JbXBvcnQgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzTW9kaWZpY2F0aW9uOiB0cnVlIH0pO1xyXG4gIC8qKiBQcm9wZXJ0aWVzIG9uIHRoZSBlbnRpdHkgd2VyZSBtZXJnZWQgYXMgYSByZXN1bHQgb2YgYSBzYXZlICovXHJcbiAgc3RhdGljIE1lcmdlT25TYXZlID0gbmV3IEVudGl0eUFjdGlvbih7IF9pc01vZGlmaWNhdGlvbjogdHJ1ZSB9KTtcclxuXHJcbiAgLyoqIEEgcHJvcGVydHkgb24gdGhlIGVudGl0eSB3YXMgY2hhbmdlZC4gKi9cclxuICBzdGF0aWMgUHJvcGVydHlDaGFuZ2UgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzTW9kaWZpY2F0aW9uOiB0cnVlfSk7XHJcblxyXG4gIC8qKiBUaGUgRW50aXR5U3RhdGUgb2YgdGhlIGVudGl0eSB3YXMgY2hhbmdlZC4gKi9cclxuICBzdGF0aWMgRW50aXR5U3RhdGVDaGFuZ2UgPSBuZXcgRW50aXR5QWN0aW9uKCk7XHJcblxyXG4gIC8qKiBBY2NlcHRDaGFuZ2VzIHdhcyBjYWxsZWQgb24gdGhlIGVudGl0eSwgb3IgaXRzIGVudGl0eVN0YXRlIHdhcyBzZXQgdG8gVW5tb2RpZmllZC4gKi9cclxuICBzdGF0aWMgQWNjZXB0Q2hhbmdlcyA9IG5ldyBFbnRpdHlBY3Rpb24oKTtcclxuICAvKiogUmVqZWN0Q2hhbmdlcyB3YXMgY2FsbGVkIG9uIHRoZSBlbnRpdHkuICovXHJcbiAgc3RhdGljIFJlamVjdENoYW5nZXMgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzTW9kaWZpY2F0aW9uOiB0cnVlfSk7XHJcblxyXG4gIC8qKiBUaGUgRW50aXR5TWFuYWdlciB3YXMgY2xlYXJlZC4gIEFsbCBlbnRpdGllcyBkZXRhY2hlZC4gKi9cclxuICBzdGF0aWMgQ2xlYXIgPSBuZXcgRW50aXR5QWN0aW9uKHsgX2lzRGV0YWNoOiB0cnVlfSk7XHJcblxyXG4gIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xyXG4gIF9pc0F0dGFjaD86IGJvb2xlYW47XHJcbiAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXHJcbiAgX2lzRGV0YWNoPzogYm9vbGVhbjtcclxuICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cclxuICBfaXNNb2RpZmljYXRpb246IGJvb2xlYW47XHJcbiAgLyoqIElzIHRoaXMgYW4gJ2F0dGFjaCcgb3BlcmF0aW9uPyAoIEF0dGFjaCwgQXR0YWNoT25RdWVyeSBvciBBdHRhY2hPbkltcG9ydCkgKi9cclxuICBpc0F0dGFjaCgpIHtcclxuICAgIHJldHVybiAhIXRoaXMuX2lzQXR0YWNoO1xyXG4gIH1cclxuICAvKiogSXMgdGhpcyBhICdkZXRhY2gnIG9wZXJhdGlvbj8gKCBEZXRhY2gsIENsZWFyKSAqL1xyXG4gIGlzRGV0YWNoKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5faXNEZXRhY2g7XHJcbiAgfVxyXG4gIC8qKiBJcyB0aGlzIGEgJ21vZGlmaWNhdGlvbicgb3BlcmF0aW9uPyAoIFByb3BlcnR5Q2hhbmdlLCBNZXJnZU9uUXVlcnksIE1lcmdlT25TYXZlLCBNZXJnZU9uSW1wb3J0LCBSZWplY3RDaGFuZ2VzKSAqL1xyXG4gIGlzTW9kaWZpY2F0aW9uKCkge1xyXG4gICAgcmV0dXJuICEhdGhpcy5faXNNb2RpZmljYXRpb247XHJcbiAgfVxyXG59XHJcbkVudGl0eUFjdGlvbi5wcm90b3R5cGUuXyR0eXBlTmFtZSA9IFwiRW50aXR5QWN0aW9uXCI7XHJcbkVycm9yWyd4J10gPSBFbnRpdHlBY3Rpb24ucmVzb2x2ZVN5bWJvbHMoKTtcclxuXHJcblxyXG5cclxuIl19