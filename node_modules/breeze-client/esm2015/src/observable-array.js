import { core } from './core';
const ɵ0 = function (...args) {
    if (this._inProgress) {
        return -1;
    }
    let goodAdds = this._getGoodAdds(args);
    if (!goodAdds.length) {
        return this.length;
    }
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.push) {
        result = objPrototype.push.apply(this, goodAdds);
    }
    else {
        result = Array.prototype.push.apply(this, goodAdds);
    }
    processAdds(this, goodAdds);
    return result;
}, ɵ1 = function (...args) {
    if (this._inProgress) {
        return -1;
    }
    let goodAdds = args;
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.push) {
        result = objPrototype.push.apply(this, goodAdds);
    }
    else {
        result = Array.prototype.push.apply(this, goodAdds);
    }
    processAdds(this, goodAdds);
    return result;
}, ɵ2 = function (...args) {
    let goodAdds = this._getGoodAdds(args);
    if (!goodAdds.length) {
        return this.length;
    }
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.unshift) {
        result = objPrototype.unshift.apply(this, goodAdds);
    }
    else {
        result = Array.prototype.unshift.apply(this, goodAdds);
    }
    processAdds(this, goodAdds);
    return result;
}, ɵ3 = function () {
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.pop) {
        result = objPrototype.pop.apply(this);
    }
    else {
        result = Array.prototype.pop.apply(this);
    }
    processRemoves(this, [result]);
    return result;
}, ɵ4 = function () {
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.shift) {
        result = objPrototype.shift.apply(this);
    }
    else {
        result = Array.prototype.shift.apply(this);
    }
    processRemoves(this, [result]);
    return result;
}, ɵ5 = function (...args) {
    let goodAdds = this._getGoodAdds(core.arraySlice(args, 2));
    let newArgs = core.arraySlice(args, 0, 2).concat(goodAdds);
    this._beforeChange();
    let result;
    let objPrototype = Object.getPrototypeOf(this);
    if (objPrototype.splice) {
        result = objPrototype.splice.apply(this, newArgs);
    }
    else {
        result = Array.prototype.splice.apply(this, newArgs);
    }
    processRemoves(this, result);
    if (goodAdds.length) {
        processAdds(this, goodAdds);
    }
    return result;
}, ɵ6 = function () {
    return this.parent.entityAspect || this.parent.complexAspect.getEntityAspect();
}, ɵ7 = function () {
    return this.getEntityAspect();
}, ɵ8 = function () {
    let em = this.getEntityAspect().entityManager;
    return em && em._pendingPubs;
}, ɵ9 = function () {
    // default is to do nothing
};
let mixin = {
    push: ɵ0,
    _push: ɵ1,
    unshift: ɵ2,
    pop: ɵ3,
    shift: ɵ4,
    splice: ɵ5,
    getEntityAspect: ɵ6,
    _getEventParent: ɵ7,
    _getPendingPubs: ɵ8,
    _beforeChange: ɵ9
};
function updateEntityState(obsArray) {
    let entityAspect = obsArray.getEntityAspect();
    if (entityAspect.entityState.isUnchanged()) {
        entityAspect.setModified();
    }
    if (entityAspect.entityState.isModified() && !obsArray._origValues) {
        obsArray._origValues = obsArray.slice(0);
    }
}
function publish(publisher, eventName, eventArgs) {
    let pendingPubs = publisher._getPendingPubs();
    if (pendingPubs) {
        if (!publisher._pendingArgs) {
            publisher._pendingArgs = eventArgs;
            pendingPubs.push(function () {
                publisher[eventName].publish(publisher._pendingArgs);
                publisher._pendingArgs = null;
            });
        }
        else {
            combineArgs(publisher._pendingArgs, eventArgs);
        }
    }
    else {
        publisher[eventName].publish(eventArgs);
    }
}
function initializeParent(obsArray, parent, parentProperty) {
    obsArray.parent = parent;
    obsArray.parentProperty = parentProperty;
}
function processAdds(obsArray, adds) {
    obsArray._processAdds(adds);
    // this is referencing the name of the method on the complexArray not the name of the event
    //var args = { added: adds };
    //args[obsArray._typeName] = obsArray;
    publish(obsArray, "arrayChanged", { array: obsArray, added: adds });
}
function processRemoves(obsArray, removes) {
    obsArray._processRemoves(removes);
    // this is referencing the name of the method on the array not the name of the event
    publish(obsArray, "arrayChanged", { array: obsArray, removed: removes });
}
// TODO: see if this function already exists in core and can be imported.
function combineArgs(target, source) {
    for (let key in source) {
        if (key !== "array" && target.hasOwnProperty(key)) {
            let sourceValue = source[key];
            let targetValue = target[key];
            if (targetValue) {
                if (!Array.isArray(targetValue)) {
                    throw new Error("Cannot combine non array args");
                }
                Array.prototype.push.apply(targetValue, sourceValue);
            }
            else {
                target[key] = sourceValue;
            }
        }
    }
}
/** @hidden @internal */
export const observableArray = {
    mixin: mixin,
    updateEntityState: updateEntityState,
    publish: publish,
    initializeParent: initializeParent
};
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7, ɵ8, ɵ9 };
//# sourceMappingURL=data:application/json;base64,