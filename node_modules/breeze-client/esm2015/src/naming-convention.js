import { assertConfig } from './assert-param';
import { core } from './core';
import { config } from './config';
/**
A NamingConvention instance is used to specify the naming conventions under which a MetadataStore
will translate property names between the server and the javascript client.

The default NamingConvention does not perform any translation, it simply passes property names thru unchanged.
@dynamic
**/
export class NamingConvention {
    /**
    NamingConvention constructor
    >      // A naming convention that converts the first character of every property name to uppercase on the server
    >      // and lowercase on the client.
    >      var namingConv = new NamingConvention({
    >          serverPropertyNameToClient: function(serverPropertyName) {
    >              return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);
    >          },
    >          clientPropertyNameToServer: function(clientPropertyName) {
    >              return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);
    >          }
    >      });
    >      var ms = new MetadataStore({ namingConvention: namingConv });
    >      var em = new EntityManager( { metadataStore: ms });
    **/
    constructor(ncConfig) {
        assertConfig(ncConfig || {})
            .whereParam("name").isOptional().isString()
            .whereParam("serverPropertyNameToClient").isFunction()
            .whereParam("clientPropertyNameToServer").isFunction()
            .applyAll(this);
        if (!this.name) {
            this.name = core.getUuid();
        }
        config._storeObject(this, "NamingConvention", this.name);
    }
    /**
    Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.
    The current instance is returned unchanged.
    >      var namingConv = new NamingConvention({
    >          serverPropertyNameToClient: function(serverPropertyName) {
    >              return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);
    >          },
    >          clientPropertyNameToServer: function(clientPropertyName) {
    >              return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);
    >          }
    >      });
    >      namingConv.setAsDefault();
    **/
    setAsDefault() {
        return core.setAsDefault(this, NamingConvention);
    }
}
/**


/**
A noop naming convention - This is the default unless another is specified.
**/
NamingConvention.none = new NamingConvention({
    name: "noChange",
    serverPropertyNameToClient: (serverPropertyName) => {
        return serverPropertyName;
    },
    clientPropertyNameToServer: (clientPropertyName) => {
        return clientPropertyName;
    }
});
/**
The "camelCase" naming convention - This implementation only lowercases the first character of the server property name
but leaves the rest of the property name intact.  If a more complicated version is needed then one should be created via the ctor.
**/
NamingConvention.camelCase = new NamingConvention({
    name: "camelCase",
    serverPropertyNameToClient: (serverPropertyName) => {
        return serverPropertyName.substr(0, 1).toLowerCase() + serverPropertyName.substr(1);
    },
    clientPropertyNameToServer: (clientPropertyName) => {
        return clientPropertyName.substr(0, 1).toUpperCase() + clientPropertyName.substr(1);
    }
});
/**
The default value whenever NamingConventions are not specified.
**/
NamingConvention.defaultInstance = new NamingConvention(NamingConvention.none);
NamingConvention.prototype._$typeName = "NamingConvention";
//# sourceMappingURL=data:application/json;base64,