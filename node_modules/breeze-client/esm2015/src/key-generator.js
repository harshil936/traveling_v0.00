import { EntityKey } from './entity-key';
import { config } from './config';
/*
  @class KeyGenerator
  */
export class KeyGenerator {
    constructor() {
        // key is dataProperty.name + || + entityType.name, value is propEntry
        // propEntry = { entityType, propertyName, keyMap }
        // keyMap has key of the actual value ( as a string) and a value of null or the real id.
        this._tempIdMap = {};
    }
    /*
    Returns a unique 'temporary' id for the specified [[EntityType]].
    Uniqueness is defined for this purpose as being unique within each instance of a KeyGenerator. This is sufficient
    because each EntityManager will have its own instance of a KeyGenerator and any entities imported into
    the EntityManager with temporary keys will have them regenerated and remapped on import.
  
    The return value of this method must be of the correct type as determined by the keyProperties of the
    specified EntityType
    @example
        // Assume em1 is a preexisting EntityManager
        let custType = em1.metadataStore.getEntityType("Customer");
        let cust1 = custType.createEntity();
        // next line both sets cust1's 'CustomerId' property but also returns the value
        let cid1 = em1.generateTempKeyValue(cust1);
        em1.saveChanges().then( function( data) {
          let sameCust1 = data.results[0];
          // cust1 === sameCust1;
          // but cust1.getProperty("CustomerId") != cid1
          // because the server will have generated a new id
          // and the client will have been updated with this
          // new id.
        });
    @method generateTempKeyValue
    @param entityType {EntityType}
    */
    generateTempKeyValue(entityType, valueIfAvail) {
        let keyProps = entityType.keyProperties;
        if (keyProps.length > 1) {
            throw new Error("Ids can not be autogenerated for entities with multipart keys");
        }
        let keyProp = keyProps[0];
        let propEntry = this._getPropEntry(keyProp, true);
        let nextId;
        if (valueIfAvail != null) {
            if (!propEntry.keyMap[valueIfAvail.toString()]) {
                nextId = valueIfAvail;
            }
        }
        if (nextId === undefined) {
            let dataType = keyProp.dataType;
            let getNextFn = dataType.getNext;
            if (getNextFn) {
                nextId = getNextFn(this);
                // need to watch out for collision with previously imported ids that might also get generated.
                while (propEntry.keyMap[nextId.toString()] != null) {
                    nextId = getNextFn(this);
                }
            }
            else {
                throw new Error("Cannot use a property with a dataType of: " + dataType.toString() + " for id generation");
            }
        }
        propEntry.keyMap[nextId.toString()] = true;
        return nextId;
    }
    getTempKeys() {
        let results = [];
        //noinspection JSHint
        for (let key in this._tempIdMap) {
            let propEntry = this._tempIdMap[key];
            let entityType = propEntry.entityType;
            // let propName = propEntry.propertyName;
            //noinspection JSHint
            for (let keyValue in propEntry.keyMap) {
                results.push(new EntityKey(entityType, [keyValue]));
            }
        }
        return results;
    }
    // proto methods below are not part of the KeyGenerator interface.
    isTempKey(entityKey) {
        let keyProps = entityKey.entityType.keyProperties;
        if (keyProps.length > 1)
            return false;
        let keyProp = keyProps[0];
        let propEntry = this._getPropEntry(keyProp);
        if (!propEntry) {
            return false;
        }
        return (propEntry.keyMap[entityKey.values[0].toString()] !== undefined);
    }
    /** @hidden @internal */
    _getPropEntry(keyProp, createIfMissing = false) {
        let key = keyProp.name + ".." + keyProp.parentType.name;
        let propEntry = this._tempIdMap[key];
        if (!propEntry) {
            if (createIfMissing) {
                propEntry = { entityType: keyProp.parentType, propertyName: keyProp.name, keyMap: {} };
                this._tempIdMap[key] = propEntry;
            }
        }
        return propEntry;
    }
}
config.registerType(KeyGenerator, "KeyGenerator");
//# sourceMappingURL=data:application/json;base64,