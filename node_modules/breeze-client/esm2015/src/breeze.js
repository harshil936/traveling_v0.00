import { AbstractDataServiceAdapter } from './abstract-data-service-adapter';
import { assertParam, assertConfig } from './assert-param';
import { BreezeConfig } from './config';
import { BreezeEnum } from './enum';
import { BreezeEvent } from './event';
import { DataService, JsonResultsAdapter } from './data-service';
import { DataType } from './data-type';
import { EntityAction } from './entity-action';
import { EntityAspect, ComplexAspect } from './entity-aspect';
import { EntityKey } from './entity-key';
import { EntityManager } from './entity-manager';
import { EntityQuery, FilterQueryOp, BooleanQueryOp, OrderByClause, ExpandClause, SelectClause } from './entity-query';
import { EntityState } from './entity-state';
import { InterfaceRegistry } from './interface-registry';
import { KeyGenerator } from './key-generator';
import { LocalQueryComparisonOptions } from './local-query-comparison-options';
import { MappingContext } from './mapping-context';
import { MetadataStore, EntityType, ComplexType, DataProperty, NavigationProperty, AutoGeneratedKeyType } from './entity-metadata';
import { NamingConvention } from './naming-convention';
import { Predicate, UnaryPredicate, BinaryPredicate, AnyAllPredicate, AndOrPredicate, LitExpr, FnExpr, PropExpr } from './predicate';
import { QueryOptions, FetchStrategy, MergeStrategy } from './query-options';
import { SaveOptions } from './save-options';
import { ValidationError, Validator } from './validate';
import { ValidationOptions } from './validation-options';
import { config } from './config';
import { core } from './core';
import { makeRelationArray, makePrimitiveArray, makeComplexArray } from './array';
export { BreezeConfig };
export { 
// Param,
AbstractDataServiceAdapter, AndOrPredicate, AnyAllPredicate, assertConfig, assertParam, AutoGeneratedKeyType, BinaryPredicate, BreezeEnum, BreezeEvent, ComplexAspect, ComplexType, config, core, DataProperty, DataService, DataType, EntityAction, EntityAspect, EntityKey, EntityManager, EntityQuery, EntityState, EntityType, ExpandClause, FetchStrategy, FilterQueryOp, FnExpr, InterfaceRegistry, JsonResultsAdapter, KeyGenerator, LitExpr, LocalQueryComparisonOptions, makeComplexArray, makePrimitiveArray, makeRelationArray, MappingContext, MergeStrategy, MetadataStore, NamingConvention, NavigationProperty, OrderByClause, Predicate, PropExpr, QueryOptions, SaveOptions, SelectClause, UnaryPredicate, ValidationError, ValidationOptions, Validator, };
// create a breeze variable here
export const breeze = {
    AbstractDataServiceAdapter: AbstractDataServiceAdapter,
    assertConfig: null,
    assertParam: null,
    AutoGeneratedKeyType: AutoGeneratedKeyType,
    BooleanQueryOp: BooleanQueryOp,
    ComplexAspect: ComplexAspect,
    ComplexType: ComplexType,
    config: config,
    core: core,
    DataProperty: DataProperty,
    DataService: DataService,
    DataType: DataType,
    EntityAction: EntityAction,
    EntityAspect: EntityAspect,
    EntityKey: EntityKey,
    EntityManager: EntityManager,
    EntityQuery: EntityQuery,
    EntityState: EntityState,
    EntityType: EntityType,
    Event: BreezeEvent,
    FetchStrategy: FetchStrategy,
    FilterQueryOp: FilterQueryOp,
    InterfaceRegistry: InterfaceRegistry,
    JsonResultsAdapter: JsonResultsAdapter,
    KeyGenerator: KeyGenerator,
    LocalQueryComparisonOptions: LocalQueryComparisonOptions,
    makeComplexArray: makeComplexArray,
    makePrimitiveArray: makePrimitiveArray,
    makeRelationArray: makeRelationArray,
    MergeStrategy: MergeStrategy,
    MetadataStore: MetadataStore,
    NamingConvention: NamingConvention,
    NavigationProperty: NavigationProperty,
    OrderByClause: OrderByClause,
    Predicate: Predicate,
    QueryOptions: QueryOptions,
    SaveOptions: SaveOptions,
    ValidationError: ValidationError,
    ValidationOptions: ValidationOptions,
    Validator,
    version: "2.0.3"
};
/** @hidden @internal */
let win;
try {
    win = window ? window : (global ? global.window : undefined);
}
catch (e) {
}
if (win) {
    win.breeze = breeze;
}
//# sourceMappingURL=data:application/json;base64,