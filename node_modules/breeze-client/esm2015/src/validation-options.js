import { core } from './core';
import { assertConfig } from './assert-param';
/**
A ValidationOptions instance is used to specify the conditions under which validation will be executed.

*/
export class ValidationOptions {
    /**
    ValidationOptions constructor
    >     var newVo = new ValidationOptions( { validateOnSave: false, validateOnAttach: false });
    >     // assume em1 is a preexisting EntityManager
    >     em1.setProperties( { validationOptions: newVo });
    @param config - A configuration object.
    **/
    constructor(config) {
        updateWithConfig(this, config);
    }
    /**
    Returns a copy of this ValidationOptions with changes to the specified config properties.
    >     var validationOptions = new ValidationOptions();
    >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );
    @param config - A configuration object
    @return A new ValidationOptions instance.
    **/
    using(config) {
        if (!config)
            return this;
        let result = new ValidationOptions(this);
        updateWithConfig(result, config);
        return result;
    }
    /**
    Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.
    The current instance is returned unchanged.
    >     var validationOptions = new ValidationOptions()
    >     var newOptions = validationOptions.using( { validateOnQuery: true, validateOnSave: false} );
    >     var newOptions.setAsDefault();
    **/
    setAsDefault() {
        return core.setAsDefault(this, ValidationOptions);
    }
}
/**
The default instance for use whenever ValidationOptions are not specified.
**/
ValidationOptions.defaultInstance = new ValidationOptions({
    validateOnAttach: true,
    validateOnSave: true,
    validateOnQuery: false,
    validateOnPropertyChange: true
});
ValidationOptions.prototype._$typeName = "ValidationOptions";
function updateWithConfig(options, config) {
    if (config) {
        assertConfig(config)
            .whereParam("validateOnAttach").isBoolean().isOptional()
            .whereParam("validateOnSave").isBoolean().isOptional()
            .whereParam("validateOnQuery").isBoolean().isOptional()
            .whereParam("validateOnPropertyChange").isBoolean().isOptional()
            .applyAll(options);
    }
    return options;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC8iLCJzb3VyY2VzIjpbInNyYy92YWxpZGF0aW9uLW9wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRyxNQUFNLFFBQVEsQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFrQjlDOzs7RUFHRTtBQUNGLE1BQU0sT0FBTyxpQkFBaUI7SUFrQjVCOzs7Ozs7T0FNRztJQUNILFlBQVksTUFBZ0M7UUFDMUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFHRDs7Ozs7O09BTUc7SUFDSCxLQUFLLENBQUMsTUFBK0I7UUFDbkMsSUFBSSxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6QixJQUFJLE1BQU0sR0FBRyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUNwRCxDQUFDOztBQUVEOztHQUVHO0FBQ0ksaUNBQWUsR0FBRyxJQUFJLGlCQUFpQixDQUFDO0lBQzdDLGdCQUFnQixFQUFFLElBQUk7SUFDdEIsY0FBYyxFQUFFLElBQUk7SUFDcEIsZUFBZSxFQUFFLEtBQUs7SUFDdEIsd0JBQXdCLEVBQUUsSUFBSTtDQUMvQixDQUFDLENBQUM7QUFFTCxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDO0FBRTdELFNBQVMsZ0JBQWdCLENBQUMsT0FBMEIsRUFBRSxNQUErQjtJQUNuRixJQUFJLE1BQU0sRUFBRTtRQUNWLFlBQVksQ0FBQyxNQUFNLENBQUM7YUFDZixVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUU7YUFDdkQsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFO2FBQ3JELFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLFVBQVUsRUFBRTthQUN0RCxVQUFVLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLEVBQUU7YUFDL0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3hCO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvcmUgIH0gZnJvbSAnLi9jb3JlJztcclxuaW1wb3J0IHsgYXNzZXJ0Q29uZmlnIH0gZnJvbSAnLi9hc3NlcnQtcGFyYW0nO1xyXG5cclxuLyoqIENvbmZpZ3VyYXRpb24gaW5mbyB0byBiZSBwYXNzZWQgdG8gdGhlIFtbVmFsaWRhdGlvbk9wdGlvbnNdXSBjb25zdHJ1Y3RvciAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFZhbGlkYXRpb25PcHRpb25zQ29uZmlnIHtcclxuICAvKiogV2hldGhlciBlbnRpdHkgYW5kIHByb3BlcnR5IGxldmVsIHZhbGlkYXRpb24gc2hvdWxkIG9jY3VyIHdoZW4gZW50aXRpZXMgYXJlIGF0dGFjaGVkIHRvIHRoZSBFbnRpdHlNYW5hZ2VyIFxyXG4gIG90aGVyIHRoYW4gdmlhIGEgcXVlcnkuIChkZWZhdWx0ID0gdHJ1ZSkgKi9cclxuICB2YWxpZGF0ZU9uQXR0YWNoPzogYm9vbGVhbjtcclxuICAvKiogIFdoZXRoZXIgZW50aXR5IGFuZCBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciBiZWZvcmUgZW50aXRpZXMgYXJlIHNhdmVkLiBcclxuICBBIGZhaWxlZCB2YWxpZGF0aW9uIHdpbGwgZm9yY2UgdGhlIHNhdmUgdG8gZmFpbCBlYXJseS4gKGRlZmF1bHQgPSB0cnVlKSAgKi9cclxuICB2YWxpZGF0ZU9uU2F2ZT86IGJvb2xlYW47XHJcbiAgLyoqIFdoZXRoZXIgZW50aXR5IGFuZCBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciBhZnRlciBlbnRpdGllcyBhcmUgcXVlcmllZCBmcm9tIGEgcmVtb3RlIHNlcnZlci5cclxuICAoZGVmYXVsdCA9IGZhbHNlKSAgKiovXHJcbiAgdmFsaWRhdGVPblF1ZXJ5PzogYm9vbGVhbjtcclxuICAvKiogV2hldGhlciBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciBhZnRlciBlbnRpdGllcyBhcmUgbW9kaWZpZWQuXHJcbiAgKGRlZmF1bHQgPSB0cnVlKSAgKiovXHJcbiAgdmFsaWRhdGVPblByb3BlcnR5Q2hhbmdlPzogYm9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbkEgVmFsaWRhdGlvbk9wdGlvbnMgaW5zdGFuY2UgaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBjb25kaXRpb25zIHVuZGVyIHdoaWNoIHZhbGlkYXRpb24gd2lsbCBiZSBleGVjdXRlZC5cclxuXHJcbiovXHJcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uT3B0aW9ucyBpbXBsZW1lbnRzIFZhbGlkYXRpb25PcHRpb25zQ29uZmlnIHtcclxuICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cclxuICBfJHR5cGVOYW1lOiBzdHJpbmc7IC8vIG9uIHByb3RvXHJcbiAgLyoqIFdoZXRoZXIgZW50aXR5IGFuZCBwcm9wZXJ0eSBsZXZlbCB2YWxpZGF0aW9uIHNob3VsZCBvY2N1ciB3aGVuIGVudGl0aWVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRW50aXR5TWFuYWdlciBcclxuICBvdGhlciB0aGFuIHZpYSBhIHF1ZXJ5LiAoZGVmYXVsdCA9IHRydWUpIF9fUmVhZCBPbmx5X18gKi9cclxuICB2YWxpZGF0ZU9uQXR0YWNoOiBib29sZWFuO1xyXG4gIC8qKiBXaGV0aGVyIGVudGl0eSBhbmQgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgYmVmb3JlIGVudGl0aWVzIGFyZSBzYXZlZC4gXHJcbiAgQSBmYWlsZWQgdmFsaWRhdGlvbiB3aWxsIGZvcmNlIHRoZSBzYXZlIHRvIGZhaWwgZWFybHkuIChkZWZhdWx0ID0gdHJ1ZSkgX19SZWFkIE9ubHlfXyAqL1xyXG4gIHZhbGlkYXRlT25TYXZlOiBib29sZWFuO1xyXG4gIC8qKiBXaGV0aGVyIGVudGl0eSBhbmQgcHJvcGVydHkgbGV2ZWwgdmFsaWRhdGlvbiBzaG91bGQgb2NjdXIgYWZ0ZXIgZW50aXRpZXMgYXJlIHF1ZXJpZWQgZnJvbSBhIHJlbW90ZSBzZXJ2ZXIuXHJcbiAgKGRlZmF1bHQgPSBmYWxzZSkgX19SZWFkIE9ubHlfXyAgKiovXHJcbiAgdmFsaWRhdGVPblF1ZXJ5OiBib29sZWFuO1xyXG4gIC8qKiBXaGV0aGVyIHByb3BlcnR5IGxldmVsIHZhbGlkYXRpb24gc2hvdWxkIG9jY3VyIGFmdGVyIGVudGl0aWVzIGFyZSBtb2RpZmllZC5cclxuICAoZGVmYXVsdCA9IHRydWUpIF9fUmVhZCBPbmx5X18gKiovXHJcbiAgdmFsaWRhdGVPblByb3BlcnR5Q2hhbmdlOiBib29sZWFuO1xyXG5cclxuXHJcblxyXG4gIC8qKiBcclxuICBWYWxpZGF0aW9uT3B0aW9ucyBjb25zdHJ1Y3RvclxyXG4gID4gICAgIHZhciBuZXdWbyA9IG5ldyBWYWxpZGF0aW9uT3B0aW9ucyggeyB2YWxpZGF0ZU9uU2F2ZTogZmFsc2UsIHZhbGlkYXRlT25BdHRhY2g6IGZhbHNlIH0pO1xyXG4gID4gICAgIC8vIGFzc3VtZSBlbTEgaXMgYSBwcmVleGlzdGluZyBFbnRpdHlNYW5hZ2VyXHJcbiAgPiAgICAgZW0xLnNldFByb3BlcnRpZXMoIHsgdmFsaWRhdGlvbk9wdGlvbnM6IG5ld1ZvIH0pO1xyXG4gIEBwYXJhbSBjb25maWcgLSBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxyXG4gICoqL1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZz86IFZhbGlkYXRpb25PcHRpb25zQ29uZmlnKSB7XHJcbiAgICB1cGRhdGVXaXRoQ29uZmlnKHRoaXMsIGNvbmZpZyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgUmV0dXJucyBhIGNvcHkgb2YgdGhpcyBWYWxpZGF0aW9uT3B0aW9ucyB3aXRoIGNoYW5nZXMgdG8gdGhlIHNwZWNpZmllZCBjb25maWcgcHJvcGVydGllcy5cclxuICA+ICAgICB2YXIgdmFsaWRhdGlvbk9wdGlvbnMgPSBuZXcgVmFsaWRhdGlvbk9wdGlvbnMoKTtcclxuICA+ICAgICB2YXIgbmV3T3B0aW9ucyA9IHZhbGlkYXRpb25PcHRpb25zLnVzaW5nKCB7IHZhbGlkYXRlT25RdWVyeTogdHJ1ZSwgdmFsaWRhdGVPblNhdmU6IGZhbHNlfSApO1xyXG4gIEBwYXJhbSBjb25maWcgLSBBIGNvbmZpZ3VyYXRpb24gb2JqZWN0XHJcbiAgQHJldHVybiBBIG5ldyBWYWxpZGF0aW9uT3B0aW9ucyBpbnN0YW5jZS5cclxuICAqKi9cclxuICB1c2luZyhjb25maWc6IFZhbGlkYXRpb25PcHRpb25zQ29uZmlnKSB7XHJcbiAgICBpZiAoIWNvbmZpZykgcmV0dXJuIHRoaXM7XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IFZhbGlkYXRpb25PcHRpb25zKHRoaXMpO1xyXG4gICAgdXBkYXRlV2l0aENvbmZpZyhyZXN1bHQsIGNvbmZpZyk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgU2V0cyB0aGUgJ2RlZmF1bHRJbnN0YW5jZScgYnkgY3JlYXRpbmcgYSBjb3B5IG9mIHRoZSBjdXJyZW50ICdkZWZhdWx0SW5zdGFuY2UnIGFuZCB0aGVuIGFwcGx5aW5nIGFsbCBvZiB0aGUgcHJvcGVydGllcyBvZiB0aGUgY3VycmVudCBpbnN0YW5jZS5cclxuICBUaGUgY3VycmVudCBpbnN0YW5jZSBpcyByZXR1cm5lZCB1bmNoYW5nZWQuXHJcbiAgPiAgICAgdmFyIHZhbGlkYXRpb25PcHRpb25zID0gbmV3IFZhbGlkYXRpb25PcHRpb25zKClcclxuICA+ICAgICB2YXIgbmV3T3B0aW9ucyA9IHZhbGlkYXRpb25PcHRpb25zLnVzaW5nKCB7IHZhbGlkYXRlT25RdWVyeTogdHJ1ZSwgdmFsaWRhdGVPblNhdmU6IGZhbHNlfSApO1xyXG4gID4gICAgIHZhciBuZXdPcHRpb25zLnNldEFzRGVmYXVsdCgpO1xyXG4gICoqL1xyXG4gIHNldEFzRGVmYXVsdCgpIHtcclxuICAgIHJldHVybiBjb3JlLnNldEFzRGVmYXVsdCh0aGlzLCBWYWxpZGF0aW9uT3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICBUaGUgZGVmYXVsdCBpbnN0YW5jZSBmb3IgdXNlIHdoZW5ldmVyIFZhbGlkYXRpb25PcHRpb25zIGFyZSBub3Qgc3BlY2lmaWVkLlxyXG4gICoqL1xyXG4gIHN0YXRpYyBkZWZhdWx0SW5zdGFuY2UgPSBuZXcgVmFsaWRhdGlvbk9wdGlvbnMoe1xyXG4gICAgdmFsaWRhdGVPbkF0dGFjaDogdHJ1ZSxcclxuICAgIHZhbGlkYXRlT25TYXZlOiB0cnVlLFxyXG4gICAgdmFsaWRhdGVPblF1ZXJ5OiBmYWxzZSxcclxuICAgIHZhbGlkYXRlT25Qcm9wZXJ0eUNoYW5nZTogdHJ1ZVxyXG4gIH0pO1xyXG59XHJcblZhbGlkYXRpb25PcHRpb25zLnByb3RvdHlwZS5fJHR5cGVOYW1lID0gXCJWYWxpZGF0aW9uT3B0aW9uc1wiO1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlV2l0aENvbmZpZyhvcHRpb25zOiBWYWxpZGF0aW9uT3B0aW9ucywgY29uZmlnOiBWYWxpZGF0aW9uT3B0aW9uc0NvbmZpZykge1xyXG4gIGlmIChjb25maWcpIHtcclxuICAgIGFzc2VydENvbmZpZyhjb25maWcpXHJcbiAgICAgICAgLndoZXJlUGFyYW0oXCJ2YWxpZGF0ZU9uQXR0YWNoXCIpLmlzQm9vbGVhbigpLmlzT3B0aW9uYWwoKVxyXG4gICAgICAgIC53aGVyZVBhcmFtKFwidmFsaWRhdGVPblNhdmVcIikuaXNCb29sZWFuKCkuaXNPcHRpb25hbCgpXHJcbiAgICAgICAgLndoZXJlUGFyYW0oXCJ2YWxpZGF0ZU9uUXVlcnlcIikuaXNCb29sZWFuKCkuaXNPcHRpb25hbCgpXHJcbiAgICAgICAgLndoZXJlUGFyYW0oXCJ2YWxpZGF0ZU9uUHJvcGVydHlDaGFuZ2VcIikuaXNCb29sZWFuKCkuaXNPcHRpb25hbCgpXHJcbiAgICAgICAgLmFwcGx5QWxsKG9wdGlvbnMpO1xyXG4gIH1cclxuICByZXR1cm4gb3B0aW9ucztcclxufVxyXG4iXX0=