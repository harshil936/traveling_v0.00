import * as breeze from 'breeze-client';
export class UriBuilderJsonAdapter {
    constructor() {
        this.name = "json";
    }
    static register(config) {
        config = config || breeze.config;
        config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
        return config.initializeAdapterInstance("uriBuilder", "json", true);
    }
    initialize() { }
    buildUri(entityQuery, metadataStore) {
        // force entityType validation;
        let entityType = entityQuery._getFromEntityType(metadataStore, false);
        if (!entityType)
            entityType = new breeze.EntityType(metadataStore);
        let json = entityQuery.toJSONExt({ entityType: entityType, toNameOnServer: true });
        json.from = undefined;
        json.queryOptions = undefined;
        if (json.parameters && json.parameters.$data) {
            // remove parameters if doing ajax post
            json.parameters = undefined;
        }
        let jsonString = JSON.stringify(json);
        if (jsonString.length > 2) {
            let urlBody = encodeURIComponent(jsonString);
            let sep = entityQuery.resourceName.includes("?") ? "&" : "?";
            return entityQuery.resourceName + sep + urlBody;
        }
        else {
            return entityQuery.resourceName;
        }
    }
}
breeze.config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci11cmktYnVpbGRlci1qc29uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYnJlZXplLWNsaWVudC9hZGFwdGVyLXVyaS1idWlsZGVyLWpzb24vIiwic291cmNlcyI6WyJhZGFwdGVyLXVyaS1idWlsZGVyLWpzb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFFeEMsTUFBTSxPQUFPLHFCQUFxQjtJQUdoQztRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQTRCO1FBQzFDLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVELE9BQU8sTUFBTSxDQUFDLHlCQUF5QixDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUEwQixDQUFDO0lBQy9GLENBQUM7SUFFRCxVQUFVLEtBQUksQ0FBQztJQUVmLFFBQVEsQ0FBQyxXQUErQixFQUFFLGFBQW1DO1FBQzNFLCtCQUErQjtRQUMvQixJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxVQUFVO1lBQUUsVUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFFLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFDLENBQVEsQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUU7WUFDNUMsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzdDLElBQUksR0FBRyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUM3RCxPQUFPLFdBQVcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNqRDthQUFNO1lBQ0wsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDO1NBQ2pDO0lBRUgsQ0FBQztDQUVGO0FBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLHFCQUFxQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBicmVlemUgZnJvbSAnYnJlZXplLWNsaWVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgVXJpQnVpbGRlckpzb25BZGFwdGVyIGltcGxlbWVudHMgYnJlZXplLlVyaUJ1aWxkZXJBZGFwdGVyIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5uYW1lID0gXCJqc29uXCI7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVnaXN0ZXIoY29uZmlnPzogYnJlZXplLkJyZWV6ZUNvbmZpZykge1xyXG4gICAgY29uZmlnID0gY29uZmlnIHx8IGJyZWV6ZS5jb25maWc7XHJcbiAgICBjb25maWcucmVnaXN0ZXJBZGFwdGVyKFwidXJpQnVpbGRlclwiLCBVcmlCdWlsZGVySnNvbkFkYXB0ZXIpO1xyXG4gICAgcmV0dXJuIGNvbmZpZy5pbml0aWFsaXplQWRhcHRlckluc3RhbmNlKFwidXJpQnVpbGRlclwiLCBcImpzb25cIiwgdHJ1ZSkgYXMgVXJpQnVpbGRlckpzb25BZGFwdGVyO1xyXG4gIH1cclxuXHJcbiAgaW5pdGlhbGl6ZSgpIHt9XHJcblxyXG4gIGJ1aWxkVXJpKGVudGl0eVF1ZXJ5OiBicmVlemUuRW50aXR5UXVlcnksIG1ldGFkYXRhU3RvcmU6IGJyZWV6ZS5NZXRhZGF0YVN0b3JlKSB7XHJcbiAgICAvLyBmb3JjZSBlbnRpdHlUeXBlIHZhbGlkYXRpb247XHJcbiAgICBsZXQgZW50aXR5VHlwZSA9IGVudGl0eVF1ZXJ5Ll9nZXRGcm9tRW50aXR5VHlwZShtZXRhZGF0YVN0b3JlLCBmYWxzZSk7XHJcbiAgICBpZiAoIWVudGl0eVR5cGUpIGVudGl0eVR5cGUgPSBuZXcgYnJlZXplLkVudGl0eVR5cGUobWV0YWRhdGFTdG9yZSk7XHJcbiAgICBsZXQganNvbiA9IGVudGl0eVF1ZXJ5LnRvSlNPTkV4dCggeyBlbnRpdHlUeXBlOiBlbnRpdHlUeXBlLCB0b05hbWVPblNlcnZlcjogdHJ1ZX0pIGFzIGFueTtcclxuICAgIGpzb24uZnJvbSA9IHVuZGVmaW5lZDtcclxuICAgIGpzb24ucXVlcnlPcHRpb25zID0gdW5kZWZpbmVkO1xyXG4gICAgaWYgKGpzb24ucGFyYW1ldGVycyAmJiBqc29uLnBhcmFtZXRlcnMuJGRhdGEpIHtcclxuICAgICAgLy8gcmVtb3ZlIHBhcmFtZXRlcnMgaWYgZG9pbmcgYWpheCBwb3N0XHJcbiAgICAgIGpzb24ucGFyYW1ldGVycyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGpzb24pO1xyXG4gICAgaWYgKGpzb25TdHJpbmcubGVuZ3RoID4gMikge1xyXG4gICAgICBsZXQgdXJsQm9keSA9IGVuY29kZVVSSUNvbXBvbmVudChqc29uU3RyaW5nKTtcclxuICAgICAgbGV0IHNlcCA9IGVudGl0eVF1ZXJ5LnJlc291cmNlTmFtZS5pbmNsdWRlcyhcIj9cIikgPyBcIiZcIiA6IFwiP1wiO1xyXG4gICAgICByZXR1cm4gZW50aXR5UXVlcnkucmVzb3VyY2VOYW1lICsgc2VwICsgdXJsQm9keTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBlbnRpdHlRdWVyeS5yZXNvdXJjZU5hbWU7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmJyZWV6ZS5jb25maWcucmVnaXN0ZXJBZGFwdGVyKFwidXJpQnVpbGRlclwiLCBVcmlCdWlsZGVySnNvbkFkYXB0ZXIpO1xyXG5cclxuXHJcblxyXG4iXX0=