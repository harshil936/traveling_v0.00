import * as breeze from 'breeze-client';
export class UriBuilderODataAdapter {
    constructor() {
        this.name = "odata";
    }
    static register(config) {
        config = config || breeze.config;
        config.registerAdapter("uriBuilder", UriBuilderODataAdapter);
        return config.initializeAdapterInstance("uriBuilder", "odata", true);
    }
    initialize() { }
    buildUri(entityQuery, metadataStore) {
        // force entityType validation;
        let entityType = entityQuery._getFromEntityType(metadataStore, false);
        if (!entityType) {
            // anonymous type but still has naming convention info avail
            entityType = new breeze.EntityType(metadataStore);
        }
        let queryOptions = {};
        queryOptions["$filter"] = toWhereODataFragment(entityQuery.wherePredicate);
        queryOptions["$orderby"] = toOrderByODataFragment(entityQuery.orderByClause);
        if (entityQuery.skipCount) {
            queryOptions["$skip"] = entityQuery.skipCount;
        }
        if (entityQuery.takeCount != null) {
            queryOptions["$top"] = entityQuery.takeCount;
        }
        queryOptions["$expand"] = toExpandODataFragment(entityQuery.expandClause);
        queryOptions["$select"] = toSelectODataFragment(entityQuery.selectClause);
        if (entityQuery.inlineCountEnabled) {
            queryOptions["$inlinecount"] = "allpages";
        }
        let qoText = toQueryOptionsString(queryOptions);
        let sep = entityQuery.resourceName.includes("?") ? "&" : "?";
        return entityQuery.resourceName + sep + qoText;
        // private methods to this func.
        function toWhereODataFragment(wherePredicate) {
            if (!wherePredicate)
                return undefined;
            // validation occurs inside of the toODataFragment call here.
            let frag = wherePredicate.visit({ entityType: entityType }, toODataFragmentVisitor);
            return (frag && frag.length > 0) ? frag : undefined;
        }
        function toOrderByODataFragment(orderByClause) {
            if (!orderByClause)
                return undefined;
            orderByClause.validate(entityType);
            let strings = orderByClause.items.map(function (item) {
                return entityType.clientPropertyPathToServer(item.propertyPath, "/") + (item.isDesc ? " desc" : "");
            });
            // should return something like CompanyName,Address/City desc
            return strings.join(',');
        }
        function toSelectODataFragment(selectClause) {
            if (!selectClause)
                return undefined;
            selectClause.validate(entityType);
            let frag = selectClause.propertyPaths.map(function (pp) {
                return entityType.clientPropertyPathToServer(pp, "/");
            }).join(",");
            return frag;
        }
        function toExpandODataFragment(expandClause) {
            if (!expandClause)
                return undefined;
            // no validate on expand clauses currently.
            // expandClause.validate(entityType);
            let frag = expandClause.propertyPaths.map(function (pp) {
                return entityType.clientPropertyPathToServer(pp, "/");
            }).join(",");
            return frag;
        }
        function toQueryOptionsString(queryOptions) {
            let qoStrings = [];
            for (let qoName in queryOptions) {
                let qoValue = queryOptions[qoName];
                if (qoValue !== undefined) {
                    if (qoValue instanceof Array) {
                        qoValue.forEach(function (qov) {
                            qoStrings.push(qoName + "=" + encodeURIComponent(qov));
                        });
                    }
                    else {
                        qoStrings.push(qoName + "=" + encodeURIComponent(qoValue));
                    }
                }
            }
            if (qoStrings.length > 0) {
                return qoStrings.join("&");
            }
            else {
                return "";
            }
        }
    }
}
breeze.Predicate.prototype.toODataFragment = function (context) {
    return this.visit(context, toODataFragmentVisitor);
};
const ɵ0 = function () {
    return this.value;
}, ɵ1 = function (context) {
    let predVal = this.pred.visit(context);
    return odataOpFrom(this) + " " + "(" + predVal + ")";
}, ɵ2 = function (context) {
    let expr1Val = this.expr1.visit(context);
    let expr2Val = this.expr2.visit(context);
    let prefix = context.prefix;
    if (prefix) {
        expr1Val = prefix + "/" + expr1Val;
    }
    let odataOp = odataOpFrom(this);
    if (this.op.key === 'in') {
        let result = expr2Val.map(function (v) {
            return "(" + expr1Val + " eq " + v + ")";
        }).join(" or ");
        return result;
    }
    else if (this.op.isFunction) {
        if (odataOp === "substringof") {
            return odataOp + "(" + expr2Val + "," + expr1Val + ") eq true";
        }
        else {
            return odataOp + "(" + expr1Val + "," + expr2Val + ") eq true";
        }
    }
    else {
        return expr1Val + " " + odataOp + " " + expr2Val;
    }
}, ɵ3 = function (context) {
    let result = this.preds.map(function (pred) {
        let predVal = pred.visit(context);
        return "(" + predVal + ")";
    }).join(" " + odataOpFrom(this) + " ");
    return result;
}, ɵ4 = function (context) {
    let exprVal = this.expr.visit(context);
    if (!this.pred.op) { // added 21-Oct-2016 to fix breeze.js issue #172
        return exprVal + "/" + odataOpFrom(this) + "()";
    }
    let prefix = context.prefix;
    if (prefix) {
        exprVal = prefix + "/" + exprVal;
        prefix = "x" + (parseInt(prefix.substring(1)) + 1);
    }
    else {
        prefix = "x1";
    }
    // need to create a new context because of 'prefix'
    let newContext = breeze.core.extend({}, context);
    newContext.entityType = this.expr.dataType;
    newContext.prefix = prefix;
    let newPredVal = this.pred.visit(newContext);
    return exprVal + "/" + odataOpFrom(this) + "(" + prefix + ": " + newPredVal + ")";
}, ɵ5 = function () {
    if (Array.isArray(this.value)) {
        return this.value.map(function (v) { return this.dataType.fmtOData(v); }, this);
    }
    else {
        return this.dataType.fmtOData(this.value);
    }
}, ɵ6 = function (context) {
    let entityType = context.entityType;
    // '/' is the OData path delimiter
    return entityType ? entityType.clientPropertyPathToServer(this.propertyPath, "/") : this.propertyPath;
}, ɵ7 = function (context) {
    let exprVals = this.exprs.map(function (expr) {
        return expr.visit(context);
    });
    return this.fnName + "(" + exprVals.join(",") + ")";
};
let toODataFragmentVisitor = {
    passthruPredicate: ɵ0,
    unaryPredicate: ɵ1,
    binaryPredicate: ɵ2,
    andOrPredicate: ɵ3,
    anyAllPredicate: ɵ4,
    litExpr: ɵ5,
    propExpr: ɵ6,
    fnExpr: ɵ7
};
let _operatorMap = {
    'contains': 'substringof'
};
function odataOpFrom(node) {
    let op = node.op.key;
    let odataOp = _operatorMap[op];
    return odataOp || op;
}
breeze.config.registerAdapter("uriBuilder", UriBuilderODataAdapter);
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6, ɵ7 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRhcHRlci11cmktYnVpbGRlci1vZGF0YS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2JyZWV6ZS1jbGllbnQvYWRhcHRlci11cmktYnVpbGRlci1vZGF0YS8iLCJzb3VyY2VzIjpbImFkYXB0ZXItdXJpLWJ1aWxkZXItb2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFFeEMsTUFBTSxPQUFPLHNCQUFzQjtJQUlqQztRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQTRCO1FBQzFDLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUNqQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQzdELE9BQU8sTUFBTSxDQUFDLHlCQUF5QixDQUFDLFlBQVksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUEyQixDQUFDO0lBQ2pHLENBQUM7SUFFRCxVQUFVLEtBQUssQ0FBQztJQUVoQixRQUFRLENBQUMsV0FBK0IsRUFBRSxhQUFtQztRQUMzRSwrQkFBK0I7UUFDL0IsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsNERBQTREO1lBQzVELFVBQVUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdEIsWUFBWSxDQUFDLFNBQVMsQ0FBQyxHQUFHLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMzRSxZQUFZLENBQUMsVUFBVSxDQUFDLEdBQUcsc0JBQXNCLENBQUMsV0FBVyxDQUFDLGFBQWMsQ0FBQyxDQUFDO1FB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QUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7QUFDdEQsQ0FBQztBQXBGSCxJQUFJLHNCQUFzQixHQUFHO0lBRTNCLGlCQUFpQixJQUVoQjtJQUVELGNBQWMsSUFHYjtJQUVELGVBQWUsSUF3QmQ7SUFFRCxjQUFjLElBTWI7SUFFRCxlQUFlLElBa0JkO0lBRUQsT0FBTyxJQU1OO0lBRUQsUUFBUSxJQUlQO0lBRUQsTUFBTSxJQUtMO0NBQ0YsQ0FBQztBQUVGLElBQUksWUFBWSxHQUFHO0lBQ2pCLFVBQVUsRUFBRSxhQUFhO0NBQzFCLENBQUM7QUFFRixTQUFTLFdBQVcsQ0FBQyxJQUFTO0lBQzVCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ3JCLElBQUksT0FBTyxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQixPQUFPLE9BQU8sSUFBSSxFQUFFLENBQUM7QUFDdkIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYnJlZXplIGZyb20gJ2JyZWV6ZS1jbGllbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVyaUJ1aWxkZXJPRGF0YUFkYXB0ZXIgaW1wbGVtZW50cyBicmVlemUuVXJpQnVpbGRlckFkYXB0ZXIge1xyXG5cclxuICBuYW1lOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5uYW1lID0gXCJvZGF0YVwiO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlZ2lzdGVyKGNvbmZpZz86IGJyZWV6ZS5CcmVlemVDb25maWcpIHtcclxuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCBicmVlemUuY29uZmlnO1xyXG4gICAgY29uZmlnLnJlZ2lzdGVyQWRhcHRlcihcInVyaUJ1aWxkZXJcIiwgVXJpQnVpbGRlck9EYXRhQWRhcHRlcik7XHJcbiAgICByZXR1cm4gY29uZmlnLmluaXRpYWxpemVBZGFwdGVySW5zdGFuY2UoXCJ1cmlCdWlsZGVyXCIsIFwib2RhdGFcIiwgdHJ1ZSkgYXMgVXJpQnVpbGRlck9EYXRhQWRhcHRlcjtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKSB7IH1cclxuXHJcbiAgYnVpbGRVcmkoZW50aXR5UXVlcnk6IGJyZWV6ZS5FbnRpdHlRdWVyeSwgbWV0YWRhdGFTdG9yZTogYnJlZXplLk1ldGFkYXRhU3RvcmUpIHtcclxuICAgIC8vIGZvcmNlIGVudGl0eVR5cGUgdmFsaWRhdGlvbjtcclxuICAgIGxldCBlbnRpdHlUeXBlID0gZW50aXR5UXVlcnkuX2dldEZyb21FbnRpdHlUeXBlKG1ldGFkYXRhU3RvcmUsIGZhbHNlKTtcclxuICAgIGlmICghZW50aXR5VHlwZSkge1xyXG4gICAgICAvLyBhbm9ueW1vdXMgdHlwZSBidXQgc3RpbGwgaGFzIG5hbWluZyBjb252ZW50aW9uIGluZm8gYXZhaWxcclxuICAgICAgZW50aXR5VHlwZSA9IG5ldyBicmVlemUuRW50aXR5VHlwZShtZXRhZGF0YVN0b3JlKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcXVlcnlPcHRpb25zID0ge307XHJcbiAgICBxdWVyeU9wdGlvbnNbXCIkZmlsdGVyXCJdID0gdG9XaGVyZU9EYXRhRnJhZ21lbnQoZW50aXR5UXVlcnkud2hlcmVQcmVkaWNhdGUpO1xyXG4gICAgcXVlcnlPcHRpb25zW1wiJG9yZGVyYnlcIl0gPSB0b09yZGVyQnlPRGF0YUZyYWdtZW50KGVudGl0eVF1ZXJ5Lm9yZGVyQnlDbGF1c2UhKTtcclxuXHJcbiAgICBpZiAoZW50aXR5UXVlcnkuc2tpcENvdW50KSB7XHJcbiAgICAgIHF1ZXJ5T3B0aW9uc1tcIiRza2lwXCJdID0gZW50aXR5UXVlcnkuc2tpcENvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbnRpdHlRdWVyeS50YWtlQ291bnQgIT0gbnVsbCkge1xyXG4gICAgICBxdWVyeU9wdGlvbnNbXCIkdG9wXCJdID0gZW50aXR5UXVlcnkudGFrZUNvdW50O1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXJ5T3B0aW9uc1tcIiRleHBhbmRcIl0gPSB0b0V4cGFuZE9EYXRhRnJhZ21lbnQoZW50aXR5UXVlcnkuZXhwYW5kQ2xhdXNlKTtcclxuICAgIHF1ZXJ5T3B0aW9uc1tcIiRzZWxlY3RcIl0gPSB0b1NlbGVjdE9EYXRhRnJhZ21lbnQoZW50aXR5UXVlcnkuc2VsZWN0Q2xhdXNlISk7XHJcblxyXG4gICAgaWYgKGVudGl0eVF1ZXJ5LmlubGluZUNvdW50RW5hYmxlZCkge1xyXG4gICAgICBxdWVyeU9wdGlvbnNbXCIkaW5saW5lY291bnRcIl0gPSBcImFsbHBhZ2VzXCI7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHFvVGV4dCA9IHRvUXVlcnlPcHRpb25zU3RyaW5nKHF1ZXJ5T3B0aW9ucyBhcyBicmVlemUuUXVlcnlPcHRpb25zKTtcclxuICAgIGxldCBzZXAgPSBlbnRpdHlRdWVyeS5yZXNvdXJjZU5hbWUuaW5jbHVkZXMoXCI/XCIpID8gXCImXCIgOiBcIj9cIjtcclxuICAgIHJldHVybiBlbnRpdHlRdWVyeS5yZXNvdXJjZU5hbWUgKyBzZXAgKyBxb1RleHQ7XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBtZXRob2RzIHRvIHRoaXMgZnVuYy5cclxuXHJcbiAgICBmdW5jdGlvbiB0b1doZXJlT0RhdGFGcmFnbWVudCh3aGVyZVByZWRpY2F0ZTogYnJlZXplLlByZWRpY2F0ZSkge1xyXG4gICAgICBpZiAoIXdoZXJlUHJlZGljYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAvLyB2YWxpZGF0aW9uIG9jY3VycyBpbnNpZGUgb2YgdGhlIHRvT0RhdGFGcmFnbWVudCBjYWxsIGhlcmUuXHJcbiAgICAgIGxldCBmcmFnID0gd2hlcmVQcmVkaWNhdGUudmlzaXQoeyBlbnRpdHlUeXBlOiBlbnRpdHlUeXBlIH0sIHRvT0RhdGFGcmFnbWVudFZpc2l0b3IpO1xyXG4gICAgICByZXR1cm4gKGZyYWcgJiYgZnJhZy5sZW5ndGggPiAwKSA/IGZyYWcgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdG9PcmRlckJ5T0RhdGFGcmFnbWVudChvcmRlckJ5Q2xhdXNlOiBicmVlemUuT3JkZXJCeUNsYXVzZSkge1xyXG4gICAgICBpZiAoIW9yZGVyQnlDbGF1c2UpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIG9yZGVyQnlDbGF1c2UudmFsaWRhdGUoZW50aXR5VHlwZSEpO1xyXG4gICAgICBsZXQgc3RyaW5ncyA9IG9yZGVyQnlDbGF1c2UuaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eVR5cGUhLmNsaWVudFByb3BlcnR5UGF0aFRvU2VydmVyKGl0ZW0ucHJvcGVydHlQYXRoLCBcIi9cIikgKyAoaXRlbS5pc0Rlc2MgPyBcIiBkZXNjXCIgOiBcIlwiKTtcclxuICAgICAgfSk7XHJcbiAgICAgIC8vIHNob3VsZCByZXR1cm4gc29tZXRoaW5nIGxpa2UgQ29tcGFueU5hbWUsQWRkcmVzcy9DaXR5IGRlc2NcclxuICAgICAgcmV0dXJuIHN0cmluZ3Muam9pbignLCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvU2VsZWN0T0RhdGFGcmFnbWVudChzZWxlY3RDbGF1c2U/OiBicmVlemUuU2VsZWN0Q2xhdXNlKSB7XHJcbiAgICAgIGlmICghc2VsZWN0Q2xhdXNlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICBzZWxlY3RDbGF1c2UudmFsaWRhdGUoZW50aXR5VHlwZSEpO1xyXG4gICAgICBsZXQgZnJhZyA9IHNlbGVjdENsYXVzZS5wcm9wZXJ0eVBhdGhzLm1hcChmdW5jdGlvbiAocHApIHtcclxuICAgICAgICByZXR1cm4gZW50aXR5VHlwZSEuY2xpZW50UHJvcGVydHlQYXRoVG9TZXJ2ZXIocHAsIFwiL1wiKTtcclxuICAgICAgfSkuam9pbihcIixcIik7XHJcbiAgICAgIHJldHVybiBmcmFnO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHRvRXhwYW5kT0RhdGFGcmFnbWVudChleHBhbmRDbGF1c2U/OiBicmVlemUuRXhwYW5kQ2xhdXNlKSB7XHJcbiAgICAgIGlmICghZXhwYW5kQ2xhdXNlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAvLyBubyB2YWxpZGF0ZSBvbiBleHBhbmQgY2xhdXNlcyBjdXJyZW50bHkuXHJcbiAgICAgIC8vIGV4cGFuZENsYXVzZS52YWxpZGF0ZShlbnRpdHlUeXBlKTtcclxuICAgICAgbGV0IGZyYWcgPSBleHBhbmRDbGF1c2UucHJvcGVydHlQYXRocy5tYXAoZnVuY3Rpb24gKHBwKSB7XHJcbiAgICAgICAgcmV0dXJuIGVudGl0eVR5cGUhLmNsaWVudFByb3BlcnR5UGF0aFRvU2VydmVyKHBwLCBcIi9cIik7XHJcbiAgICAgIH0pLmpvaW4oXCIsXCIpO1xyXG4gICAgICByZXR1cm4gZnJhZztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0b1F1ZXJ5T3B0aW9uc1N0cmluZyhxdWVyeU9wdGlvbnM6IGJyZWV6ZS5RdWVyeU9wdGlvbnMpIHtcclxuICAgICAgbGV0IHFvU3RyaW5nczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgZm9yIChsZXQgcW9OYW1lIGluIHF1ZXJ5T3B0aW9ucykge1xyXG4gICAgICAgIGxldCBxb1ZhbHVlID0gcXVlcnlPcHRpb25zW3FvTmFtZV07XHJcbiAgICAgICAgaWYgKHFvVmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgaWYgKHFvVmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICBxb1ZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHFvdikge1xyXG4gICAgICAgICAgICAgIHFvU3RyaW5ncy5wdXNoKHFvTmFtZSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHFvdikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHFvU3RyaW5ncy5wdXNoKHFvTmFtZSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHFvVmFsdWUpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChxb1N0cmluZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHJldHVybiBxb1N0cmluZ3Muam9pbihcIiZcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuKGJyZWV6ZS5QcmVkaWNhdGUucHJvdG90eXBlIGFzIGFueSkudG9PRGF0YUZyYWdtZW50ID0gZnVuY3Rpb24gKGNvbnRleHQ6IGJyZWV6ZS5WaXNpdENvbnRleHQpIHtcclxuICByZXR1cm4gdGhpcy52aXNpdChjb250ZXh0LCB0b09EYXRhRnJhZ21lbnRWaXNpdG9yKTtcclxufTtcclxuXHJcbmxldCB0b09EYXRhRnJhZ21lbnRWaXNpdG9yID0ge1xyXG5cclxuICBwYXNzdGhydVByZWRpY2F0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgfSxcclxuXHJcbiAgdW5hcnlQcmVkaWNhdGU6IGZ1bmN0aW9uICh0aGlzOiBicmVlemUuVW5hcnlQcmVkaWNhdGUsIGNvbnRleHQ6IGJyZWV6ZS5WaXNpdENvbnRleHQpIHtcclxuICAgIGxldCBwcmVkVmFsID0gdGhpcy5wcmVkLnZpc2l0KGNvbnRleHQpO1xyXG4gICAgcmV0dXJuIG9kYXRhT3BGcm9tKHRoaXMpICsgXCIgXCIgKyBcIihcIiArIHByZWRWYWwgKyBcIilcIjtcclxuICB9LFxyXG5cclxuICBiaW5hcnlQcmVkaWNhdGU6IGZ1bmN0aW9uICh0aGlzOiBicmVlemUuQmluYXJ5UHJlZGljYXRlLCBjb250ZXh0OiBicmVlemUuVmlzaXRDb250ZXh0KSB7XHJcbiAgICBsZXQgZXhwcjFWYWwgPSB0aGlzLmV4cHIxIS52aXNpdChjb250ZXh0KTtcclxuICAgIGxldCBleHByMlZhbCA9IHRoaXMuZXhwcjIhLnZpc2l0KGNvbnRleHQpO1xyXG4gICAgbGV0IHByZWZpeCA9IChjb250ZXh0IGFzIGFueSkucHJlZml4O1xyXG4gICAgaWYgKHByZWZpeCkge1xyXG4gICAgICBleHByMVZhbCA9IHByZWZpeCArIFwiL1wiICsgZXhwcjFWYWw7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG9kYXRhT3AgPSBvZGF0YU9wRnJvbSh0aGlzKTtcclxuXHJcbiAgICBpZiAodGhpcy5vcC5rZXkgPT09ICdpbicpIHtcclxuICAgICAgbGV0IHJlc3VsdCA9IGV4cHIyVmFsLm1hcChmdW5jdGlvbiAodjogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIFwiKFwiICsgZXhwcjFWYWwgKyBcIiBlcSBcIiArIHYgKyBcIilcIjtcclxuICAgICAgfSkuam9pbihcIiBvciBcIik7XHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMub3AuaXNGdW5jdGlvbikge1xyXG4gICAgICBpZiAob2RhdGFPcCA9PT0gXCJzdWJzdHJpbmdvZlwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG9kYXRhT3AgKyBcIihcIiArIGV4cHIyVmFsICsgXCIsXCIgKyBleHByMVZhbCArIFwiKSBlcSB0cnVlXCI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIG9kYXRhT3AgKyBcIihcIiArIGV4cHIxVmFsICsgXCIsXCIgKyBleHByMlZhbCArIFwiKSBlcSB0cnVlXCI7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBleHByMVZhbCArIFwiIFwiICsgb2RhdGFPcCArIFwiIFwiICsgZXhwcjJWYWw7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgYW5kT3JQcmVkaWNhdGU6IGZ1bmN0aW9uICh0aGlzOiBicmVlemUuQW5kT3JQcmVkaWNhdGUsIGNvbnRleHQ6IGJyZWV6ZS5WaXNpdENvbnRleHQpIHtcclxuICAgIGxldCByZXN1bHQgPSB0aGlzLnByZWRzLm1hcChmdW5jdGlvbiAocHJlZCkge1xyXG4gICAgICBsZXQgcHJlZFZhbCA9IHByZWQudmlzaXQoY29udGV4dCk7XHJcbiAgICAgIHJldHVybiBcIihcIiArIHByZWRWYWwgKyBcIilcIjtcclxuICAgIH0pLmpvaW4oXCIgXCIgKyBvZGF0YU9wRnJvbSh0aGlzKSArIFwiIFwiKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSxcclxuXHJcbiAgYW55QWxsUHJlZGljYXRlOiBmdW5jdGlvbiAodGhpczogYnJlZXplLkFueUFsbFByZWRpY2F0ZSwgY29udGV4dDogYnJlZXplLlZpc2l0Q29udGV4dCkge1xyXG4gICAgbGV0IGV4cHJWYWwgPSB0aGlzLmV4cHIudmlzaXQoY29udGV4dCk7XHJcbiAgICBpZiAoIXRoaXMucHJlZC5vcCkgeyAvLyBhZGRlZCAyMS1PY3QtMjAxNiB0byBmaXggYnJlZXplLmpzIGlzc3VlICMxNzJcclxuICAgICAgcmV0dXJuIGV4cHJWYWwgKyBcIi9cIiArIG9kYXRhT3BGcm9tKHRoaXMpICsgXCIoKVwiO1xyXG4gICAgfVxyXG4gICAgbGV0IHByZWZpeCA9IChjb250ZXh0IGFzIGFueSkucHJlZml4O1xyXG4gICAgaWYgKHByZWZpeCkge1xyXG4gICAgICBleHByVmFsID0gcHJlZml4ICsgXCIvXCIgKyBleHByVmFsO1xyXG4gICAgICBwcmVmaXggPSBcInhcIiArIChwYXJzZUludChwcmVmaXguc3Vic3RyaW5nKDEpKSArIDEpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJlZml4ID0gXCJ4MVwiO1xyXG4gICAgfVxyXG4gICAgLy8gbmVlZCB0byBjcmVhdGUgYSBuZXcgY29udGV4dCBiZWNhdXNlIG9mICdwcmVmaXgnXHJcbiAgICBsZXQgbmV3Q29udGV4dCA9IGJyZWV6ZS5jb3JlLmV4dGVuZCh7fSwgY29udGV4dCkgYXMgYW55O1xyXG4gICAgbmV3Q29udGV4dC5lbnRpdHlUeXBlID0gdGhpcy5leHByLmRhdGFUeXBlO1xyXG4gICAgbmV3Q29udGV4dC5wcmVmaXggPSBwcmVmaXg7XHJcbiAgICBsZXQgbmV3UHJlZFZhbCA9IHRoaXMucHJlZC52aXNpdChuZXdDb250ZXh0KTtcclxuICAgIHJldHVybiBleHByVmFsICsgXCIvXCIgKyBvZGF0YU9wRnJvbSh0aGlzKSArIFwiKFwiICsgcHJlZml4ICsgXCI6IFwiICsgbmV3UHJlZFZhbCArIFwiKVwiO1xyXG4gIH0sXHJcblxyXG4gIGxpdEV4cHI6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlLm1hcChmdW5jdGlvbiAodjogYW55KSB7IHJldHVybiB0aGlzLmRhdGFUeXBlLmZtdE9EYXRhKHYpOyB9LCB0aGlzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRhdGFUeXBlLmZtdE9EYXRhKHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIHByb3BFeHByOiBmdW5jdGlvbiAodGhpczogYnJlZXplLlByb3BFeHByLCBjb250ZXh0OiBicmVlemUuRXhwcmVzc2lvbkNvbnRleHQpIHtcclxuICAgIGxldCBlbnRpdHlUeXBlID0gY29udGV4dC5lbnRpdHlUeXBlO1xyXG4gICAgLy8gJy8nIGlzIHRoZSBPRGF0YSBwYXRoIGRlbGltaXRlclxyXG4gICAgcmV0dXJuIGVudGl0eVR5cGUgPyBlbnRpdHlUeXBlLmNsaWVudFByb3BlcnR5UGF0aFRvU2VydmVyKHRoaXMucHJvcGVydHlQYXRoLCBcIi9cIikgOiB0aGlzLnByb3BlcnR5UGF0aDtcclxuICB9LFxyXG5cclxuICBmbkV4cHI6IGZ1bmN0aW9uICh0aGlzOiBicmVlemUuRm5FeHByLCBjb250ZXh0OiBicmVlemUuRXhwcmVzc2lvbkNvbnRleHQpIHtcclxuICAgIGxldCBleHByVmFscyA9IHRoaXMuZXhwcnMubWFwKGZ1bmN0aW9uIChleHByKSB7XHJcbiAgICAgIHJldHVybiBleHByLnZpc2l0KGNvbnRleHQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5mbk5hbWUgKyBcIihcIiArIGV4cHJWYWxzLmpvaW4oXCIsXCIpICsgXCIpXCI7XHJcbiAgfVxyXG59O1xyXG5cclxubGV0IF9vcGVyYXRvck1hcCA9IHtcclxuICAnY29udGFpbnMnOiAnc3Vic3RyaW5nb2YnXHJcbn07XHJcblxyXG5mdW5jdGlvbiBvZGF0YU9wRnJvbShub2RlOiBhbnkpIHtcclxuICBsZXQgb3AgPSBub2RlLm9wLmtleTtcclxuICBsZXQgb2RhdGFPcCA9IF9vcGVyYXRvck1hcFtvcF07XHJcbiAgcmV0dXJuIG9kYXRhT3AgfHwgb3A7XHJcbn1cclxuXHJcbmJyZWV6ZS5jb25maWcucmVnaXN0ZXJBZGFwdGVyKFwidXJpQnVpbGRlclwiLCBVcmlCdWlsZGVyT0RhdGFBZGFwdGVyKTtcclxuXHJcblxyXG5cclxuIl19