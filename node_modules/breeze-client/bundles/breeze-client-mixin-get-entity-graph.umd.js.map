{"version":3,"file":"breeze-client-mixin-get-entity-graph.umd.js","sources":["ng://breeze-client/mixin-get-entity-graph/mixin-get-entity-graph.ts"],"sourcesContent":["//#region Copyright, Version, and Description\r\n/*\r\n * Copyright 2015-2019 IdeaBlade, Inc.  All Rights Reserved.\r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\r\n * conditions of the IdeaBlade Breeze license, available at http://www.breezejs.com/license\r\n *\r\n * Author: Ward Bell\r\n * Version: 0.9.5 - Steve Schmitt - convert to TypeScript, migrate to breeze-client repo, add HasEntityGraph and mixinEntityGraph\r\n * Version: 0.9.4 - Marcel Good - fix UMD module name\r\n * --------------------------------------------------------------------------------\r\n * Adds getEntityGraph method to Breeze EntityManager prototype.\r\n * Call   mixinEntityGraph(EntityManager)   to apply the mixin in a tree-shaking-resistant way.\r\n * Then   (manager as any).getEntityGraph(entity, \"child\");\r\n *\r\n * Depends on Breeze which it patches\r\n *\r\n * For discussion, see:\r\n * http://www.breezejs.com/documentation/getentitygraph\r\n *\r\n * For example usage, see:\r\n * https://github.com/Breeze/breeze.js.samples/tree/master/net/DocCode/DocCode/tests/getEntityGraphTests.js\r\n */\r\n//#endregion\r\nimport { Entity, EntityManager, EntityQuery, EntityState, EntityType, ExpandClause } from 'breeze-client';\r\n\r\ninterface EntityGroup {\r\n  _entities: (Entity | null)[];\r\n  _indexMap: { [index: string]: number };\r\n}\r\n\r\n// module augmentation failed to build with ng-packagr, so we have a separate interface\r\nexport interface HasEntityGraph extends EntityManager {\r\n  /**\r\n  Get related entities of root entity (or root entities) as specified by expand.\r\n  @example\r\n      var graph = breeze.EntityManager.getEntityGraph(customer, 'Orders.OrderDetails');\r\n      // graph will be the customer, all of its orders and their details even if deleted.\r\n  @method getEntityGraph\r\n  @param roots {Entity|Array of Entity} The root entity or root entities.\r\n  @param expand {String|Array of String|Object} an expand string, a query expand clause, or array of string paths\r\n  @return {Array of Entity} root entities and their related entities, including deleted entities. Duplicates are removed and entity order is indeterminate.\r\n  **/\r\n  getEntityGraph(roots: Entity | Array<Entity>, expand: string | Array<string> | ExpandClause): Array<Entity>;\r\n\r\n  /**\r\n  Execute query locally and return both the query results and their related entities as specified by the optional expand parameter or the query's expand clause.\r\n  @example\r\n      var query = breeze.EntityQuery.from('Customers')\r\n                  .where('CompanyName', 'startsWith', 'Alfred')\r\n                  .expand('Orders.OrderDetails');\r\n      var graph = manager.getEntityGraph(query);\r\n      // graph will be the 'Alfred' customers, their orders and their details even if deleted.\r\n  @method getEntityGraph\r\n  @param query {EntityQuery} A query to be executed against the manager's local cache.\r\n  @param [expand] {String|Array of String|Object} an expand string, a query expand clause, or array of string paths\r\n  @return {Array of Entity} local queried root entities and their related entities, including deleted entities. Duplicates are removed and entity order is indeterminate.\r\n  **/\r\n  getEntityGraph(query: EntityQuery, expand: string | Array<string> | ExpandClause): Array<Entity>;\r\n\r\n}\r\n\r\nexport function mixinEntityGraph(emclass: { new(): EntityManager }) {\r\n  const proto = EntityManager.prototype;\r\n\r\n  if (!(proto as any).getEntityGraph) {\r\n    (proto as any).getEntityGraph = getEntityGraph;\r\n  }\r\n}\r\n\r\nmixinEntityGraph(EntityManager);\r\n\r\n\r\nfunction getEntityGraph(roots: Entity | Array<Entity> | EntityQuery, expand: string | Array<string> | ExpandClause) {\r\n  if (roots instanceof EntityQuery) {\r\n    let newRoots = this.executeQueryLocally(roots);\r\n    return getEntityGraphCore(newRoots, expand || roots.expandClause);\r\n  } else {\r\n    return getEntityGraphCore(roots, expand);\r\n  }\r\n}\r\n\r\nfunction getEntityGraphCore(root: Entity | Array<Entity>, expand: string | Array<string> | ExpandClause) {\r\n  let entityGroupMap: { [index: string]: EntityGroup };\r\n  let graph = [] as Array<Entity>;\r\n  let rootType: EntityType;\r\n  let roots = Array.isArray(root) ? root : [root];\r\n  addToGraph(roots);     // removes dups & nulls\r\n  roots = graph.slice(); // copy of de-duped roots\r\n  if (roots.length) {\r\n    getRootInfo();\r\n    getExpand();\r\n    buildGraph();\r\n  }\r\n  return graph;\r\n\r\n  function addToGraph(entities: Array<Entity>) {\r\n    entities.forEach(function (entity) {\r\n      if (entity && graph.indexOf(entity) < 0) {\r\n        graph.push(entity);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getRootInfo() {\r\n    let compatTypes: Array<EntityType>;\r\n\r\n    roots.forEach(function (root, ix) {\r\n      let aspect;\r\n      if (!root || !(aspect = root.entityAspect)) {\r\n        throw getRootErr(ix, 'is not an entity');\r\n      }\r\n      if (aspect.entityState === EntityState.Detached) {\r\n        throw getRootErr(ix, 'is a detached entity');\r\n      }\r\n\r\n      let em = aspect.entityManager;\r\n      if (entityGroupMap) {\r\n        if (entityGroupMap !== em._entityGroupMap) {\r\n          throw getRootErr(ix, \"has a different 'EntityManager' than other roots\");\r\n        }\r\n      } else {\r\n        entityGroupMap = em._entityGroupMap;\r\n      }\r\n      getRootType(root, ix);\r\n\r\n    });\r\n\r\n    function getRootErr(ix: number, msg: string) {\r\n      return new Error(\"'getEntityGraph' root[\" + ix + \"] \" + msg);\r\n    }\r\n\r\n    function getRootType(root: Entity, ix: number) {\r\n      let thisType = root.entityType;\r\n      if (!rootType) {\r\n        rootType = thisType;\r\n        return;\r\n      } else if (rootType === thisType) {\r\n        return;\r\n      }\r\n      // Types differs. Look for closest common base type\r\n      // does thisType derive from current rootType?\r\n      let baseType = rootType;\r\n      do {\r\n        compatTypes = compatTypes || baseType.getSelfAndSubtypes();\r\n        if (compatTypes.indexOf(thisType) > -1) {\r\n          rootType = baseType;\r\n          return;\r\n        }\r\n        baseType = baseType.baseEntityType;\r\n        compatTypes = null;\r\n      } while (baseType);\r\n\r\n      // does current rootType derives from thisType?\r\n      baseType = thisType;\r\n      do {\r\n        compatTypes = baseType.getSelfAndSubtypes();\r\n        if (compatTypes.indexOf(rootType) > -1) {\r\n          rootType = baseType;\r\n          return;\r\n        }\r\n        baseType = baseType.baseEntityType;\r\n      } while (baseType);\r\n\r\n      throw getRootErr(ix, \"is not EntityType-compatible with other roots\");\r\n    }\r\n  }\r\n\r\n  function getExpand() {\r\n    try {\r\n      if (!expand) {\r\n        expand = [];\r\n      } else if (typeof expand === 'string') {\r\n        // tricky because Breeze expandClause not exposed publically\r\n        expand = new EntityQuery().expand(expand).expandClause;\r\n      }\r\n      if (expand instanceof ExpandClause && expand.propertyPaths) { // expand clause\r\n        expand = expand.propertyPaths;\r\n      } else if (Array.isArray(expand)) {\r\n        if (!expand.every(function (elem) { return typeof elem === 'string'; })) {\r\n          throw '';\r\n        }\r\n      } else {\r\n        throw '';\r\n      }\r\n    } catch (_) {\r\n      throw new Error(\r\n        \"expand must be an expand string, array of string paths, or a query expand clause\");\r\n    }\r\n  }\r\n\r\n  function buildGraph() {\r\n    if (expand && expand instanceof Array && expand.length) {\r\n      let fns = expand.map(makePathFn);\r\n      fns.forEach(function (fn) { fn(roots); });\r\n    }\r\n  }\r\n\r\n  // Make function to get entities along a single expand path\r\n  // such as 'Orders.OrderDetails.Product'\r\n  function makePathFn(path: string) {\r\n    let fns = [] as Array<Function>,\r\n      segments = path.split('.'),\r\n      type = rootType;\r\n\r\n    for (let i = 0, slen = segments.length; i < slen; i++) {\r\n      let f = makePathSegmentFn(type, segments[i]);\r\n      type = (f as any).navType;\r\n      fns.push(f);\r\n    }\r\n\r\n    return function pathFn(entities: Array<Entity>) {\r\n      for (let j = 0, flen = fns.length; j < flen; j++) {\r\n        let elen = entities.length;\r\n        if (elen === 0) { return; } // nothing left to explore\r\n        // fn to get related entities for this path segment\r\n        let fn = fns[j];\r\n        // get entities related by this path segment\r\n        let related = [] as Array<Entity>;\r\n        for (let k = 0; k < elen; k++) {\r\n          related = related.concat(fn(entities[k]));\r\n        }\r\n        addToGraph(related);\r\n        if (j >= flen - 1) { return; } // no more path segments\r\n\r\n        // reset entities to deduped related entities\r\n        entities = [];\r\n        for (let l = 0, rlen = related.length; l < rlen; l++) {\r\n          let r = related[l];\r\n          if (entities.indexOf(r) < 0) { entities.push(r); }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Make function to get entities along a single expand path segment\r\n  // such as the 'OrderDetails' in the 'Orders.OrderDetails.Product' path\r\n  function makePathSegmentFn(baseType: EntityType, segment: string) {\r\n    let baseTypeName: string, fn = undefined, navType;\r\n    try {\r\n      baseTypeName = baseType.name;\r\n      let nav = baseType.getNavigationProperty(segment);\r\n      let fkName = nav.foreignKeyNames[0];\r\n      if (!nav) {\r\n        throw new Error(segment + \" is not a navigation property of \" + baseTypeName);\r\n      }\r\n      navType = nav.entityType;\r\n      // add derived types\r\n      let navTypes = navType.getSelfAndSubtypes();\r\n      let grps = [] as Array<EntityGroup>; // non-empty groups for these types\r\n      navTypes.forEach(function (t) {\r\n        let grp = entityGroupMap[t.name];\r\n        if (grp && grp._entities.length > 0) {\r\n          grps.push(grp);\r\n        }\r\n      });\r\n      let grpCount = grps.length;\r\n      if (grpCount === 0) {\r\n        // no related entities in cache\r\n        fn = function () { return [] as Array<Entity>; };\r\n      } else if (fkName) {\r\n        fn = function (entity: Entity) {\r\n          let val = null;\r\n          try {\r\n            let keyValue = entity.getProperty(fkName);\r\n            for (let i = 0; i < grpCount; i += 1) {\r\n              val = grps[i]._entities[grps[i]._indexMap[keyValue]];\r\n              if (val) { break; }\r\n            }\r\n          } catch (e) { rethrow(e); }\r\n          return val;\r\n        };\r\n      } else {\r\n        fkName = nav.inverse ?\r\n          nav.inverse.foreignKeyNames[0] :\r\n          nav.invForeignKeyNames[0];\r\n        if (!fkName) { throw new Error(\"No inverse keys\"); }\r\n        fn = function (entity: Entity) {\r\n          let vals = [] as Array<Entity>;\r\n          try {\r\n            let keyValue = entity.entityAspect.getKey().values[0];\r\n            grps.forEach(function (grp) {\r\n              vals = vals.concat(grp._entities.filter(function (en) {\r\n                return en && en.getProperty(fkName) === keyValue;\r\n              }));\r\n            });\r\n          } catch (e) { rethrow(e); }\r\n          return vals;\r\n        };\r\n      }\r\n      (fn as any).navType = navType;\r\n      (fn as any).path = segment;\r\n\r\n    } catch (err) { rethrow(err); }\r\n    return fn;\r\n\r\n    function rethrow(e: Error) {\r\n      let typeName = baseTypeName || baseType;\r\n      let error = new Error(\"'getEntityGraph' can't expand '\" + segment + \"' for \" + typeName);\r\n      (error as any).innerError = e;\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"],"names":["EntityManager","EntityQuery","EntityState","ExpandClause"],"mappings":"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"}