(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('breeze-client')) :
    typeof define === 'function' && define.amd ? define('breeze-client/mixin-save-queuing', ['exports', 'breeze-client'], factory) :
    (global = global || self, factory((global['breeze-client'] = global['breeze-client'] || {}, global['breeze-client']['mixin-save-queuing'] = {}), global['breeze-client']));
}(this, (function (exports, breezeClient) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function enableSaveQueuing(em, enable) {
        if (enable === void 0) { enable = true; }
        var saveQueuing = em['_saveQueueing'] ||
            (em['_saveQueuing'] = new SaveQueuing(em));
        enable = (enable === undefined) ? true : enable;
        saveQueuing._isEnabled = enable;
        if (enable) {
            // delegate to save changes queuing
            em.saveChanges = saveChangesWithQueuing;
        }
        else {
            // revert to the native EntityManager.saveChanges
            em.saveChanges = em['_saveQueuing'].baseSaveChanges;
        }
    }
    /**
     * Replacement for EntityManager.saveChanges
     * This version queues saveChanges calls while a real save is in progress
     **/
    function saveChangesWithQueuing(entities, saveOptions) {
        try {
            // `this` is an EntityManager
            var saveQueuing = this._saveQueuing;
            if (saveQueuing.isSaving) {
                // save in progress; queue the save for later
                return saveQueuing.queueSaveChanges(entities);
            }
            else {
                // note that save is in progress; then save
                saveQueuing.isSaving = true;
                saveQueuing.saveOptions = saveOptions;
                return saveQueuing.saveChanges(entities, saveOptions);
            }
        }
        catch (err) {
            return Promise.reject(err);
        }
    }
    ///////// SaveQueuing /////////
    var SaveQueuing = /** @class */ (function () {
        function SaveQueuing(entityManager) {
            this.entityManager = entityManager;
            this.baseSaveChanges = entityManager.saveChanges;
            this.isSaving = false;
        }
        SaveQueuing.prototype.isEnabled = function () {
            return this._isEnabled;
        };
        SaveQueuing.prototype.getSavedNothingResult = function () {
            return { entities: [], keyMappings: [] };
        };
        SaveQueuing.prototype.queueSaveChanges = function (entities) {
            var self = this; // `this` is a SaveQueuing
            var em = self.entityManager;
            var changes = entities || em.getChanges();
            if (changes.length === 0) {
                return Promise.resolve(this.getSavedNothingResult());
            }
            var valError = em.saveChangesValidateOnClient(changes);
            if (valError) {
                return Promise.reject(valError);
            }
            var saveMemo = self.nextSaveMemo || (self.nextSaveMemo = new SaveMemo());
            memoizeChanges();
            var deferred = self.nextSaveDeferred || (self.nextSaveDeferred = new Deferred());
            return deferred.promise;
            function memoizeChanges() {
                if (changes.length === 0) {
                    return;
                }
                var queuedChanges = saveMemo.queuedChanges;
                changes.forEach(function (e) {
                    if (!e.entityAspect.isBeingSaved && queuedChanges.indexOf(e) === -1) {
                        queuedChanges.push(e);
                    }
                });
                saveMemo.updateEntityMemos(changes);
            }
        };
        SaveQueuing.prototype.saveChanges = function (entities, saveOptions) {
            var self = this; // `this` is a SaveQueuing
            var promise = self.baseSaveChanges.call(self.entityManager, entities, saveOptions || self.saveOptions)
                .then(function (saveResult) { return self.saveSucceeded(saveResult); })
                .then(null, function (error) { console.log(error); return self.saveFailed(error); });
            rememberAddedOriginalValues(entities); // do it after ... so don't send OrigValues to the server
            return promise;
            function rememberAddedOriginalValues(entities) {
                // added entities normally don't have original values but these will now
                var added = entities ?
                    entities.filter(function (e) { return e.entityAspect.entityState.isAdded(); }) :
                    self.entityManager.getEntities(null, breezeClient.EntityState.Added);
                added.forEach(function (entity) {
                    var props = entity.entityType.dataProperties;
                    var originalValues = entity.entityAspect.originalValues;
                    props.forEach(function (dp) {
                        if (dp.isPartOfKey) {
                            return;
                        }
                        originalValues[dp.name] = entity.getProperty(dp.name);
                    });
                });
            }
        };
        SaveQueuing.prototype.saveSucceeded = function (saveResult) {
            var self = this; // `this` is a SaveQueueing
            var activeSaveDeferred = self.activeSaveDeferred;
            var nextSaveDeferred = self.nextSaveDeferred;
            var nextSaveMemo = self.nextSaveMemo;
            // prepare as if nothing queued or left to save
            self.isSaving = false;
            self.activeSaveDeferred = null;
            self.activeSaveMemo = null;
            self.nextSaveDeferred = null;
            self.nextSaveMemo = null;
            if (nextSaveMemo) {
                // a save was queued since last save returned
                nextSaveMemo.pkFixup(saveResult.keyMappings);
                nextSaveMemo.applyToSavedEntities(self.entityManager, saveResult.entities);
                // remove detached entities from queuedChanges
                var queuedChanges = nextSaveMemo.queuedChanges.filter(function (e) {
                    return !e.entityAspect.entityState.isDetached();
                });
                if (queuedChanges.length > 0) {
                    // save again
                    self.isSaving = true;
                    // remember the queued changes that triggered this save
                    self.activeSaveDeferred = nextSaveDeferred;
                    self.activeSaveMemo = nextSaveMemo;
                    self.saveChanges(queuedChanges, this.saveOptions);
                }
                else if (nextSaveDeferred) {
                    nextSaveDeferred.resolve(this.getSavedNothingResult());
                }
            }
            if (activeSaveDeferred) {
                activeSaveDeferred.resolve(saveResult);
            }
            return saveResult; // for the current promise chain
        };
        SaveQueuing.prototype.saveFailed = function (error) {
            var self = this; // `this` is a SaveQueueing
            error = new QueuedSaveFailedError(error, self);
            var activeSaveDeferred = self.activeSaveDeferred;
            var nextSaveDeferred = self.nextSaveDeferred;
            self.isSaving = false;
            self.activeSaveDeferred = null;
            self.activeSaveMemo = null;
            self.nextSaveDeferred = null;
            self.nextSaveMemo = null;
            if (activeSaveDeferred) {
                activeSaveDeferred.reject(error);
            }
            if (nextSaveDeferred) {
                nextSaveDeferred.reject(error);
            }
            return Promise.reject(error); // let promise chain hear error
        };
        return SaveQueuing;
    }());
    /// for backward compat with older Promise implementation
    var Deferred = /** @class */ (function () {
        function Deferred() {
            this.promise = new Promise(function (resolve, reject) {
                this.resolve = resolve;
                this.reject = reject;
            }.bind(this));
        }
        return Deferred;
    }());
    ////////// QueuedSaveFailedError /////////
    // Error sub-class thrown when rejecting queued saves.
    var QueuedSaveFailedError = /** @class */ (function (_super) {
        __extends(QueuedSaveFailedError, _super);
        // Error sub-class thrown when rejecting queued saves.
        // `innerError` is the actual save error
        // `failedSaveMemo` is the saveMemo that prompted this save
        // `nextSaveMemo` holds queued changes accumulated since that save.
        // You may try to recover using this info. Good luck with that.
        function QueuedSaveFailedError(errObject, saveQueuing) {
            var _this = _super.call(this) || this;
            _this.name = "QueuedSaveFailedError";
            _this.innerError = errObject;
            _this.message = "Queued save failed: " + errObject.message;
            _this.failedSaveMemo = saveQueuing.activeSaveMemo;
            _this.nextSaveMemo = saveQueuing.nextSaveMemo;
            return _this;
        }
        return QueuedSaveFailedError;
    }(Error));
    ////////// SaveMemo ////////////////
    // SaveMemo is a record of changes for a queued save, consisting of:
    //   entityMemos:   info about entities that are being saved and
    //                  have been changed since the save started
    //   queuedChanges: entities that are queued for save but
    //                  are not currently being saved
    var SaveMemo = /** @class */ (function () {
        function SaveMemo() {
            this.entityMemos = {};
            this.queuedChanges = [];
        }
        SaveMemo.prototype.applyToSavedEntities = function (entityManager, savedEntities) {
            var _this = this;
            var entityMemos = this.entityMemos; // `this` is a SaveMemo
            var queuedChanges = this.queuedChanges;
            var restorePublishing = this.disableManagerPublishing(entityManager);
            try {
                savedEntities.forEach(function (saved) {
                    var key = _this.makeEntityMemoKey(saved);
                    var entityMemo = entityMemos[key];
                    var resave = entityMemo && entityMemo.applyToSavedEntity(saved);
                    if (resave) {
                        queuedChanges.push(saved);
                    }
                });
            }
            finally {
                restorePublishing();
                // D#2651 hasChanges will be wrong if changes made while save in progress
                var hasChanges = queuedChanges.length > 0;
                // Must use breeze internal method to properly set this flag true
                if (hasChanges) {
                    entityManager._setHasChanges(true);
                }
            }
        };
        SaveMemo.prototype.disableManagerPublishing = function (manager) {
            var Event = breezeClient.breeze.Event;
            Event.enable('entityChanged', manager, false);
            Event.enable('hasChangesChanged', manager, false);
            return function restorePublishing() {
                Event.enable('entityChanged', manager, true);
                Event.enable('hasChangesChanged', manager, true);
            };
        };
        SaveMemo.prototype.pkFixup = function (keyMappings) {
            var entityMemos = this.entityMemos; // `this` is a SaveMemo
            keyMappings.forEach(function (km) {
                var type = km.entityTypeName;
                var tempKey = type + '|' + km.tempValue;
                if (entityMemos[tempKey]) {
                    entityMemos[type + '|' + km.realValue] = entityMemos[tempKey];
                    delete entityMemos[tempKey];
                }
                for (var memoKey in entityMemos) {
                    entityMemos[memoKey].fkFixup(km);
                }
            });
        };
        SaveMemo.prototype.makeEntityMemoKey = function (entity) {
            var entityKey = entity.entityAspect.getKey();
            return entityKey.entityType.name + '|' + entityKey.values;
        };
        SaveMemo.prototype.updateEntityMemos = function (changes) {
            var _this = this;
            var entityMemos = this.entityMemos; // `this` is a SaveMemo
            changes.forEach(function (change) {
                // only update entityMemo for entity being save
                if (!change.entityAspect.isBeingSaved) {
                    return;
                }
                var key = _this.makeEntityMemoKey(change);
                var entityMemo = entityMemos[key] || (entityMemos[key] = new EntityMemo(change));
                entityMemo.update(change);
            });
        };
        return SaveMemo;
    }());
    ///////// EntityMemo Type ///////////////
    // Information about an entity that is being saved
    // and which has been changed since that save started
    var EntityMemo = /** @class */ (function () {
        function EntityMemo(entity) {
            this.entity = entity;
            this.pendingChanges = {};
        }
        EntityMemo.prototype.applyToSavedEntity = function (saved) {
            var entityMemo = this;
            var aspect = saved.entityAspect;
            if (aspect.entityState.isDetached()) {
                return false;
            }
            else if (entityMemo.isDeleted) {
                aspect.setDeleted();
                return true;
            }
            // treat entity with pending changes as modified
            var props = Object.keys(entityMemo.pendingChanges);
            if (props.length === 0) {
                return false;
            }
            var originalValues = aspect.originalValues;
            props.forEach(function (name) {
                originalValues[name] = saved.getProperty(name);
                saved.setProperty(name, entityMemo.pendingChanges[name]);
            });
            aspect.setModified();
            return true;
        };
        EntityMemo.prototype.fkFixup = function (keyMapping) {
            var entityMemo = this;
            var type = entityMemo.entity.entityType;
            var fkProps = type.foreignKeyProperties;
            fkProps.forEach(function (fkProp) {
                if (fkProp.parentType.name === keyMapping.entityTypeName &&
                    entityMemo.pendingChanges[fkProp.name] === keyMapping.tempValue) {
                    entityMemo.pendingChanges[fkProp.name] = keyMapping.realValue;
                }
            });
        };
        // update the entityMemo of changes to an entity being saved
        // so that we know how to save it again later
        EntityMemo.prototype.update = function () {
            var entityMemo = this;
            var props;
            var entity = entityMemo.entity;
            var aspect = entity.entityAspect;
            var stateName = aspect.entityState.name;
            switch (stateName) {
                case 'Added':
                    var originalValues_1 = aspect.originalValues;
                    props = entity.entityType.dataProperties;
                    props.forEach(function (dp) {
                        if (dp.isPartOfKey) {
                            return;
                        }
                        var name = dp.name;
                        var value = entity.getProperty(name);
                        if (originalValues_1[name] !== value) {
                            entityMemo.pendingChanges[name] = value;
                        }
                    });
                    break;
                case 'Deleted':
                    entityMemo.isDeleted = true;
                    entityMemo.pendingChanges = {};
                    break;
                case 'Modified':
                    props = Object.keys(aspect.originalValues);
                    props.forEach(function (name) {
                        entityMemo.pendingChanges[name] = entity.getProperty(name);
                    });
                    break;
            }
        };
        return EntityMemo;
    }());

    exports.enableSaveQueuing = enableSaveQueuing;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=breeze-client-mixin-save-queuing.umd.js.map
