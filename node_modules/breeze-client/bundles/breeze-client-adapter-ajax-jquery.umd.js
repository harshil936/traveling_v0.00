(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('breeze-client')) :
    typeof define === 'function' && define.amd ? define('breeze-client/adapter-ajax-jquery', ['exports', 'breeze-client'], factory) :
    (global = global || self, factory((global['breeze-client'] = global['breeze-client'] || {}, global['breeze-client']['adapter-ajax-jquery'] = {}), global['breeze-client']));
}(this, (function (exports, breezeClient) { 'use strict';

    var core = breezeClient.core;
    var AjaxJQueryAdapter = /** @class */ (function () {
        function AjaxJQueryAdapter() {
            this.name = "jQuery";
            this.defaultSettings = {};
            this.requestInterceptor = undefined;
        }
        AjaxJQueryAdapter.register = function (config$1) {
            config$1 = config$1 || breezeClient.config;
            config$1.registerAdapter("ajax", AjaxJQueryAdapter);
            return config$1.initializeAdapterInstance("ajax", "jQuery", true);
        };
        AjaxJQueryAdapter.prototype.initialize = function () {
            this.jQuery = jQuery;
            // look for the jQuery lib but don't fail immediately if not found
            if (!jQuery) {
                this.jQuery = core.requireLib("jQuery;jquery");
            }
        };
        AjaxJQueryAdapter.prototype.ajax = function (config) {
            if (!this.jQuery) {
                throw new Error("Unable to locate jQuery");
            }
            var jqConfig = {
                type: config.type,
                url: config.url,
                data: config.params || config.data,
                dataType: config.dataType,
                contentType: config.contentType,
                crossDomain: config.crossDomain,
                headers: config.headers || {}
            };
            if (!core.isEmpty(this.defaultSettings)) {
                var compositeConfig = core.extend({}, this.defaultSettings);
                jqConfig = core.extend(compositeConfig, jqConfig);
                // extend is shallow; extend headers separately
                var headers = core.extend({}, this.defaultSettings.headers); // copy default headers 1st
                jqConfig.headers = core.extend(headers, jqConfig.headers);
            }
            var requestInfo = {
                adapter: this,
                config: jqConfig,
                dsaConfig: config,
                success: successFn,
                error: errorFn,
            };
            if (core.isFunction(this.requestInterceptor)) {
                var ri = this.requestInterceptor;
                ri(requestInfo);
                if (ri.oneTime) {
                    this.requestInterceptor = undefined;
                }
            }
            if (requestInfo.config) { // exists unless requestInterceptor killed it.
                requestInfo.jqXHR = this.jQuery.ajax(requestInfo.config)
                    .done(requestInfo.success)
                    .fail(requestInfo.error);
            }
            function successFn(data, statusText, jqXHR) {
                var httpResponse = {
                    config: config,
                    data: data,
                    getHeaders: getHeadersFn(jqXHR),
                    status: jqXHR.status,
                    statusText: statusText
                };
                config.success(httpResponse);
                // TODO: not sure how to do this or if needed.
                // jqXHR.onreadystatechange = null;
                // jqXHR.abort = null;
            }
            function errorFn(jqXHR, statusText, errorThrown) {
                var httpResponse = {
                    config: config,
                    data: jqXHR.responseText,
                    error: errorThrown,
                    getHeaders: getHeadersFn(jqXHR),
                    status: jqXHR.status,
                    statusText: statusText
                };
                config.error(httpResponse);
                // TODO: not sure how to do this or if needed.
                // jqXHR.onreadystatechange = null;
                // jqXHR.abort = null;
            }
        };
        return AjaxJQueryAdapter;
    }());
    breezeClient.config.registerAdapter("ajax", AjaxJQueryAdapter);
    function getHeadersFn(jqXHR) {
        if (jqXHR.status === 0) { // timeout or abort; no headers
            return function (headerName) {
                return (headerName && headerName.length > 0) ? "" : {};
            };
        }
        else { // jqXHR should have header functions
            return function (headerName) {
                return (headerName && headerName.length > 0) ?
                    jqXHR.getResponseHeader(headerName) :
                    jqXHR.getAllResponseHeaders();
            };
        }
    }

    exports.AjaxJQueryAdapter = AjaxJQueryAdapter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=breeze-client-adapter-ajax-jquery.umd.js.map
