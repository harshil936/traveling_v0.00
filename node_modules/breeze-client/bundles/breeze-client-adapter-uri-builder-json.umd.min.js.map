{"version":3,"sources":["ng://breeze-client/adapter-uri-builder-json/adapter-uri-builder-json.ts"],"names":["UriBuilderJsonAdapter","this","name","register","config","breeze.config","registerAdapter","initializeAdapterInstance","prototype","initialize","buildUri","entityQuery","metadataStore","entityType","_getFromEntityType","breeze.EntityType","json","toJSONExt","toNameOnServer","from","undefined","queryOptions","parameters","$data","jsonString","JSON","stringify","length","urlBody","encodeURIComponent","sep","resourceName","includes"],"mappings":"8YAKE,SAAAA,IACEC,KAAKC,KAAO,OAkChB,OA/BSF,EAAAG,SAAP,SAAgBC,GAGd,OAFAA,EAASA,GAAUC,EAAAA,QACZC,gBAAgB,aAAcN,GAC9BI,EAAOG,0BAA0B,aAAc,QAAQ,IAGhEP,EAAAQ,UAAAC,WAAA,aAEAT,EAAAQ,UAAAE,SAAA,SAASC,EAAiCC,GAExC,IAAIC,EAAaF,EAAYG,mBAAmBF,GAAe,GAC1DC,IAAYA,EAAa,IAAIE,EAAAA,WAAkBH,IACpD,IAAII,EAAOL,EAAYM,UAAW,CAAEJ,WAAYA,EAAYK,gBAAgB,IAC5EF,EAAKG,UAAOC,EACZJ,EAAKK,kBAAeD,EAChBJ,EAAKM,YAAcN,EAAKM,WAAWC,QAErCP,EAAKM,gBAAaF,GAGpB,IAAII,EAAaC,KAAKC,UAAUV,GAChC,GAAIQ,EAAWG,OAAS,EAAG,CACzB,IAAIC,EAAUC,mBAAmBL,GAC7BM,EAAMnB,EAAYoB,aAAaC,SAAS,KAAO,IAAM,IACzD,OAAOrB,EAAYoB,aAAeD,EAAMF,EAExC,OAAOjB,EAAYoB,cAKzB/B,KAEAK,EAAAA,OAAcC,gBAAgB,aAAcN","sourcesContent":["import * as breeze from 'breeze-client';\r\n\r\nexport class UriBuilderJsonAdapter implements breeze.UriBuilderAdapter {\r\n  name: string;\r\n\r\n  constructor() {\r\n    this.name = \"json\";\r\n  }\r\n\r\n  static register(config?: breeze.BreezeConfig) {\r\n    config = config || breeze.config;\r\n    config.registerAdapter(\"uriBuilder\", UriBuilderJsonAdapter);\r\n    return config.initializeAdapterInstance(\"uriBuilder\", \"json\", true) as UriBuilderJsonAdapter;\r\n  }\r\n\r\n  initialize() {}\r\n\r\n  buildUri(entityQuery: breeze.EntityQuery, metadataStore: breeze.MetadataStore) {\r\n    // force entityType validation;\r\n    let entityType = entityQuery._getFromEntityType(metadataStore, false);\r\n    if (!entityType) entityType = new breeze.EntityType(metadataStore);\r\n    let json = entityQuery.toJSONExt( { entityType: entityType, toNameOnServer: true}) as any;\r\n    json.from = undefined;\r\n    json.queryOptions = undefined;\r\n    if (json.parameters && json.parameters.$data) {\r\n      // remove parameters if doing ajax post\r\n      json.parameters = undefined;\r\n    }\r\n\r\n    let jsonString = JSON.stringify(json);\r\n    if (jsonString.length > 2) {\r\n      let urlBody = encodeURIComponent(jsonString);\r\n      let sep = entityQuery.resourceName.includes(\"?\") ? \"&\" : \"?\";\r\n      return entityQuery.resourceName + sep + urlBody;\r\n    } else {\r\n      return entityQuery.resourceName;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nbreeze.config.registerAdapter(\"uriBuilder\", UriBuilderJsonAdapter);\r\n\r\n\r\n\r\n"]}