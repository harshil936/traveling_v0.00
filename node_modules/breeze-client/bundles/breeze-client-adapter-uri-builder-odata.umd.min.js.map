{"version":3,"sources":["ng://breeze-client/adapter-uri-builder-odata/adapter-uri-builder-odata.ts"],"names":["UriBuilderODataAdapter","this","name","register","config","breeze.config","registerAdapter","initializeAdapterInstance","prototype","initialize","buildUri","entityQuery","metadataStore","entityType","_getFromEntityType","breeze.EntityType","orderByClause","expandClause","selectClause","queryOptions","wherePredicate","frag","visit","toODataFragmentVisitor","length","undefined","toWhereODataFragment","validate","items","map","item","clientPropertyPathToServer","propertyPath","isDesc","join","skipCount","takeCount","propertyPaths","pp","inlineCountEnabled","qoText","qoStrings","qoName","qoValue","Array","forEach","qov","push","encodeURIComponent","toQueryOptionsString","sep","resourceName","includes","breeze.Predicate","toODataFragment","context","value","ɵ1","predVal","pred","odataOpFrom","ɵ2","expr1Val","expr1","expr2Val","expr2","prefix","odataOp","op","key","v","isFunction","ɵ3","preds","ɵ4","exprVal","expr","parseInt","substring","newContext","breeze.core","extend","dataType","newPredVal","ɵ5","isArray","fmtOData","ɵ6","ɵ7","exprVals","exprs","fnName","passthruPredicate","ɵ0","unaryPredicate","binaryPredicate","andOrPredicate","anyAllPredicate","litExpr","propExpr","fnExpr","_operatorMap","contains","node"],"mappings":"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","sourcesContent":["import * as breeze from 'breeze-client';\r\n\r\nexport class UriBuilderODataAdapter implements breeze.UriBuilderAdapter {\r\n\r\n  name: string;\r\n\r\n  constructor() {\r\n    this.name = \"odata\";\r\n  }\r\n\r\n  static register(config?: breeze.BreezeConfig) {\r\n    config = config || breeze.config;\r\n    config.registerAdapter(\"uriBuilder\", UriBuilderODataAdapter);\r\n    return config.initializeAdapterInstance(\"uriBuilder\", \"odata\", true) as UriBuilderODataAdapter;\r\n  }\r\n\r\n  initialize() { }\r\n\r\n  buildUri(entityQuery: breeze.EntityQuery, metadataStore: breeze.MetadataStore) {\r\n    // force entityType validation;\r\n    let entityType = entityQuery._getFromEntityType(metadataStore, false);\r\n    if (!entityType) {\r\n      // anonymous type but still has naming convention info avail\r\n      entityType = new breeze.EntityType(metadataStore);\r\n    }\r\n\r\n    let queryOptions = {};\r\n    queryOptions[\"$filter\"] = toWhereODataFragment(entityQuery.wherePredicate);\r\n    queryOptions[\"$orderby\"] = toOrderByODataFragment(entityQuery.orderByClause!);\r\n\r\n    if (entityQuery.skipCount) {\r\n      queryOptions[\"$skip\"] = entityQuery.skipCount;\r\n    }\r\n\r\n    if (entityQuery.takeCount != null) {\r\n      queryOptions[\"$top\"] = entityQuery.takeCount;\r\n    }\r\n\r\n    queryOptions[\"$expand\"] = toExpandODataFragment(entityQuery.expandClause);\r\n    queryOptions[\"$select\"] = toSelectODataFragment(entityQuery.selectClause!);\r\n\r\n    if (entityQuery.inlineCountEnabled) {\r\n      queryOptions[\"$inlinecount\"] = \"allpages\";\r\n    }\r\n\r\n    let qoText = toQueryOptionsString(queryOptions as breeze.QueryOptions);\r\n    let sep = entityQuery.resourceName.includes(\"?\") ? \"&\" : \"?\";\r\n    return entityQuery.resourceName + sep + qoText;\r\n\r\n    // private methods to this func.\r\n\r\n    function toWhereODataFragment(wherePredicate: breeze.Predicate) {\r\n      if (!wherePredicate) return undefined;\r\n      // validation occurs inside of the toODataFragment call here.\r\n      let frag = wherePredicate.visit({ entityType: entityType }, toODataFragmentVisitor);\r\n      return (frag && frag.length > 0) ? frag : undefined;\r\n    }\r\n\r\n    function toOrderByODataFragment(orderByClause: breeze.OrderByClause) {\r\n      if (!orderByClause) return undefined;\r\n      orderByClause.validate(entityType!);\r\n      let strings = orderByClause.items.map(function (item) {\r\n        return entityType!.clientPropertyPathToServer(item.propertyPath, \"/\") + (item.isDesc ? \" desc\" : \"\");\r\n      });\r\n      // should return something like CompanyName,Address/City desc\r\n      return strings.join(',');\r\n    }\r\n\r\n    function toSelectODataFragment(selectClause?: breeze.SelectClause) {\r\n      if (!selectClause) return undefined;\r\n      selectClause.validate(entityType!);\r\n      let frag = selectClause.propertyPaths.map(function (pp) {\r\n        return entityType!.clientPropertyPathToServer(pp, \"/\");\r\n      }).join(\",\");\r\n      return frag;\r\n    }\r\n\r\n    function toExpandODataFragment(expandClause?: breeze.ExpandClause) {\r\n      if (!expandClause) return undefined;\r\n      // no validate on expand clauses currently.\r\n      // expandClause.validate(entityType);\r\n      let frag = expandClause.propertyPaths.map(function (pp) {\r\n        return entityType!.clientPropertyPathToServer(pp, \"/\");\r\n      }).join(\",\");\r\n      return frag;\r\n    }\r\n\r\n    function toQueryOptionsString(queryOptions: breeze.QueryOptions) {\r\n      let qoStrings: string[] = [];\r\n      for (let qoName in queryOptions) {\r\n        let qoValue = queryOptions[qoName];\r\n        if (qoValue !== undefined) {\r\n          if (qoValue instanceof Array) {\r\n            qoValue.forEach(function (qov) {\r\n              qoStrings.push(qoName + \"=\" + encodeURIComponent(qov));\r\n            });\r\n          } else {\r\n            qoStrings.push(qoName + \"=\" + encodeURIComponent(qoValue));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (qoStrings.length > 0) {\r\n        return qoStrings.join(\"&\");\r\n      } else {\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n}\r\n\r\n(breeze.Predicate.prototype as any).toODataFragment = function (context: breeze.VisitContext) {\r\n  return this.visit(context, toODataFragmentVisitor);\r\n};\r\n\r\nlet toODataFragmentVisitor = {\r\n\r\n  passthruPredicate: function () {\r\n    return this.value;\r\n  },\r\n\r\n  unaryPredicate: function (this: breeze.UnaryPredicate, context: breeze.VisitContext) {\r\n    let predVal = this.pred.visit(context);\r\n    return odataOpFrom(this) + \" \" + \"(\" + predVal + \")\";\r\n  },\r\n\r\n  binaryPredicate: function (this: breeze.BinaryPredicate, context: breeze.VisitContext) {\r\n    let expr1Val = this.expr1!.visit(context);\r\n    let expr2Val = this.expr2!.visit(context);\r\n    let prefix = (context as any).prefix;\r\n    if (prefix) {\r\n      expr1Val = prefix + \"/\" + expr1Val;\r\n    }\r\n\r\n    let odataOp = odataOpFrom(this);\r\n\r\n    if (this.op.key === 'in') {\r\n      let result = expr2Val.map(function (v: any) {\r\n        return \"(\" + expr1Val + \" eq \" + v + \")\";\r\n      }).join(\" or \");\r\n      return result;\r\n    } else if (this.op.isFunction) {\r\n      if (odataOp === \"substringof\") {\r\n        return odataOp + \"(\" + expr2Val + \",\" + expr1Val + \") eq true\";\r\n      } else {\r\n        return odataOp + \"(\" + expr1Val + \",\" + expr2Val + \") eq true\";\r\n      }\r\n    } else {\r\n      return expr1Val + \" \" + odataOp + \" \" + expr2Val;\r\n    }\r\n  },\r\n\r\n  andOrPredicate: function (this: breeze.AndOrPredicate, context: breeze.VisitContext) {\r\n    let result = this.preds.map(function (pred) {\r\n      let predVal = pred.visit(context);\r\n      return \"(\" + predVal + \")\";\r\n    }).join(\" \" + odataOpFrom(this) + \" \");\r\n    return result;\r\n  },\r\n\r\n  anyAllPredicate: function (this: breeze.AnyAllPredicate, context: breeze.VisitContext) {\r\n    let exprVal = this.expr.visit(context);\r\n    if (!this.pred.op) { // added 21-Oct-2016 to fix breeze.js issue #172\r\n      return exprVal + \"/\" + odataOpFrom(this) + \"()\";\r\n    }\r\n    let prefix = (context as any).prefix;\r\n    if (prefix) {\r\n      exprVal = prefix + \"/\" + exprVal;\r\n      prefix = \"x\" + (parseInt(prefix.substring(1)) + 1);\r\n    } else {\r\n      prefix = \"x1\";\r\n    }\r\n    // need to create a new context because of 'prefix'\r\n    let newContext = breeze.core.extend({}, context) as any;\r\n    newContext.entityType = this.expr.dataType;\r\n    newContext.prefix = prefix;\r\n    let newPredVal = this.pred.visit(newContext);\r\n    return exprVal + \"/\" + odataOpFrom(this) + \"(\" + prefix + \": \" + newPredVal + \")\";\r\n  },\r\n\r\n  litExpr: function () {\r\n    if (Array.isArray(this.value)) {\r\n      return this.value.map(function (v: any) { return this.dataType.fmtOData(v); }, this);\r\n    } else {\r\n      return this.dataType.fmtOData(this.value);\r\n    }\r\n  },\r\n\r\n  propExpr: function (this: breeze.PropExpr, context: breeze.ExpressionContext) {\r\n    let entityType = context.entityType;\r\n    // '/' is the OData path delimiter\r\n    return entityType ? entityType.clientPropertyPathToServer(this.propertyPath, \"/\") : this.propertyPath;\r\n  },\r\n\r\n  fnExpr: function (this: breeze.FnExpr, context: breeze.ExpressionContext) {\r\n    let exprVals = this.exprs.map(function (expr) {\r\n      return expr.visit(context);\r\n    });\r\n    return this.fnName + \"(\" + exprVals.join(\",\") + \")\";\r\n  }\r\n};\r\n\r\nlet _operatorMap = {\r\n  'contains': 'substringof'\r\n};\r\n\r\nfunction odataOpFrom(node: any) {\r\n  let op = node.op.key;\r\n  let odataOp = _operatorMap[op];\r\n  return odataOp || op;\r\n}\r\n\r\nbreeze.config.registerAdapter(\"uriBuilder\", UriBuilderODataAdapter);\r\n\r\n\r\n\r\n"]}