{"version":3,"sources":["ng://breeze-client/mixin-get-entity-graph/mixin-get-entity-graph.ts"],"names":["mixinEntityGraph","emclass","proto","EntityManager","prototype","getEntityGraph","roots","expand","EntityQuery","getEntityGraphCore","this","executeQueryLocally","expandClause","root","entityGroupMap","rootType","graph","Array","isArray","addToGraph","slice","length","compatTypes","getRootErr","ix","msg","Error","forEach","aspect","entityAspect","entityState","EntityState","Detached","em","entityManager","_entityGroupMap","thisType","entityType","baseType","getSelfAndSubtypes","indexOf","baseEntityType","getRootType","getRootInfo","ExpandClause","propertyPaths","every","elem","_","getExpand","map","makePathFn","fn","buildGraph","entities","entity","push","path","fns","segments","split","type","i","slen","f","makePathSegmentFn","navType","j","flen","elen","related","k","concat","l","rlen","r","segment","baseTypeName","undefined","name","nav","getNavigationProperty","fkName_1","foreignKeyNames","navTypes","grps_1","t","grp","_entities","grpCount_1","val","keyValue","getProperty","_indexMap","e","rethrow","inverse","invForeignKeyNames","vals","keyValue_1","getKey","values","filter","en","err","error","innerError"],"mappings":"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","sourcesContent":["//#region Copyright, Version, and Description\r\n/*\r\n * Copyright 2015-2019 IdeaBlade, Inc.  All Rights Reserved.\r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\r\n * conditions of the IdeaBlade Breeze license, available at http://www.breezejs.com/license\r\n *\r\n * Author: Ward Bell\r\n * Version: 0.9.5 - Steve Schmitt - convert to TypeScript, migrate to breeze-client repo, add HasEntityGraph and mixinEntityGraph\r\n * Version: 0.9.4 - Marcel Good - fix UMD module name\r\n * --------------------------------------------------------------------------------\r\n * Adds getEntityGraph method to Breeze EntityManager prototype.\r\n * Call   mixinEntityGraph(EntityManager)   to apply the mixin in a tree-shaking-resistant way.\r\n * Then   (manager as any).getEntityGraph(entity, \"child\");\r\n *\r\n * Depends on Breeze which it patches\r\n *\r\n * For discussion, see:\r\n * http://www.breezejs.com/documentation/getentitygraph\r\n *\r\n * For example usage, see:\r\n * https://github.com/Breeze/breeze.js.samples/tree/master/net/DocCode/DocCode/tests/getEntityGraphTests.js\r\n */\r\n//#endregion\r\nimport { Entity, EntityManager, EntityQuery, EntityState, EntityType, ExpandClause } from 'breeze-client';\r\n\r\ninterface EntityGroup {\r\n  _entities: (Entity | null)[];\r\n  _indexMap: { [index: string]: number };\r\n}\r\n\r\n// module augmentation failed to build with ng-packagr, so we have a separate interface\r\nexport interface HasEntityGraph extends EntityManager {\r\n  /**\r\n  Get related entities of root entity (or root entities) as specified by expand.\r\n  @example\r\n      var graph = breeze.EntityManager.getEntityGraph(customer, 'Orders.OrderDetails');\r\n      // graph will be the customer, all of its orders and their details even if deleted.\r\n  @method getEntityGraph\r\n  @param roots {Entity|Array of Entity} The root entity or root entities.\r\n  @param expand {String|Array of String|Object} an expand string, a query expand clause, or array of string paths\r\n  @return {Array of Entity} root entities and their related entities, including deleted entities. Duplicates are removed and entity order is indeterminate.\r\n  **/\r\n  getEntityGraph(roots: Entity | Array<Entity>, expand: string | Array<string> | ExpandClause): Array<Entity>;\r\n\r\n  /**\r\n  Execute query locally and return both the query results and their related entities as specified by the optional expand parameter or the query's expand clause.\r\n  @example\r\n      var query = breeze.EntityQuery.from('Customers')\r\n                  .where('CompanyName', 'startsWith', 'Alfred')\r\n                  .expand('Orders.OrderDetails');\r\n      var graph = manager.getEntityGraph(query);\r\n      // graph will be the 'Alfred' customers, their orders and their details even if deleted.\r\n  @method getEntityGraph\r\n  @param query {EntityQuery} A query to be executed against the manager's local cache.\r\n  @param [expand] {String|Array of String|Object} an expand string, a query expand clause, or array of string paths\r\n  @return {Array of Entity} local queried root entities and their related entities, including deleted entities. Duplicates are removed and entity order is indeterminate.\r\n  **/\r\n  getEntityGraph(query: EntityQuery, expand: string | Array<string> | ExpandClause): Array<Entity>;\r\n\r\n}\r\n\r\nexport function mixinEntityGraph(emclass: { new(): EntityManager }) {\r\n  const proto = EntityManager.prototype;\r\n\r\n  if (!(proto as any).getEntityGraph) {\r\n    (proto as any).getEntityGraph = getEntityGraph;\r\n  }\r\n}\r\n\r\nmixinEntityGraph(EntityManager);\r\n\r\n\r\nfunction getEntityGraph(roots: Entity | Array<Entity> | EntityQuery, expand: string | Array<string> | ExpandClause) {\r\n  if (roots instanceof EntityQuery) {\r\n    let newRoots = this.executeQueryLocally(roots);\r\n    return getEntityGraphCore(newRoots, expand || roots.expandClause);\r\n  } else {\r\n    return getEntityGraphCore(roots, expand);\r\n  }\r\n}\r\n\r\nfunction getEntityGraphCore(root: Entity | Array<Entity>, expand: string | Array<string> | ExpandClause) {\r\n  let entityGroupMap: { [index: string]: EntityGroup };\r\n  let graph = [] as Array<Entity>;\r\n  let rootType: EntityType;\r\n  let roots = Array.isArray(root) ? root : [root];\r\n  addToGraph(roots);     // removes dups & nulls\r\n  roots = graph.slice(); // copy of de-duped roots\r\n  if (roots.length) {\r\n    getRootInfo();\r\n    getExpand();\r\n    buildGraph();\r\n  }\r\n  return graph;\r\n\r\n  function addToGraph(entities: Array<Entity>) {\r\n    entities.forEach(function (entity) {\r\n      if (entity && graph.indexOf(entity) < 0) {\r\n        graph.push(entity);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getRootInfo() {\r\n    let compatTypes: Array<EntityType>;\r\n\r\n    roots.forEach(function (root, ix) {\r\n      let aspect;\r\n      if (!root || !(aspect = root.entityAspect)) {\r\n        throw getRootErr(ix, 'is not an entity');\r\n      }\r\n      if (aspect.entityState === EntityState.Detached) {\r\n        throw getRootErr(ix, 'is a detached entity');\r\n      }\r\n\r\n      let em = aspect.entityManager;\r\n      if (entityGroupMap) {\r\n        if (entityGroupMap !== em._entityGroupMap) {\r\n          throw getRootErr(ix, \"has a different 'EntityManager' than other roots\");\r\n        }\r\n      } else {\r\n        entityGroupMap = em._entityGroupMap;\r\n      }\r\n      getRootType(root, ix);\r\n\r\n    });\r\n\r\n    function getRootErr(ix: number, msg: string) {\r\n      return new Error(\"'getEntityGraph' root[\" + ix + \"] \" + msg);\r\n    }\r\n\r\n    function getRootType(root: Entity, ix: number) {\r\n      let thisType = root.entityType;\r\n      if (!rootType) {\r\n        rootType = thisType;\r\n        return;\r\n      } else if (rootType === thisType) {\r\n        return;\r\n      }\r\n      // Types differs. Look for closest common base type\r\n      // does thisType derive from current rootType?\r\n      let baseType = rootType;\r\n      do {\r\n        compatTypes = compatTypes || baseType.getSelfAndSubtypes();\r\n        if (compatTypes.indexOf(thisType) > -1) {\r\n          rootType = baseType;\r\n          return;\r\n        }\r\n        baseType = baseType.baseEntityType;\r\n        compatTypes = null;\r\n      } while (baseType);\r\n\r\n      // does current rootType derives from thisType?\r\n      baseType = thisType;\r\n      do {\r\n        compatTypes = baseType.getSelfAndSubtypes();\r\n        if (compatTypes.indexOf(rootType) > -1) {\r\n          rootType = baseType;\r\n          return;\r\n        }\r\n        baseType = baseType.baseEntityType;\r\n      } while (baseType);\r\n\r\n      throw getRootErr(ix, \"is not EntityType-compatible with other roots\");\r\n    }\r\n  }\r\n\r\n  function getExpand() {\r\n    try {\r\n      if (!expand) {\r\n        expand = [];\r\n      } else if (typeof expand === 'string') {\r\n        // tricky because Breeze expandClause not exposed publically\r\n        expand = new EntityQuery().expand(expand).expandClause;\r\n      }\r\n      if (expand instanceof ExpandClause && expand.propertyPaths) { // expand clause\r\n        expand = expand.propertyPaths;\r\n      } else if (Array.isArray(expand)) {\r\n        if (!expand.every(function (elem) { return typeof elem === 'string'; })) {\r\n          throw '';\r\n        }\r\n      } else {\r\n        throw '';\r\n      }\r\n    } catch (_) {\r\n      throw new Error(\r\n        \"expand must be an expand string, array of string paths, or a query expand clause\");\r\n    }\r\n  }\r\n\r\n  function buildGraph() {\r\n    if (expand && expand instanceof Array && expand.length) {\r\n      let fns = expand.map(makePathFn);\r\n      fns.forEach(function (fn) { fn(roots); });\r\n    }\r\n  }\r\n\r\n  // Make function to get entities along a single expand path\r\n  // such as 'Orders.OrderDetails.Product'\r\n  function makePathFn(path: string) {\r\n    let fns = [] as Array<Function>,\r\n      segments = path.split('.'),\r\n      type = rootType;\r\n\r\n    for (let i = 0, slen = segments.length; i < slen; i++) {\r\n      let f = makePathSegmentFn(type, segments[i]);\r\n      type = (f as any).navType;\r\n      fns.push(f);\r\n    }\r\n\r\n    return function pathFn(entities: Array<Entity>) {\r\n      for (let j = 0, flen = fns.length; j < flen; j++) {\r\n        let elen = entities.length;\r\n        if (elen === 0) { return; } // nothing left to explore\r\n        // fn to get related entities for this path segment\r\n        let fn = fns[j];\r\n        // get entities related by this path segment\r\n        let related = [] as Array<Entity>;\r\n        for (let k = 0; k < elen; k++) {\r\n          related = related.concat(fn(entities[k]));\r\n        }\r\n        addToGraph(related);\r\n        if (j >= flen - 1) { return; } // no more path segments\r\n\r\n        // reset entities to deduped related entities\r\n        entities = [];\r\n        for (let l = 0, rlen = related.length; l < rlen; l++) {\r\n          let r = related[l];\r\n          if (entities.indexOf(r) < 0) { entities.push(r); }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  // Make function to get entities along a single expand path segment\r\n  // such as the 'OrderDetails' in the 'Orders.OrderDetails.Product' path\r\n  function makePathSegmentFn(baseType: EntityType, segment: string) {\r\n    let baseTypeName: string, fn = undefined, navType;\r\n    try {\r\n      baseTypeName = baseType.name;\r\n      let nav = baseType.getNavigationProperty(segment);\r\n      let fkName = nav.foreignKeyNames[0];\r\n      if (!nav) {\r\n        throw new Error(segment + \" is not a navigation property of \" + baseTypeName);\r\n      }\r\n      navType = nav.entityType;\r\n      // add derived types\r\n      let navTypes = navType.getSelfAndSubtypes();\r\n      let grps = [] as Array<EntityGroup>; // non-empty groups for these types\r\n      navTypes.forEach(function (t) {\r\n        let grp = entityGroupMap[t.name];\r\n        if (grp && grp._entities.length > 0) {\r\n          grps.push(grp);\r\n        }\r\n      });\r\n      let grpCount = grps.length;\r\n      if (grpCount === 0) {\r\n        // no related entities in cache\r\n        fn = function () { return [] as Array<Entity>; };\r\n      } else if (fkName) {\r\n        fn = function (entity: Entity) {\r\n          let val = null;\r\n          try {\r\n            let keyValue = entity.getProperty(fkName);\r\n            for (let i = 0; i < grpCount; i += 1) {\r\n              val = grps[i]._entities[grps[i]._indexMap[keyValue]];\r\n              if (val) { break; }\r\n            }\r\n          } catch (e) { rethrow(e); }\r\n          return val;\r\n        };\r\n      } else {\r\n        fkName = nav.inverse ?\r\n          nav.inverse.foreignKeyNames[0] :\r\n          nav.invForeignKeyNames[0];\r\n        if (!fkName) { throw new Error(\"No inverse keys\"); }\r\n        fn = function (entity: Entity) {\r\n          let vals = [] as Array<Entity>;\r\n          try {\r\n            let keyValue = entity.entityAspect.getKey().values[0];\r\n            grps.forEach(function (grp) {\r\n              vals = vals.concat(grp._entities.filter(function (en) {\r\n                return en && en.getProperty(fkName) === keyValue;\r\n              }));\r\n            });\r\n          } catch (e) { rethrow(e); }\r\n          return vals;\r\n        };\r\n      }\r\n      (fn as any).navType = navType;\r\n      (fn as any).path = segment;\r\n\r\n    } catch (err) { rethrow(err); }\r\n    return fn;\r\n\r\n    function rethrow(e: Error) {\r\n      let typeName = baseTypeName || baseType;\r\n      let error = new Error(\"'getEntityGraph' can't expand '\" + segment + \"' for \" + typeName);\r\n      (error as any).innerError = e;\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n"]}