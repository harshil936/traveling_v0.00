{"version":3,"sources":["ng://breeze-client/adapter-ajax-fetch/adapter-ajax-fetch.ts"],"names":["core","breeze.core","AjaxFetchAdapter","this","name","adapterName","defaultSettings","requestInterceptor","undefined","register","config","breeze.config","registerAdapter","initializeAdapterInstance","prototype","initialize","ajax","fetch","Error","init","method","type","mode","cache","credentials","headers","Content-Type","contentType","redirect","referrer","data","JSON","stringify","body","url","isEmpty","params","delim","indexOf","encodeParams","obj","subValue","innerObj","query","name_1","hasOwnProperty","value","Array","i","length","toISOString","encodeURIComponent","Object","subName","substr","compositeConfig","extend","requestInfo","adapter","dsaConfig","success","statusText","response","httpResponse","getHeaders","getHeadersFn","status","error","errorThrown","isFunction","ri","oneTime","then","ok","json","j","text","s","catch","err","message","headerName","get","hob","forEach","val","key"],"mappings":"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","sourcesContent":["import * as breeze from 'breeze-client';\r\n\r\nlet core = breeze.core;\r\n\r\n/** Breeze AJAX adapter using fetch API \r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\r\n*/\r\nexport class AjaxFetchAdapter implements breeze.AjaxAdapter {\r\n  static adapterName = \"fetch\";\r\n  name: string;\r\n  defaultSettings: { headers?: any };\r\n  requestInterceptor?: (() => breeze.ChangeRequestInterceptor) | breeze.ChangeRequestInterceptor;\r\n\r\n  constructor() {\r\n    this.name = AjaxFetchAdapter.adapterName;\r\n    this.defaultSettings = { };\r\n    this.requestInterceptor = undefined;\r\n  }\r\n\r\n  static register(config?: breeze.BreezeConfig) {\r\n    config = config || breeze.config;\r\n    config.registerAdapter(\"ajax\", AjaxFetchAdapter);\r\n    return config.initializeAdapterInstance(\"ajax\", AjaxFetchAdapter.adapterName, true) as AjaxFetchAdapter;\r\n  }\r\n\r\n  initialize() {\r\n  }\r\n\r\n  ajax(config: breeze.AjaxConfig) {\r\n    if (!fetch) {\r\n      throw new Error(\"fetch API not supported in this browser\");\r\n    }\r\n\r\n    let init: RequestInit = {\r\n      method: config.type, // *GET, POST, PUT, DELETE, etc.\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'include', // include, *same-origin, omit\r\n      headers: {\r\n        'Content-Type': config.contentType || 'application/json',\r\n        // ...config.headers\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrer: 'client', // no-referrer, *client\r\n    };\r\n    if (config.type !== \"GET\" && config.type !== \"HEAD\") {\r\n      // body data type must match \"Content-Type\" header\r\n      // let data = config.params || config.data;\r\n      let data = config.data;\r\n      if (typeof(data) !== \"string\") {\r\n        data = JSON.stringify(data);\r\n      }\r\n      init.body = data;\r\n    }\r\n\r\n    let url = config.url;\r\n    if (!core.isEmpty(config.params)) {\r\n      // Hack: Not sure how Fetch handles writing 'search' parameters to the url.\r\n      // so this approach takes over the url param writing completely.\r\n      let delim = (url.indexOf('?') >= 0) ? '&' : '?';\r\n      url = url + delim + encodeParams(config.params);\r\n    }\r\n\r\n    if (!core.isEmpty(this.defaultSettings)) {\r\n      let compositeConfig = core.extend({}, this.defaultSettings);\r\n      init = core.extend(compositeConfig, init) as any;\r\n      // extend is shallow; extend headers separately\r\n      let headers = core.extend({}, this.defaultSettings.headers); // copy default headers 1st\r\n      init.headers = core.extend(headers, init.headers) as any;\r\n    }\r\n\r\n    let requestInfo = {\r\n      adapter: this,      // this adapter\r\n      config: init,   // fetch api 'init' object\r\n      dsaConfig: config,  // the config arg from the calling Breeze DataServiceAdapter\r\n      success: successFn, // adapter's success callback\r\n      error: errorFn,      // adapter's error callback\r\n    };\r\n\r\n    if (core.isFunction(this.requestInterceptor)) {\r\n      let ri = this.requestInterceptor as any;\r\n      ri(requestInfo);\r\n      if (ri.oneTime) {\r\n        this.requestInterceptor = undefined;\r\n      }\r\n    }\r\n\r\n    if (requestInfo.config) { // exists unless requestInterceptor killed it.\r\n      fetch(url, requestInfo.config).then(response => {\r\n        if (!response.ok) {\r\n          response.text().then(s => {\r\n            requestInfo.error(response.status, response.statusText, s, response, null);\r\n          });\r\n        } else {\r\n          response.json().then(j => {\r\n            requestInfo.success(j, response.statusText, response);\r\n          });\r\n        }\r\n      }).catch(err => {\r\n        requestInfo.error(0, err && err.message || err, null, null, err);\r\n      });\r\n    }\r\n\r\n    function encodeParams(obj: {}) {\r\n      let query = '';\r\n      let subValue: any, innerObj: any, fullSubName: any;\r\n    \r\n      for (let name in obj) {\r\n        if (!obj.hasOwnProperty(name)) { continue; }\r\n    \r\n        let value = obj[name];\r\n    \r\n        if (value instanceof Array) {\r\n          for (let i = 0; i < value.length; ++i) {\r\n            subValue = value[i];\r\n            fullSubName = name + '[' + i + ']';\r\n            innerObj = {};\r\n            innerObj[fullSubName] = subValue;\r\n            query += encodeParams(innerObj) + '&';\r\n          }\r\n        } else if (value && value.toISOString) { // a feature of Date-like things\r\n          query += encodeURIComponent(name) + '=' + encodeURIComponent(value.toISOString()) + '&';\r\n        } else if (value instanceof Object) {\r\n          for (let subName in value) {\r\n            if (obj.hasOwnProperty(name)) {\r\n              subValue = value[subName];\r\n              fullSubName = name + '[' + subName + ']';\r\n              innerObj = {};\r\n              innerObj[fullSubName] = subValue;\r\n              query += encodeParams(innerObj) + '&';\r\n            }\r\n          }\r\n        } else if (value === null) {\r\n          query += encodeURIComponent(name) + '=&';\r\n        } else if (value !== undefined) {\r\n          query += encodeURIComponent(name) + '=' + encodeURIComponent(value) + '&';\r\n        }\r\n      }\r\n    \r\n      return query.length ? query.substr(0, query.length - 1) : query;\r\n    }\r\n\r\n    function successFn(data: any, statusText: string, response: Response) {\r\n      let httpResponse = {\r\n        config: config,\r\n        data: data,\r\n        getHeaders: getHeadersFn(response),\r\n        status: response.status,\r\n        statusText: statusText\r\n      };\r\n      config.success(httpResponse);\r\n    }\r\n\r\n    function errorFn(status: number, statusText: string, body: string, response: Response, errorThrown: any) {\r\n      let httpResponse = {\r\n        config: config,\r\n        data: body,\r\n        error: errorThrown || statusText,\r\n        getHeaders: getHeadersFn(response),\r\n        status: status,\r\n        statusText: statusText\r\n      };\r\n      config.error(httpResponse);\r\n    }\r\n  }\r\n}\r\n\r\nbreeze.config.registerAdapter(\"ajax\", AjaxFetchAdapter);\r\n\r\nfunction getHeadersFn(response: Response): any {\r\n  if (!response || response.status === 0) { // timeout or abort; no headers\r\n    return function (headerName: string) {\r\n      return (headerName && headerName.length > 0) ? \"\" : {};\r\n    };\r\n  } else {\r\n    return function (headerName: string) {\r\n      if (headerName && headerName.length > 0) {\r\n        return response.headers.get(headerName);\r\n      }\r\n      let hob = {};\r\n      response.headers.forEach((val, key) => {\r\n        hob[key] = val;\r\n      });\r\n      return hob;\r\n    };\r\n  }\r\n}\r\n"]}