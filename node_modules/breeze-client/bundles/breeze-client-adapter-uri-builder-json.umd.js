(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('breeze-client')) :
    typeof define === 'function' && define.amd ? define('breeze-client/adapter-uri-builder-json', ['exports', 'breeze-client'], factory) :
    (global = global || self, factory((global['breeze-client'] = global['breeze-client'] || {}, global['breeze-client']['adapter-uri-builder-json'] = {}), global['breeze-client']));
}(this, (function (exports, breezeClient) { 'use strict';

    var UriBuilderJsonAdapter = /** @class */ (function () {
        function UriBuilderJsonAdapter() {
            this.name = "json";
        }
        UriBuilderJsonAdapter.register = function (config$1) {
            config$1 = config$1 || breezeClient.config;
            config$1.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
            return config$1.initializeAdapterInstance("uriBuilder", "json", true);
        };
        UriBuilderJsonAdapter.prototype.initialize = function () { };
        UriBuilderJsonAdapter.prototype.buildUri = function (entityQuery, metadataStore) {
            // force entityType validation;
            var entityType = entityQuery._getFromEntityType(metadataStore, false);
            if (!entityType)
                entityType = new breezeClient.EntityType(metadataStore);
            var json = entityQuery.toJSONExt({ entityType: entityType, toNameOnServer: true });
            json.from = undefined;
            json.queryOptions = undefined;
            if (json.parameters && json.parameters.$data) {
                // remove parameters if doing ajax post
                json.parameters = undefined;
            }
            var jsonString = JSON.stringify(json);
            if (jsonString.length > 2) {
                var urlBody = encodeURIComponent(jsonString);
                var sep = entityQuery.resourceName.includes("?") ? "&" : "?";
                return entityQuery.resourceName + sep + urlBody;
            }
            else {
                return entityQuery.resourceName;
            }
        };
        return UriBuilderJsonAdapter;
    }());
    breezeClient.config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);

    exports.UriBuilderJsonAdapter = UriBuilderJsonAdapter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=breeze-client-adapter-uri-builder-json.umd.js.map
