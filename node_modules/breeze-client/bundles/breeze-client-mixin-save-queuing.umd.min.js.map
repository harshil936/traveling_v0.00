{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://breeze-client/mixin-save-queuing/mixin-save-queuing.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","saveChangesWithQueuing","entities","saveOptions","saveQueuing","this","_saveQueuing","isSaving","queueSaveChanges","saveChanges","err","Promise","reject","SaveQueuing","entityManager","baseSaveChanges","prototype","isEnabled","_isEnabled","getSavedNothingResult","keyMappings","em","changes","getChanges","length","resolve","valError","saveChangesValidateOnClient","saveMemo","nextSaveMemo","SaveMemo","queuedChanges","forEach","e","entityAspect","isBeingSaved","indexOf","push","updateEntityMemos","memoizeChanges","nextSaveDeferred","Deferred","promise","self","call","then","saveResult","saveSucceeded","error","console","log","saveFailed","filter","entityState","isAdded","getEntities","EntityState","Added","entity","props","entityType","dataProperties","originalValues","dp","isPartOfKey","name","getProperty","rememberAddedOriginalValues","activeSaveDeferred","activeSaveMemo","pkFixup","applyToSavedEntities","isDetached","QueuedSaveFailedError","bind","_super","errObject","_this","innerError","message","failedSaveMemo","__","constructor","create","tslib_1.__extends","Error","entityMemos","savedEntities","restorePublishing","disableManagerPublishing","saved","key","makeEntityMemoKey","entityMemo","applyToSavedEntity","_setHasChanges","manager","Event","breeze","enable","km","type","entityTypeName","tempKey","tempValue","memoKey","realValue","fkFixup","entityKey","getKey","values","change","EntityMemo","update","pendingChanges","aspect","isDeleted","setDeleted","keys","setProperty","setModified","keyMapping","foreignKeyProperties","fkProp","parentType","originalValues_1","value","undefined"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","//#region Copyright, Version, and Description\r\n/*\r\n * Copyright 2015-2019 IdeaBlade, Inc.  All Rights Reserved.\r\n * Use, reproduction, distribution, and modification of this code is subject to the terms and\r\n * conditions of the IdeaBlade Breeze license, available at http://www.breezejs.com/license\r\n *\r\n * Author: Ward Bell\r\n * Version: 2.0.6 Steve Schmitt - convert to TypeScript, move to breeze-client repo, change enableSaveQueuing function\r\n * Version: 2.0.5 Ward Bell\r\n * --------------------------------------------------------------------------------\r\n * Adds \"Save Queuing\" capability to new EntityManagers\r\n *\r\n * Save Queuing automatically queues and defers an EntityManager.saveChanges call\r\n * when another save is in progress for that manager and the server has not yet responded.\r\n * This feature is helpful when your app needs to allow rapid, continuous changes\r\n * to entities that may be in the process of being saved.\r\n *\r\n * Without \"Save Queuing\", an EntityManager will throw an exception\r\n * when you call saveChanges for an entity which is currently being saved.\r\n *\r\n * !!! Use with caution !!!\r\n * It is usually better to disable user input while a save is in progress.\r\n * Save Queuing may be appropriate for simple \"auto-save\" scenarios\r\n * when the save latency is \"short\" (under a few seconds).\r\n *\r\n * Save Queuing is NOT intended for occassionally disconnected or offline scenarios.\r\n *\r\n * Save Queuing is experimental. It will not become a part of BreezeJS core\r\n * but might become an official Breeze plugin in future\r\n * although not necessarily in this form or with this API\r\n *\r\n * Must call EntityManager.enableSaveQueuing(true) to turn it on;\r\n * EntityManager.enableSaveQueuing(false) restores the manager's original\r\n * saveChanges method as it was at the time saveQueuing was first enabled.\r\n *\r\n * This module adds \"enableSaveQueuing\" to the EntityManager prototype.\r\n * Calling \"enableSaveQueuing(true)\" adds a new _saveQueuing object\r\n * to the manager instance.\r\n *\r\n * See DocCode:saveQueuingTests.js\r\n * https://github.com/Breeze/breeze.js.samples/blob/master/net/DocCode/DocCode/tests/saveQueuingTests.js\r\n *\r\n * LIMITATIONS\r\n * - Can't handle changes to the primary key (dangerous in any case)\r\n * - Assumes promises. Does not support the (deprecated) success and fail callbacks\r\n * - Does not queue saveOptions. The first one is re-used for all queued saves.\r\n * - Does not deal with export/import of entities while save is inflight\r\n * - Does not deal with rejectChanges while save is in flight\r\n * - Does not support parallel saves even when the change-sets are independent.\r\n *   The native saveChanges allows such saves.\r\n *   SaveQueuing does not; too complex and doesn't fit the primary scenario anyway.\r\n * - The resolved saveResult is the saveResult of the last completed save\r\n * - A queued save that might have succeeded if saved immediately\r\n *   may fail because the server no longer accepts it later\r\n * - Prior to Breeze v.1.5.3, a queued save that might have succeeded\r\n *   if saved immediately will fail if subsequently attempt to save\r\n *   an invalid entity. Can detect and circumvent after v.1.5.3.\r\n *\r\n * All members of EntityManager._saveQueuing are internal;\r\n * touch them at your own risk.\r\n */\r\n//#endregion\r\nimport { Entity, EntityManager, KeyMapping, EntityState, SaveResult, breeze } from 'breeze-client';\r\n\r\n\r\nexport function enableSaveQueuing(em: EntityManager, enable: boolean = true) {\r\n  let saveQueuing = em['_saveQueueing'] ||\r\n    (em['_saveQueuing'] = new SaveQueuing(em));\r\n\r\n  enable = (enable === undefined) ? true : enable;\r\n  saveQueuing._isEnabled = enable;\r\n  if (enable) {\r\n    // delegate to save changes queuing\r\n    em.saveChanges = saveChangesWithQueuing;\r\n  } else {\r\n    // revert to the native EntityManager.saveChanges\r\n    em.saveChanges = em['_saveQueuing'].baseSaveChanges;\r\n  }\r\n}\r\n\r\n/**\r\n * Replacement for EntityManager.saveChanges\r\n * This version queues saveChanges calls while a real save is in progress\r\n **/\r\nfunction saveChangesWithQueuing(entities: Entity[] | null, saveOptions: any) {\r\n  try {\r\n    // `this` is an EntityManager\r\n    let saveQueuing = this._saveQueuing;\r\n    if (saveQueuing.isSaving) {\r\n      // save in progress; queue the save for later\r\n      return saveQueuing.queueSaveChanges(entities);\r\n    } else {\r\n      // note that save is in progress; then save\r\n      saveQueuing.isSaving = true;\r\n      saveQueuing.saveOptions = saveOptions;\r\n      return saveQueuing.saveChanges(entities, saveOptions);\r\n    }\r\n  } catch (err) {\r\n    return Promise.reject(err);\r\n  }\r\n}\r\n\r\n///////// SaveQueuing /////////\r\nclass SaveQueuing {\r\n  entityManager: EntityManager;\r\n  baseSaveChanges: () => Promise<any>;\r\n  isSaving: boolean;\r\n  _isEnabled: boolean;\r\n  activeSaveDeferred: Deferred<SaveResult>;\r\n  nextSaveDeferred: Deferred<SaveResult>;\r\n  activeSaveMemo: SaveMemo;\r\n  nextSaveMemo: SaveMemo;\r\n  saveOptions: any;\r\n\r\n  constructor(entityManager: EntityManager) {\r\n    this.entityManager = entityManager;\r\n    this.baseSaveChanges = entityManager.saveChanges;\r\n    this.isSaving = false;\r\n  }\r\n\r\n  isEnabled() {\r\n    return this._isEnabled;\r\n  }\r\n\r\n  getSavedNothingResult(): SaveResult {\r\n    return { entities: [] as Entity[], keyMappings: [] as KeyMapping[] };\r\n  }\r\n\r\n  queueSaveChanges(entities: Entity[]) {\r\n    let self = this; // `this` is a SaveQueuing\r\n    let em = self.entityManager;\r\n\r\n    let changes = entities || em.getChanges();\r\n    if (changes.length === 0) {\r\n      return Promise.resolve(this.getSavedNothingResult());\r\n    }\r\n\r\n    let valError = em.saveChangesValidateOnClient(changes);\r\n    if (valError) {\r\n      return Promise.reject(valError);\r\n    }\r\n\r\n    let saveMemo = self.nextSaveMemo || (self.nextSaveMemo = new SaveMemo());\r\n    memoizeChanges();\r\n    let deferred = self.nextSaveDeferred || (self.nextSaveDeferred = new Deferred<SaveResult>());\r\n    return deferred.promise;\r\n\r\n    function memoizeChanges() {\r\n      if (changes.length === 0) { return; }\r\n      let queuedChanges = saveMemo.queuedChanges;\r\n      changes.forEach(e => {\r\n        if (!e.entityAspect.isBeingSaved && queuedChanges.indexOf(e) === -1) {\r\n          queuedChanges.push(e);\r\n        }\r\n      });\r\n\r\n      saveMemo.updateEntityMemos(changes);\r\n    }\r\n  }\r\n\r\n  saveChanges(entities: Entity[], saveOptions: any) {\r\n    let self = this; // `this` is a SaveQueuing\r\n    let promise = self.baseSaveChanges.call(self.entityManager, entities, saveOptions || self.saveOptions)\r\n      .then(function (saveResult: SaveResult) { return self.saveSucceeded(saveResult); })\r\n      .then(null, function (error: Error) { console.log(error); return self.saveFailed(error); });\r\n    rememberAddedOriginalValues(entities); // do it after ... so don't send OrigValues to the server\r\n    return promise;\r\n\r\n    function rememberAddedOriginalValues(entities: Entity[]) {\r\n      // added entities normally don't have original values but these will now\r\n      let added = entities ?\r\n        entities.filter(function (e) { return e.entityAspect.entityState.isAdded(); }) :\r\n        self.entityManager.getEntities(null, EntityState.Added);\r\n      added.forEach(entity => {\r\n        let props = entity.entityType.dataProperties;\r\n        let originalValues = entity.entityAspect.originalValues;\r\n        props.forEach(dp => {\r\n          if (dp.isPartOfKey) { return; }\r\n          originalValues[dp.name] = entity.getProperty(dp.name);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  saveSucceeded(saveResult: SaveResult) {\r\n    let self = this; // `this` is a SaveQueueing\r\n    let activeSaveDeferred = self.activeSaveDeferred;\r\n    let nextSaveDeferred = self.nextSaveDeferred;\r\n    let nextSaveMemo = self.nextSaveMemo;\r\n\r\n\r\n    // prepare as if nothing queued or left to save\r\n    self.isSaving = false;\r\n    self.activeSaveDeferred = null;\r\n    self.activeSaveMemo = null;\r\n    self.nextSaveDeferred = null;\r\n    self.nextSaveMemo = null;\r\n\r\n    if (nextSaveMemo) {\r\n      // a save was queued since last save returned\r\n      nextSaveMemo.pkFixup(saveResult.keyMappings);\r\n      nextSaveMemo.applyToSavedEntities(self.entityManager, saveResult.entities);\r\n      // remove detached entities from queuedChanges\r\n      let queuedChanges = nextSaveMemo.queuedChanges.filter(e => {\r\n        return !e.entityAspect.entityState.isDetached();\r\n      });\r\n\r\n      if (queuedChanges.length > 0) {\r\n        // save again\r\n        self.isSaving = true;\r\n        // remember the queued changes that triggered this save\r\n        self.activeSaveDeferred = nextSaveDeferred;\r\n        self.activeSaveMemo = nextSaveMemo;\r\n        self.saveChanges(queuedChanges, this.saveOptions);\r\n      } else if (nextSaveDeferred) {\r\n        nextSaveDeferred.resolve(this.getSavedNothingResult());\r\n      }\r\n    }\r\n\r\n    if (activeSaveDeferred) { activeSaveDeferred.resolve(saveResult); }\r\n    return saveResult;  // for the current promise chain\r\n  }\r\n\r\n  saveFailed(error: Error) {\r\n    let self = this; // `this` is a SaveQueueing\r\n    error = new QueuedSaveFailedError(error, self);\r\n\r\n    let activeSaveDeferred = self.activeSaveDeferred;\r\n    let nextSaveDeferred = self.nextSaveDeferred;\r\n\r\n    self.isSaving = false;\r\n    self.activeSaveDeferred = null;\r\n    self.activeSaveMemo = null;\r\n    self.nextSaveDeferred = null;\r\n    self.nextSaveMemo = null;\r\n\r\n    if (activeSaveDeferred) { activeSaveDeferred.reject(error); }\r\n    if (nextSaveDeferred) { nextSaveDeferred.reject(error); }\r\n\r\n    return Promise.reject(error); // let promise chain hear error\r\n  }\r\n}\r\n\r\n/// for backward compat with older Promise implementation\r\nclass Deferred<T> {\r\n  resolve: (val: any) => void;\r\n  reject: (err: any) => void;\r\n  promise: Promise<T>;\r\n  constructor() {\r\n    this.promise = new Promise<T>(function (resolve: (val: any) => void, reject: (err: any) => void) {\r\n      this.resolve = resolve;\r\n      this.reject = reject;\r\n    }.bind(this));\r\n  }\r\n}\r\n\r\n\r\n////////// QueuedSaveFailedError /////////\r\n// Error sub-class thrown when rejecting queued saves.\r\nclass QueuedSaveFailedError extends Error {\r\n  name = \"QueuedSaveFailedError\";\r\n  innerError: Error;\r\n  message: string;\r\n  failedSaveMemo: SaveMemo;\r\n  nextSaveMemo: SaveMemo;\r\n\r\n  // Error sub-class thrown when rejecting queued saves.\r\n  // `innerError` is the actual save error\r\n  // `failedSaveMemo` is the saveMemo that prompted this save\r\n  // `nextSaveMemo` holds queued changes accumulated since that save.\r\n  // You may try to recover using this info. Good luck with that.\r\n  constructor(errObject: Error, saveQueuing: any) {\r\n    super();\r\n    this.innerError = errObject;\r\n    this.message = \"Queued save failed: \" + errObject.message;\r\n    this.failedSaveMemo = saveQueuing.activeSaveMemo;\r\n    this.nextSaveMemo = saveQueuing.nextSaveMemo;\r\n  }\r\n}\r\n\r\n////////// SaveMemo ////////////////\r\n// SaveMemo is a record of changes for a queued save, consisting of:\r\n//   entityMemos:   info about entities that are being saved and\r\n//                  have been changed since the save started\r\n//   queuedChanges: entities that are queued for save but\r\n//                  are not currently being saved\r\nclass SaveMemo {\r\n  entityMemos: any;\r\n  queuedChanges: any[];\r\n  constructor() {\r\n    this.entityMemos = {};\r\n    this.queuedChanges = [];\r\n  }\r\n\r\n  applyToSavedEntities(entityManager: EntityManager, savedEntities: Entity[]) {\r\n    let entityMemos = this.entityMemos; // `this` is a SaveMemo\r\n    let queuedChanges = this.queuedChanges;\r\n    let restorePublishing = this.disableManagerPublishing(entityManager);\r\n    try {\r\n      savedEntities.forEach(saved => {\r\n        let key = this.makeEntityMemoKey(saved);\r\n        let entityMemo = entityMemos[key];\r\n        let resave = entityMemo && entityMemo.applyToSavedEntity(saved);\r\n        if (resave) {\r\n          queuedChanges.push(saved);\r\n        }\r\n      });\r\n    } finally {\r\n      restorePublishing();\r\n      // D#2651 hasChanges will be wrong if changes made while save in progress\r\n      let hasChanges = queuedChanges.length > 0;\r\n      // Must use breeze internal method to properly set this flag true\r\n      if (hasChanges) { entityManager._setHasChanges(true); }\r\n    }\r\n  }\r\n\r\n  private disableManagerPublishing(manager: EntityManager) {\r\n    let Event = breeze.Event;\r\n    Event.enable('entityChanged', manager, false);\r\n    Event.enable('hasChangesChanged', manager, false);\r\n\r\n    return function restorePublishing() {\r\n      Event.enable('entityChanged', manager, true);\r\n      Event.enable('hasChangesChanged', manager, true);\r\n    };\r\n  }\r\n\r\n  pkFixup(keyMappings: KeyMapping[]) {\r\n    let entityMemos = this.entityMemos;  // `this` is a SaveMemo\r\n    keyMappings.forEach(km => {\r\n      let type = km.entityTypeName;\r\n      let tempKey = type + '|' + km.tempValue;\r\n      if (entityMemos[tempKey]) {\r\n        entityMemos[type + '|' + km.realValue] = entityMemos[tempKey];\r\n        delete entityMemos[tempKey];\r\n      }\r\n      for (let memoKey in entityMemos) {\r\n        entityMemos[memoKey].fkFixup(km);\r\n      }\r\n    });\r\n  }\r\n\r\n  makeEntityMemoKey(entity: Entity) {\r\n    let entityKey = entity.entityAspect.getKey();\r\n    return entityKey.entityType.name + '|' + entityKey.values;\r\n  }\r\n\r\n  updateEntityMemos(changes: Entity[]) {\r\n    let entityMemos = this.entityMemos;  // `this` is a SaveMemo\r\n    changes.forEach(change => {\r\n      // only update entityMemo for entity being save\r\n      if (!change.entityAspect.isBeingSaved) { return; }\r\n\r\n      let key = this.makeEntityMemoKey(change);\r\n      let entityMemo = entityMemos[key] || (entityMemos[key] = new EntityMemo(change));\r\n      entityMemo.update(change);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n///////// EntityMemo Type ///////////////\r\n// Information about an entity that is being saved\r\n// and which has been changed since that save started\r\nclass EntityMemo {\r\n  entity: Entity;\r\n  pendingChanges: any;\r\n  isDeleted: boolean;\r\n  constructor(entity: Entity) {\r\n    this.entity = entity;\r\n    this.pendingChanges = {};\r\n  }\r\n\r\n\r\n  applyToSavedEntity(saved: Entity) {\r\n    let entityMemo = this;\r\n    let aspect = saved.entityAspect;\r\n    if (aspect.entityState.isDetached()) {\r\n      return false;\r\n    } else if (entityMemo.isDeleted) {\r\n      aspect.setDeleted();\r\n      return true;\r\n    }\r\n    // treat entity with pending changes as modified\r\n    let props = Object.keys(entityMemo.pendingChanges);\r\n    if (props.length === 0) {\r\n      return false;\r\n    }\r\n    let originalValues = aspect.originalValues;\r\n    props.forEach(name => {\r\n      originalValues[name] = saved.getProperty(name);\r\n      saved.setProperty(name, entityMemo.pendingChanges[name]);\r\n    });\r\n    aspect.setModified();\r\n    return true;\r\n  }\r\n\r\n  fkFixup(keyMapping: KeyMapping) {\r\n    let entityMemo = this;\r\n    let type = entityMemo.entity.entityType;\r\n    let fkProps = type.foreignKeyProperties;\r\n    fkProps.forEach(fkProp => {\r\n      if (fkProp.parentType.name === keyMapping.entityTypeName &&\r\n        entityMemo.pendingChanges[fkProp.name] === keyMapping.tempValue) {\r\n        entityMemo.pendingChanges[fkProp.name] = keyMapping.realValue;\r\n      }\r\n    });\r\n  }\r\n\r\n  // update the entityMemo of changes to an entity being saved\r\n  // so that we know how to save it again later\r\n  update() {\r\n    let entityMemo = this;\r\n    let props;\r\n    let entity = entityMemo.entity;\r\n    let aspect = entity.entityAspect;\r\n    let stateName = aspect.entityState.name;\r\n    switch (stateName) {\r\n      case 'Added':\r\n        let originalValues = aspect.originalValues;\r\n        props = entity.entityType.dataProperties;\r\n        props.forEach(dp => {\r\n          if (dp.isPartOfKey) { return; }\r\n          let name = dp.name;\r\n          let value = entity.getProperty(name);\r\n          if (originalValues[name] !== value) {\r\n            entityMemo.pendingChanges[name] = value;\r\n          }\r\n        });\r\n        break;\r\n\r\n      case 'Deleted':\r\n        entityMemo.isDeleted = true;\r\n        entityMemo.pendingChanges = {};\r\n        break;\r\n\r\n      case 'Modified':\r\n        props = Object.keys(aspect.originalValues);\r\n        props.forEach(name => {\r\n          entityMemo.pendingChanges[name] = entity.getProperty(name);\r\n        });\r\n        break;\r\n    }\r\n  }\r\n}\r\n"]}