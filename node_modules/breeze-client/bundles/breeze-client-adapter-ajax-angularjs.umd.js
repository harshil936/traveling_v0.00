(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('breeze-client')) :
    typeof define === 'function' && define.amd ? define('breeze-client/adapter-ajax-angularjs', ['exports', 'breeze-client'], factory) :
    (global = global || self, factory((global['breeze-client'] = global['breeze-client'] || {}, global['breeze-client']['adapter-ajax-angularjs'] = {}), global['breeze-client']));
}(this, (function (exports, breezeClient) { 'use strict';

    var core = breezeClient.core;
    var AjaxAngularjsAdapter = /** @class */ (function () {
        function AjaxAngularjsAdapter() {
            this.name = "angularjs";
            this.defaultSettings = {};
            this.requestInterceptor = undefined;
            // Will set:
            //   this.$http;
            //   this.$rootScope;
        }
        AjaxAngularjsAdapter.register = function (config$1) {
            config$1 = config$1 || breezeClient.config;
            config$1.registerAdapter("ajax", AjaxAngularjsAdapter);
            return config$1.initializeAdapterInstance("ajax", "angularjs", true);
        };
        AjaxAngularjsAdapter.prototype.initialize = function () {
            var ng = breezeClient.core.requireLib("angular");
            if (ng) {
                var $injector = ng.injector(['ng']);
                var http_1, rootScope_1;
                $injector.invoke(['$http', '$rootScope', function ($http, $rootScope) {
                        http_1 = $http;
                        rootScope_1 = $rootScope;
                    }]);
                this.$http = http_1;
                this.$rootScope = rootScope_1;
            }
        };
        AjaxAngularjsAdapter.prototype.setHttp = function (http) {
            this.$http = http;
            this.$rootScope = null; // to suppress $rootScope.digest
        };
        AjaxAngularjsAdapter.prototype.ajax = function (config) {
            if (!this.$http) {
                throw new Error("Unable to locate angularjs for ajax adapter");
            }
            var ngConfig = {
                method: config.type,
                url: config.url,
                dataType: config.dataType,
                contentType: config.contentType,
                crossDomain: config.crossDomain,
                headers: config.headers || {},
                data: undefined
            };
            if (config.params) {
                // Hack: because of the way that Angular handles writing parameters out to the url.
                // so this approach takes over the url param writing completely.
                // See: http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/
                var delim = (ngConfig.url.indexOf("?") >= 0) ? "&" : "?";
                ngConfig.url = ngConfig.url + delim + encodeParams(config.params);
            }
            if (config.data) {
                ngConfig.data = config.data;
            }
            if (!core.isEmpty(this.defaultSettings)) {
                var compositeConfig = core.extend({}, this.defaultSettings);
                ngConfig = core.extend(compositeConfig, ngConfig);
                // extend is shallow; extend headers separately
                var headers = core.extend({}, this.defaultSettings.headers); // copy default headers 1st
                ngConfig.headers = core.extend(headers, ngConfig.headers);
            }
            var requestInfo = {
                adapter: this,
                config: ngConfig,
                dsaConfig: config,
                success: successFn,
                error: errorFn,
                responseSuccess: responseSuccessFn,
                responseError: responseErrorFn // adapter's error callback (ng 1.6+)
            };
            if (core.isFunction(this.requestInterceptor)) {
                var ri = this.requestInterceptor;
                ri(requestInfo);
                if (ri.oneTime) {
                    this.requestInterceptor = undefined;
                }
            }
            if (requestInfo.config) { // exists unless requestInterceptor killed it.
                var prom = this.$http(requestInfo.config);
                if (prom.success) {
                    // response for ng < 1.6        
                    prom.success(requestInfo.success).error(requestInfo.error);
                }
                else {
                    // response for ng 1.6+
                    prom.then(requestInfo.responseSuccess).catch(requestInfo.responseError);
                }
                this.$rootScope && this.$rootScope.$digest();
            }
            function responseSuccessFn(response) {
                return successFn(response.data, response.status, response.headers, response.config, response.statusText);
            }
            function successFn(data, status, headers, xconfig, statusText) {
                // HACK: because $http returns a server side null as a string containing "null" - this is WRONG.
                if (data === "null")
                    data = null;
                var httpResponse = {
                    config: config,
                    data: data,
                    getHeaders: headers,
                    ngConfig: xconfig,
                    status: status,
                    statusText: statusText
                };
                config.success(httpResponse);
            }
            function responseErrorFn(response) {
                return errorFn(response.data, response.status, response.headers, response.config, response.statusText);
            }
            function errorFn(data, status, headers, xconfig, statusText) {
                // Timeout appears as an error with status===0 and no data.
                // Make it better
                if (status === 0 && data == null) {
                    data = 'timeout';
                }
                var httpResponse = {
                    config: config,
                    data: data,
                    getHeaders: headers,
                    ngConfig: xconfig,
                    status: status,
                    statusText: statusText
                };
                config.error(httpResponse);
            }
        };
        return AjaxAngularjsAdapter;
    }());
    breezeClient.config.registerAdapter("ajax", AjaxAngularjsAdapter);
    function encodeParams(obj) {
        var query = '';
        var subValue, innerObj, fullSubName;
        for (var name_1 in obj) {
            var value = obj[name_1];
            if (value instanceof Array) {
                for (var i = 0; i < value.length; ++i) {
                    subValue = value[i];
                    fullSubName = name_1 + '[' + i + ']';
                    innerObj = {};
                    innerObj[fullSubName] = subValue;
                    query += encodeParams(innerObj) + '&';
                }
            }
            else if (value && value.toISOString) { // a feature of Date-like things
                query += encodeURIComponent(name_1) + '=' + encodeURIComponent(value.toISOString()) + '&';
            }
            else if (value instanceof Object) {
                for (var subName in value) {
                    subValue = value[subName];
                    fullSubName = name_1 + '[' + subName + ']';
                    innerObj = {};
                    innerObj[fullSubName] = subValue;
                    query += encodeParams(innerObj) + '&';
                }
            }
            else if (value === null) {
                query += encodeURIComponent(name_1) + '=&';
            }
            else if (value !== undefined) {
                query += encodeURIComponent(name_1) + '=' + encodeURIComponent(value) + '&';
            }
        }
        return query.length ? query.substr(0, query.length - 1) : query;
    }

    exports.AjaxAngularjsAdapter = AjaxAngularjsAdapter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=breeze-client-adapter-ajax-angularjs.umd.js.map
