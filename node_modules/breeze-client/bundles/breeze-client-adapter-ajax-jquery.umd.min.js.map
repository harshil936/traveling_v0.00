{"version":3,"sources":["ng://breeze-client/adapter-ajax-jquery/adapter-ajax-jquery.ts"],"names":["core","breeze.core","AjaxJQueryAdapter","this","name","defaultSettings","requestInterceptor","undefined","register","config","breeze.config","registerAdapter","initializeAdapterInstance","prototype","initialize","jQuery","requireLib","ajax","Error","jqConfig","type","url","data","params","dataType","contentType","crossDomain","headers","isEmpty","compositeConfig","extend","requestInfo","adapter","dsaConfig","success","statusText","jqXHR","httpResponse","getHeaders","getHeadersFn","status","error","errorThrown","responseText","isFunction","ri","oneTime","done","fail","headerName","length","getResponseHeader","getAllResponseHeaders"],"mappings":"mXAGA,IAAIA,EAAOC,EAAAA,kBAQT,SAAAC,IACEC,KAAKC,KAAO,SACZD,KAAKE,gBAAkB,GACvBF,KAAKG,wBAAqBC,EA0F9B,OAvFSL,EAAAM,SAAP,SAAgBC,GAGd,OAFAA,EAASA,GAAUC,EAAAA,QACZC,gBAAgB,OAAQT,GACxBO,EAAOG,0BAA0B,OAAQ,UAAU,IAG5DV,EAAAW,UAAAC,WAAA,WACEX,KAAKY,OAASA,OAETA,SACHZ,KAAKY,OAASf,EAAKgB,WAAW,mBAIlCd,EAAAW,UAAAI,KAAA,SAAKR,GACH,IAAKN,KAAKY,OACR,MAAM,IAAIG,MAAM,2BAElB,IAAIC,EAAW,CACbC,KAAMX,EAAOW,KACbC,IAAKZ,EAAOY,IACZC,KAAMb,EAAOc,QAAUd,EAAOa,KAC9BE,SAAUf,EAAOe,SACjBC,YAAahB,EAAOgB,YACpBC,YAAajB,EAAOiB,YACpBC,QAASlB,EAAOkB,SAAW,IAG7B,IAAK3B,EAAK4B,QAAQzB,KAAKE,iBAAkB,CACvC,IAAIwB,EAAkB7B,EAAK8B,OAAO,GAAI3B,KAAKE,iBAC3Cc,EAAWnB,EAAK8B,OAAOD,EAAiBV,GAExC,IAAIQ,EAAU3B,EAAK8B,OAAO,GAAI3B,KAAKE,gBAAgBsB,SACnDR,EAASQ,QAAU3B,EAAK8B,OAAOH,EAASR,EAASQ,SAGnD,IAAII,EAAc,CAChBC,QAAS7B,KACTM,OAAQU,EACRc,UAAWxB,EACXyB,QAkBF,SAAmBZ,EAAWa,EAAoBC,GAChD,IAAIC,EAAe,CACjB5B,OAAQA,EACRa,KAAMA,EACNgB,WAAYC,EAAaH,GACzBI,OAAQJ,EAAMI,OACdL,WAAYA,GAEd1B,EAAOyB,QAAQG,IAzBfI,MA+BF,SAAiBL,EAAuBD,EAAoBO,GAC1D,IAAIL,EAAe,CACjB5B,OAAQA,EACRa,KAAMc,EAAMO,aACZF,MAAOC,EACPJ,WAAYC,EAAaH,GACzBI,OAAQJ,EAAMI,OACdL,WAAYA,GAEd1B,EAAOgC,MAAMJ,KArCf,GAAIrC,EAAK4C,WAAWzC,KAAKG,oBAAqB,CAC5C,IAAIuC,EAAK1C,KAAKG,mBACduC,EAAGd,GACCc,EAAGC,UACL3C,KAAKG,wBAAqBC,GAI1BwB,EAAYtB,SACbsB,EAAoBK,MAAQjC,KAAKY,OAAOE,KAAKc,EAAYtB,QACvDsC,KAAKhB,EAAYG,SACjBc,KAAKjB,EAAYU,SAgC1BvC,KAIA,SAASqC,EAAaH,GACpB,OAAqB,IAAjBA,EAAMI,OACD,SAAUS,GACf,OAAQA,GAAcA,EAAWC,OAAS,EAAK,GAAK,IAG/C,SAAUD,GACf,OAAQA,GAAcA,EAAWC,OAAS,EACxCd,EAAMe,kBAAkBF,GACxBb,EAAMgB,yBAXd1C,EAAAA,OAAcC,gBAAgB,OAAQT","sourcesContent":["import * as breeze from 'breeze-client';\r\n\r\ndeclare var jQuery: any;\r\nlet core = breeze.core;\r\n\r\nexport class AjaxJQueryAdapter implements breeze.AjaxAdapter {\r\n  name: string;\r\n  defaultSettings: { headers?: any };\r\n  requestInterceptor?: (() => breeze.ChangeRequestInterceptor) | breeze.ChangeRequestInterceptor;\r\n  jQuery: any;\r\n\r\n  constructor() {\r\n    this.name = \"jQuery\";\r\n    this.defaultSettings = { };\r\n    this.requestInterceptor = undefined;\r\n  }\r\n\r\n  static register(config?: breeze.BreezeConfig) {\r\n    config = config || breeze.config;\r\n    config.registerAdapter(\"ajax\", AjaxJQueryAdapter);\r\n    return config.initializeAdapterInstance(\"ajax\", \"jQuery\", true) as AjaxJQueryAdapter;\r\n  }\r\n\r\n  initialize() {\r\n    this.jQuery = jQuery;\r\n    // look for the jQuery lib but don't fail immediately if not found\r\n    if (!jQuery) {\r\n      this.jQuery = core.requireLib(\"jQuery;jquery\");\r\n    }\r\n  }\r\n\r\n  ajax(config: breeze.AjaxConfig) {\r\n    if (!this.jQuery) {\r\n      throw new Error(\"Unable to locate jQuery\");\r\n    }\r\n    let jqConfig = {\r\n      type: config.type,\r\n      url: config.url,\r\n      data: config.params || config.data,\r\n      dataType: config.dataType,\r\n      contentType: config.contentType,\r\n      crossDomain: config.crossDomain,\r\n      headers: config.headers || {}\r\n    };\r\n\r\n    if (!core.isEmpty(this.defaultSettings)) {\r\n      let compositeConfig = core.extend({}, this.defaultSettings);\r\n      jqConfig = core.extend(compositeConfig, jqConfig) as any;\r\n      // extend is shallow; extend headers separately\r\n      let headers = core.extend({}, this.defaultSettings.headers); // copy default headers 1st\r\n      jqConfig.headers = core.extend(headers, jqConfig.headers);\r\n    }\r\n\r\n    let requestInfo = {\r\n      adapter: this,      // this adapter\r\n      config: jqConfig,   // jQuery's ajax 'settings' object\r\n      dsaConfig: config,  // the config arg from the calling Breeze DataServiceAdapter\r\n      success: successFn, // adapter's success callback\r\n      error: errorFn,      // adapter's error callback\r\n    };\r\n\r\n    if (core.isFunction(this.requestInterceptor)) {\r\n      let ri = this.requestInterceptor as any;\r\n      ri(requestInfo);\r\n      if (ri.oneTime) {\r\n        this.requestInterceptor = undefined;\r\n      }\r\n    }\r\n\r\n    if (requestInfo.config) { // exists unless requestInterceptor killed it.\r\n      (requestInfo as any).jqXHR = this.jQuery.ajax(requestInfo.config)\r\n        .done(requestInfo.success)\r\n        .fail(requestInfo.error);\r\n    }\r\n\r\n    function successFn(data: any, statusText: string, jqXHR: XMLHttpRequest) {\r\n      let httpResponse = {\r\n        config: config,\r\n        data: data,\r\n        getHeaders: getHeadersFn(jqXHR),\r\n        status: jqXHR.status,\r\n        statusText: statusText\r\n      };\r\n      config.success(httpResponse);\r\n      // TODO: not sure how to do this or if needed.\r\n      // jqXHR.onreadystatechange = null;\r\n      // jqXHR.abort = null;\r\n    }\r\n\r\n    function errorFn(jqXHR: XMLHttpRequest, statusText: string, errorThrown: any) {\r\n      let httpResponse = {\r\n        config: config,\r\n        data: jqXHR.responseText,\r\n        error: errorThrown,\r\n        getHeaders: getHeadersFn(jqXHR),\r\n        status: jqXHR.status,\r\n        statusText: statusText\r\n      };\r\n      config.error(httpResponse);\r\n      // TODO: not sure how to do this or if needed.\r\n      // jqXHR.onreadystatechange = null;\r\n      // jqXHR.abort = null;\r\n    }\r\n  }\r\n}\r\n\r\nbreeze.config.registerAdapter(\"ajax\", AjaxJQueryAdapter);\r\n\r\nfunction getHeadersFn(jqXHR: XMLHttpRequest): any {\r\n  if (jqXHR.status === 0) { // timeout or abort; no headers\r\n    return function (headerName: string) {\r\n      return (headerName && headerName.length > 0) ? \"\" : {};\r\n    };\r\n  } else { // jqXHR should have header functions\r\n    return function (headerName: string) {\r\n      return (headerName && headerName.length > 0) ?\r\n        jqXHR.getResponseHeader(headerName) :\r\n        jqXHR.getAllResponseHeaders();\r\n    };\r\n  }\r\n}\r\n"]}