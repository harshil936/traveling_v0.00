/// <reference types="jest" />
import { EntityManager, MetadataStore } from 'breeze-client';
import { UtilFns } from './util-fns';
export declare type JsonObj = {
    [k: string]: any;
};
export declare const expectPass: () => void;
export declare const describeIf: (condition: boolean, name: string, fn: jest.EmptyFunction) => void;
export declare const skipDescribeIf: (condition: boolean, name: string, fn: jest.EmptyFunction) => void;
export declare const testIf: (condition: boolean, name: string, fn: jest.EmptyFunction) => void;
export declare const skipTestIf: (condition: boolean, name: string, fn: jest.EmptyFunction) => void;
export declare class TestFns extends UtilFns {
    static defaultServerEnvName: string;
    static serverEnvName: string;
    static defaultServiceName: string;
    static metadataStoreIsBeingFetched: boolean;
    static sampleMetadata: string;
    static sampleMetadataStore: MetadataStore;
    static defaultMetadata: string;
    static defaultMetadataStore: MetadataStore;
    static isODataServer: boolean;
    static isMongoServer: boolean;
    static isSequelizeServer: boolean;
    static isAspCoreServer: boolean;
    static isAspWebApiServer: boolean;
    static isHibernateServer: boolean;
    static isNHibernateServer: boolean;
    static wellKnownData: {
        nancyID: any;
        alfredsID: any;
        dummyOrderID: any;
        dummyEmployeeID: any;
        chaiProductID: any;
        alfredsOrderDetailKey: {
            OrderID: number;
            ProductID: number;
        };
        keyNames: {
            order: string;
            customer: string;
            employee: string;
            product: string;
            user: string;
            supplier: string;
            region: string;
        };
    };
    static initNonServerEnv(): void;
    static initServerEnv(serverEnvName?: string): void;
    private static calcServerTypes;
    private static initBrowserShims;
    private static initAdapters;
    static initDefaultMetadataStore(): Promise<MetadataStore>;
    static initSampleMetadataStore(): MetadataStore;
    static newEntityManager(metadataStore?: MetadataStore): EntityManager;
    static getCustomerCtor(): () => void;
    static getCustomerWithES5PropsCtor(): () => void;
    static createES5Props(target: any): void;
}
