/** Configuration info to be passed to the [[LocalQueryComparisonOptions]] constructor. */
export interface LocalQueryComparisonOptionsConfig {
    /** The name of this collection of configuration settings. */
    name?: string;
    /** Whether predicates that involve strings will be interpreted in a "caseSensitive" manner. Default is 'false'. */
    isCaseSensitive?: boolean;
    usesSql92CompliantStringComparison?: boolean;
}
/**
A LocalQueryComparisonOptions instance is used to specify the "comparison rules" used when performing "local queries" in order
to match the semantics of these same queries when executed against a remote service.  These options should be set based on the
manner in which your remote service interprets certain comparison operations.

The default LocalQueryComparisonOptions stipulates 'caseInsensitive" queries with ANSI SQL rules regarding comparisons of unequal
length strings.
**/
export declare class LocalQueryComparisonOptions {
    /** @hidden @internal */
    _$typeName: string;
    /** The name for this instance. */
    name: string;
    /** Whether predicates that involve strings will be interpreted in a "caseSensitive" manner. (default = false).  */
    isCaseSensitive: boolean;
    usesSql92CompliantStringComparison: boolean;
    /**
    LocalQueryComparisonOptions constructor
    >      // create a 'caseSensitive - non SQL' instance.
    >      var lqco = new LocalQueryComparisonOptions({
    >              name: "caseSensitive-nonSQL"
    >              isCaseSensitive: true;
    >              usesSql92CompliantStringComparison: false;
    >          });
    >      // either apply it globally
    >      lqco.setAsDefault();
    >      // or to a specific MetadataStore
    >      var ms = new MetadataStore({ localQueryComparisonOptions: lqco });
    >      var em = new EntityManager( { metadataStore: ms });
    @param config - A configuration object.
    **/
    constructor(lqcoConfig: LocalQueryComparisonOptionsConfig);
    /**
    Case insensitive SQL compliant options - this is also the default unless otherwise changed.
    **/
    static caseInsensitiveSQL: LocalQueryComparisonOptions;
    /**
    The default value whenever LocalQueryComparisonOptions are not specified. By default this is 'caseInsensitiveSQL'.
    **/
    static defaultInstance: LocalQueryComparisonOptions;
    /**
    Sets the 'defaultInstance' by creating a copy of the current 'defaultInstance' and then applying all of the properties of the current instance.
    The current instance is returned unchanged.
    >     var lqco = new LocalQueryComparisonOptions({
    >        isCaseSensitive: false;
    >        usesSql92CompliantStringComparison: true;
    >     });
    >     lqco.setAsDefault();
    **/
    setAsDefault(): any;
}
