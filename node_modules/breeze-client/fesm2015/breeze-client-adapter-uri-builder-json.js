import { config, EntityType } from 'breeze-client';

class UriBuilderJsonAdapter {
    constructor() {
        this.name = "json";
    }
    static register(config$1) {
        config$1 = config$1 || config;
        config$1.registerAdapter("uriBuilder", UriBuilderJsonAdapter);
        return config$1.initializeAdapterInstance("uriBuilder", "json", true);
    }
    initialize() { }
    buildUri(entityQuery, metadataStore) {
        // force entityType validation;
        let entityType = entityQuery._getFromEntityType(metadataStore, false);
        if (!entityType)
            entityType = new EntityType(metadataStore);
        let json = entityQuery.toJSONExt({ entityType: entityType, toNameOnServer: true });
        json.from = undefined;
        json.queryOptions = undefined;
        if (json.parameters && json.parameters.$data) {
            // remove parameters if doing ajax post
            json.parameters = undefined;
        }
        let jsonString = JSON.stringify(json);
        if (jsonString.length > 2) {
            let urlBody = encodeURIComponent(jsonString);
            let sep = entityQuery.resourceName.includes("?") ? "&" : "?";
            return entityQuery.resourceName + sep + urlBody;
        }
        else {
            return entityQuery.resourceName;
        }
    }
}
config.registerAdapter("uriBuilder", UriBuilderJsonAdapter);

/**
 * Generated bundle index. Do not edit.
 */

export { UriBuilderJsonAdapter };
//# sourceMappingURL=breeze-client-adapter-uri-builder-json.js.map
